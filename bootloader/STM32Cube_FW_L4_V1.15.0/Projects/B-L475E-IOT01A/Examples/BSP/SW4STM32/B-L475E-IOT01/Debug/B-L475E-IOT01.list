
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  080048b0  080048b0  000148b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08004d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000210  08004f18  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004f18  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb3a  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002563  00000000  00000000  0002ed7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a32  00000000  00000000  000312dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000928  00000000  00000000  00035d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ae8  00000000  00000000  00036638  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000272be  00000000  00000000  00037120  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009efc  00000000  00000000  0005e3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f05cb  00000000  00000000  000682da  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001588a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002460  00000000  00000000  00158920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004894 	.word	0x08004894

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000214 	.word	0x20000214
 80001c4:	08004894 	.word	0x08004894

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e02:	b948      	cbnz	r0, 8000e18 <BSP_LED_Init+0x18>
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <BSP_LED_Init+0x3c>)
 8000e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e08:	f042 0202 	orr.w	r2, r2, #2
 8000e0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e22:	2100      	movs	r1, #0
 8000e24:	2302      	movs	r3, #2
 8000e26:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <BSP_LED_Init+0x40>)
 8000e2c:	a901      	add	r1, sp, #4
 8000e2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000e32:	f000 fa39 	bl	80012a8 <HAL_GPIO_Init>
}
 8000e36:	b007      	add	sp, #28
 8000e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	20000000 	.word	0x20000000

08000e44 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <BSP_PB_Init+0x70>)
 8000e48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e4a:	f042 0204 	orr.w	r2, r2, #4
 8000e4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e5a:	b989      	cbnz	r1, 8000e80 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e60:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2101      	movs	r1, #1
 8000e66:	2302      	movs	r3, #2
 8000e68:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <BSP_PB_Init+0x74>)
 8000e6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e72:	a901      	add	r1, sp, #4
 8000e74:	6840      	ldr	r0, [r0, #4]
 8000e76:	f000 fa17 	bl	80012a8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8000e7a:	b007      	add	sp, #28
 8000e7c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000e80:	2901      	cmp	r1, #1
 8000e82:	d1fa      	bne.n	8000e7a <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e88:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <BSP_PB_Init+0x78>)
 8000e90:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 8000e94:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e9a:	a901      	add	r1, sp, #4
 8000e9c:	6840      	ldr	r0, [r0, #4]
 8000e9e:	f000 fa03 	bl	80012a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	2028      	movs	r0, #40	; 0x28
 8000ea8:	f000 f8cc 	bl	8001044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000eac:	2028      	movs	r0, #40	; 0x28
 8000eae:	f000 f8fd 	bl	80010ac <HAL_NVIC_EnableIRQ>
}
 8000eb2:	e7e2      	b.n	8000e7a <BSP_PB_Init+0x36>
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	10110000 	.word	0x10110000

08000ec0 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	460e      	mov	r6, r1
 8000ec4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8000ec6:	b9d8      	cbnz	r0, 8000f00 <BSP_COM_Init+0x40>
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <BSP_COM_Init+0x80>)
 8000eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ecc:	f042 0202 	orr.w	r2, r2, #2
 8000ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed4:	f002 0202 	and.w	r2, r2, #2
 8000ed8:	9200      	str	r2, [sp, #0]
 8000eda:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8000edc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ede:	f042 0202 	orr.w	r2, r2, #2
 8000ee2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee6:	f002 0202 	and.w	r2, r2, #2
 8000eea:	9201      	str	r2, [sp, #4]
 8000eec:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8000eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ef4:	661a      	str	r2, [r3, #96]	; 0x60
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8000f00:	4c10      	ldr	r4, [pc, #64]	; (8000f44 <BSP_COM_Init+0x84>)
 8000f02:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f06:	2502      	movs	r5, #2
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8000f0e:	2707      	movs	r7, #7
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8000f12:	a903      	add	r1, sp, #12
 8000f14:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f16:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8000f1a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8000f1c:	f000 f9c4 	bl	80012a8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8000f20:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8000f22:	a903      	add	r1, sp, #12
 8000f24:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8000f26:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f28:	e9cd 3503 	strd	r3, r5, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8000f2c:	f000 f9bc 	bl	80012a8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8000f30:	6923      	ldr	r3, [r4, #16]
 8000f32:	6033      	str	r3, [r6, #0]
  HAL_UART_Init(huart);
 8000f34:	4630      	mov	r0, r6
 8000f36:	f001 f993 	bl	8002260 <HAL_UART_Init>
}
 8000f3a:	b009      	add	sp, #36	; 0x24
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	20000000 	.word	0x20000000

08000f48 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	490f      	ldr	r1, [pc, #60]	; (8000f88 <SystemInit+0x40>)
 8000f4a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <SystemInit+0x44>)
 8000f58:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f5a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000f5c:	f042 0201 	orr.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000f62:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000f6a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8000f70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f7e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f84:	608b      	str	r3, [r1, #8]
#endif
}
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000f96:	4e0f      	ldr	r6, [pc, #60]	; (8000fd4 <HAL_InitTick+0x40>)
{
 8000f98:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000f9a:	6830      	ldr	r0, [r6, #0]
 8000f9c:	b908      	cbnz	r0, 8000fa2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_InitTick+0x44>)
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fac:	6810      	ldr	r0, [r2, #0]
 8000fae:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb2:	f000 f889 	bl	80010c8 <HAL_SYSTICK_Config>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbc:	2d0f      	cmp	r5, #15
 8000fbe:	d8ee      	bhi.n	8000f9e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f83c 	bl	8001044 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fcc:	6075      	str	r5, [r6, #4]
 8000fce:	4620      	mov	r0, r4
 8000fd0:	e7e6      	b.n	8000fa0 <HAL_InitTick+0xc>
 8000fd2:	bf00      	nop
 8000fd4:	20000018 	.word	0x20000018
 8000fd8:	20000014 	.word	0x20000014

08000fdc <HAL_Init>:
{
 8000fdc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f81e 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f7ff ffd5 	bl	8000f94 <HAL_InitTick>
 8000fea:	4604      	mov	r4, r0
 8000fec:	b918      	cbnz	r0, 8000ff6 <HAL_Init+0x1a>
    HAL_MspInit();
 8000fee:	f7ff ffcf 	bl	8000f90 <HAL_MspInit>
}
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000ff6:	2401      	movs	r4, #1
 8000ff8:	e7fb      	b.n	8000ff2 <HAL_Init+0x16>
	...

08000ffc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_IncTick+0x10>)
 8000ffe:	4904      	ldr	r1, [pc, #16]	; (8001010 <HAL_IncTick+0x14>)
 8001000:	6813      	ldr	r3, [r2, #0]
 8001002:	6809      	ldr	r1, [r1, #0]
 8001004:	440b      	add	r3, r1
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000308 	.word	0x20000308
 8001010:	20000018 	.word	0x20000018

08001014 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001014:	4b01      	ldr	r3, [pc, #4]	; (800101c <HAL_GetTick+0x8>)
 8001016:	6818      	ldr	r0, [r3, #0]
}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000308 	.word	0x20000308

08001020 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001022:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001024:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	0200      	lsls	r0, r0, #8
 8001032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001036:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800103a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800103c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001046:	b570      	push	{r4, r5, r6, lr}
 8001048:	68dc      	ldr	r4, [r3, #12]
 800104a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104e:	f1c4 0507 	rsb	r5, r4, #7
 8001052:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001054:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	bf28      	it	cs
 800105a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001060:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001062:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	bf8c      	ite	hi
 8001068:	3c03      	subhi	r4, #3
 800106a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	ea21 0303 	bic.w	r3, r1, r3
 8001070:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001072:	fa06 f404 	lsl.w	r4, r6, r4
 8001076:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800107a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	bfa8      	it	ge
 8001082:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001086:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	bfbc      	itt	lt
 800108c:	f000 000f 	andlt.w	r0, r0, #15
 8001090:	4a05      	ldrlt	r2, [pc, #20]	; (80010a8 <HAL_NVIC_SetPriority+0x64>)
 8001092:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	bfaa      	itet	ge
 8001096:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	e000ed14 	.word	0xe000ed14

080010ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010ac:	2800      	cmp	r0, #0
 80010ae:	db08      	blt.n	80010c2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b0:	0942      	lsrs	r2, r0, #5
 80010b2:	2301      	movs	r3, #1
 80010b4:	f000 001f 	and.w	r0, r0, #31
 80010b8:	fa03 f000 	lsl.w	r0, r3, r0
 80010bc:	4b01      	ldr	r3, [pc, #4]	; (80010c4 <HAL_NVIC_EnableIRQ+0x18>)
 80010be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	3801      	subs	r0, #1
 80010ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ce:	d20a      	bcs.n	80010e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	21f0      	movs	r1, #240	; 0xf0
 80010d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80010f4:	4a09      	ldr	r2, [pc, #36]	; (800111c <FLASH_Program_Fast+0x28>)
 80010f6:	6953      	ldr	r3, [r2, #20]
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 80010fc:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80010fe:	6153      	str	r3, [r2, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001100:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
 8001106:	f501 7280 	add.w	r2, r1, #256	; 0x100
 800110a:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800110c:	680c      	ldr	r4, [r1, #0]
 800110e:	500c      	str	r4, [r1, r0]
    dest_addr++;
    src_addr++;
 8001110:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8001112:	4291      	cmp	r1, r2
 8001114:	d1fa      	bne.n	800110c <FLASH_Program_Fast+0x18>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001116:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800111a:	bd10      	pop	{r4, pc}
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_FLASH_Unlock+0x1c>)
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001126:	bfbf      	itttt	lt
 8001128:	4a05      	ldrlt	r2, [pc, #20]	; (8001140 <HAL_FLASH_Unlock+0x20>)
 800112a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800112c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001130:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001132:	bfba      	itte	lt
 8001134:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001136:	0fc0      	lsrlt	r0, r0, #31
 8001138:	2000      	movge	r0, #0
}
 800113a:	4770      	bx	lr
 800113c:	40022000 	.word	0x40022000
 8001140:	45670123 	.word	0x45670123

08001144 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_FLASH_Lock+0x10>)
 8001146:	6953      	ldr	r3, [r2, #20]
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	6153      	str	r3, [r2, #20]
}
 800114e:	2000      	movs	r0, #0
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <FLASH_WaitForLastOperation>:
{
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ff5a 	bl	8001014 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001160:	4c10      	ldr	r4, [pc, #64]	; (80011a4 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8001162:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001164:	6923      	ldr	r3, [r4, #16]
 8001166:	03db      	lsls	r3, r3, #15
 8001168:	d40b      	bmi.n	8001182 <FLASH_WaitForLastOperation+0x2a>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800116a:	6920      	ldr	r0, [r4, #16]
 800116c:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if(error != 0u)
 8001170:	4002      	ands	r2, r0
 8001172:	d00f      	beq.n	8001194 <FLASH_WaitForLastOperation+0x3c>
    pFlash.ErrorCode |= error;
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <FLASH_WaitForLastOperation+0x50>)
 8001176:	684b      	ldr	r3, [r1, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800117e:	6122      	str	r2, [r4, #16]
}
 8001180:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001182:	1c6a      	adds	r2, r5, #1
 8001184:	d0ee      	beq.n	8001164 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001186:	f7ff ff45 	bl	8001014 <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	42a8      	cmp	r0, r5
 800118e:	d3e9      	bcc.n	8001164 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8001190:	2003      	movs	r0, #3
 8001192:	e7f5      	b.n	8001180 <FLASH_WaitForLastOperation+0x28>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001194:	6920      	ldr	r0, [r4, #16]
 8001196:	f010 0001 	ands.w	r0, r0, #1
 800119a:	d0f1      	beq.n	8001180 <FLASH_WaitForLastOperation+0x28>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800119c:	2301      	movs	r3, #1
 800119e:	6123      	str	r3, [r4, #16]
 80011a0:	4610      	mov	r0, r2
 80011a2:	e7ed      	b.n	8001180 <FLASH_WaitForLastOperation+0x28>
 80011a4:	40022000 	.word	0x40022000
 80011a8:	20000020 	.word	0x20000020

080011ac <HAL_FLASH_Program>:
{
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80011b0:	4c25      	ldr	r4, [pc, #148]	; (8001248 <HAL_FLASH_Program+0x9c>)
{
 80011b2:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80011b4:	7823      	ldrb	r3, [r4, #0]
 80011b6:	2b01      	cmp	r3, #1
{
 80011b8:	4607      	mov	r7, r0
 80011ba:	4688      	mov	r8, r1
 80011bc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80011be:	d041      	beq.n	8001244 <HAL_FLASH_Program+0x98>
 80011c0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80011c6:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011c8:	f7ff ffc6 	bl	8001158 <FLASH_WaitForLastOperation>
 80011cc:	4606      	mov	r6, r0
  if(status == HAL_OK)
 80011ce:	bb30      	cbnz	r0, 800121e <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011d0:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80011d2:	481e      	ldr	r0, [pc, #120]	; (800124c <HAL_FLASH_Program+0xa0>)
 80011d4:	6805      	ldr	r5, [r0, #0]
 80011d6:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80011da:	bf17      	itett	ne
 80011dc:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80011de:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80011e0:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80011e4:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80011e6:	bf1c      	itt	ne
 80011e8:	2302      	movne	r3, #2
 80011ea:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80011ec:	b9e7      	cbnz	r7, 8001228 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011ee:	6945      	ldr	r5, [r0, #20]
 80011f0:	f045 0501 	orr.w	r5, r5, #1
 80011f4:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80011f6:	f8c8 9000 	str.w	r9, [r8]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80011fa:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 80011fe:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001200:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001204:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001208:	f7ff ffa6 	bl	8001158 <FLASH_WaitForLastOperation>
 800120c:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 800120e:	b125      	cbz	r5, 800121a <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_FLASH_Program+0xa0>)
 8001212:	6953      	ldr	r3, [r2, #20]
 8001214:	ea23 0505 	bic.w	r5, r3, r5
 8001218:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 800121a:	f000 f819 	bl	8001250 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800121e:	2300      	movs	r3, #0
 8001220:	7023      	strb	r3, [r4, #0]
}
 8001222:	4630      	mov	r0, r6
 8001224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001228:	1e7b      	subs	r3, r7, #1
 800122a:	2b01      	cmp	r3, #1
 800122c:	d901      	bls.n	8001232 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 800122e:	2500      	movs	r5, #0
 8001230:	e7e8      	b.n	8001204 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001232:	4649      	mov	r1, r9
 8001234:	4640      	mov	r0, r8
 8001236:	f7ff ff5d 	bl	80010f4 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800123a:	2f02      	cmp	r7, #2
 800123c:	d1f7      	bne.n	800122e <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 800123e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001242:	e7df      	b.n	8001204 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8001244:	2602      	movs	r6, #2
 8001246:	e7ec      	b.n	8001222 <HAL_FLASH_Program+0x76>
 8001248:	20000020 	.word	0x20000020
 800124c:	40022000 	.word	0x40022000

08001250 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001250:	4913      	ldr	r1, [pc, #76]	; (80012a0 <FLASH_FlushCaches+0x50>)
 8001252:	7f0b      	ldrb	r3, [r1, #28]
 8001254:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001256:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800125a:	2a01      	cmp	r2, #1
 800125c:	d10c      	bne.n	8001278 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800125e:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <FLASH_FlushCaches+0x54>)
 8001260:	6810      	ldr	r0, [r2, #0]
 8001262:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001266:	6010      	str	r0, [r2, #0]
 8001268:	6810      	ldr	r0, [r2, #0]
 800126a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800126e:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8001276:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001278:	3b02      	subs	r3, #2
 800127a:	2b01      	cmp	r3, #1
 800127c:	d80c      	bhi.n	8001298 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <FLASH_FlushCaches+0x54>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800128e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001298:	2300      	movs	r3, #0
 800129a:	770b      	strb	r3, [r1, #28]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000020 	.word	0x20000020
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ac:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800145c <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012b4:	4c67      	ldr	r4, [pc, #412]	; (8001454 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80012b8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	9a01      	ldr	r2, [sp, #4]
 80012bc:	40da      	lsrs	r2, r3
 80012be:	d102      	bne.n	80012c6 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80012c0:	b005      	add	sp, #20
 80012c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c6:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80012c8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ca:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80012cc:	ea16 0c02 	ands.w	ip, r6, r2
 80012d0:	f000 80b1 	beq.w	8001436 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d4:	684a      	ldr	r2, [r1, #4]
 80012d6:	f022 0710 	bic.w	r7, r2, #16
 80012da:	2f02      	cmp	r7, #2
 80012dc:	d116      	bne.n	800130c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80012de:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80012e2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e6:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80012ea:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80012f2:	f04f 0e0f 	mov.w	lr, #15
 80012f6:	fa0e fe0a 	lsl.w	lr, lr, sl
 80012fa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fe:	690d      	ldr	r5, [r1, #16]
 8001300:	fa05 f50a 	lsl.w	r5, r5, sl
 8001304:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001308:	f8c9 5020 	str.w	r5, [r9, #32]
 800130c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001310:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001312:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001316:	fa05 f50e 	lsl.w	r5, r5, lr
 800131a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001320:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	fa0a f90e 	lsl.w	r9, sl, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001328:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001330:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001334:	d811      	bhi.n	800135a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001336:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001338:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800133c:	68cf      	ldr	r7, [r1, #12]
 800133e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001342:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001346:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001348:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800134e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001352:	409f      	lsls	r7, r3
 8001354:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001358:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800135a:	f1ba 0f03 	cmp.w	sl, #3
 800135e:	d107      	bne.n	8001370 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001360:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001362:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001366:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800136a:	409f      	lsls	r7, r3
 800136c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800136e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001370:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001372:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001374:	688e      	ldr	r6, [r1, #8]
 8001376:	fa06 f60e 	lsl.w	r6, r6, lr
 800137a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800137c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137e:	00d5      	lsls	r5, r2, #3
 8001380:	d559      	bpl.n	8001436 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001386:	f045 0501 	orr.w	r5, r5, #1
 800138a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800138e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001392:	f023 0603 	bic.w	r6, r3, #3
 8001396:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800139a:	f005 0501 	and.w	r5, r5, #1
 800139e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80013a2:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80013aa:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013b0:	270f      	movs	r7, #15
 80013b2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ba:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013be:	d03c      	beq.n	800143a <HAL_GPIO_Init+0x192>
 80013c0:	4d25      	ldr	r5, [pc, #148]	; (8001458 <HAL_GPIO_Init+0x1b0>)
 80013c2:	42a8      	cmp	r0, r5
 80013c4:	d03b      	beq.n	800143e <HAL_GPIO_Init+0x196>
 80013c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	d039      	beq.n	8001442 <HAL_GPIO_Init+0x19a>
 80013ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	d037      	beq.n	8001446 <HAL_GPIO_Init+0x19e>
 80013d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013da:	42a8      	cmp	r0, r5
 80013dc:	d035      	beq.n	800144a <HAL_GPIO_Init+0x1a2>
 80013de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013e2:	42a8      	cmp	r0, r5
 80013e4:	d033      	beq.n	800144e <HAL_GPIO_Init+0x1a6>
 80013e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ea:	42a8      	cmp	r0, r5
 80013ec:	bf14      	ite	ne
 80013ee:	2507      	movne	r5, #7
 80013f0:	2506      	moveq	r5, #6
 80013f2:	fa05 f50e 	lsl.w	r5, r5, lr
 80013f6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f8:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80013fa:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80013fc:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001400:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001402:	bf54      	ite	pl
 8001404:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001406:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->IMR1 = temp;
 800140a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800140c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001410:	bf54      	ite	pl
 8001412:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001414:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->EMR1 = temp;
 8001418:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800141a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800141e:	bf54      	ite	pl
 8001420:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001422:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->RTSR1 = temp;
 8001426:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001428:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800142c:	bf54      	ite	pl
 800142e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001430:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->FTSR1 = temp;
 8001434:	60e5      	str	r5, [r4, #12]
    position++;
 8001436:	3301      	adds	r3, #1
 8001438:	e73f      	b.n	80012ba <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143a:	2500      	movs	r5, #0
 800143c:	e7d9      	b.n	80013f2 <HAL_GPIO_Init+0x14a>
 800143e:	2501      	movs	r5, #1
 8001440:	e7d7      	b.n	80013f2 <HAL_GPIO_Init+0x14a>
 8001442:	2502      	movs	r5, #2
 8001444:	e7d5      	b.n	80013f2 <HAL_GPIO_Init+0x14a>
 8001446:	2503      	movs	r5, #3
 8001448:	e7d3      	b.n	80013f2 <HAL_GPIO_Init+0x14a>
 800144a:	2504      	movs	r5, #4
 800144c:	e7d1      	b.n	80013f2 <HAL_GPIO_Init+0x14a>
 800144e:	2505      	movs	r5, #5
 8001450:	e7cf      	b.n	80013f2 <HAL_GPIO_Init+0x14a>
 8001452:	bf00      	nop
 8001454:	40010400 	.word	0x40010400
 8001458:	48000400 	.word	0x48000400
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <HAL_PWREx_GetVoltageRange+0xc>)
 8001462:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001464:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40007000 	.word	0x40007000

08001470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001470:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001472:	4d1e      	ldr	r5, [pc, #120]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001474:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001476:	00da      	lsls	r2, r3, #3
{
 8001478:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800147a:	d518      	bpl.n	80014ae <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800147c:	f7ff fff0 	bl	8001460 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001480:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001484:	d123      	bne.n	80014ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001486:	2c80      	cmp	r4, #128	; 0x80
 8001488:	d929      	bls.n	80014de <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800148a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800148c:	bf8c      	ite	hi
 800148e:	2002      	movhi	r0, #2
 8001490:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	f023 0307 	bic.w	r3, r3, #7
 800149a:	4303      	orrs	r3, r0
 800149c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80014a4:	1a18      	subs	r0, r3, r0
 80014a6:	bf18      	it	ne
 80014a8:	2001      	movne	r0, #1
 80014aa:	b003      	add	sp, #12
 80014ac:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	65ab      	str	r3, [r5, #88]	; 0x58
 80014b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80014c0:	f7ff ffce 	bl	8001460 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ca:	65ab      	str	r3, [r5, #88]	; 0x58
 80014cc:	e7d8      	b.n	8001480 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80014ce:	2c80      	cmp	r4, #128	; 0x80
 80014d0:	d807      	bhi.n	80014e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80014d2:	d008      	beq.n	80014e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80014d4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80014d8:	4258      	negs	r0, r3
 80014da:	4158      	adcs	r0, r3
 80014dc:	e7d9      	b.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014de:	2000      	movs	r0, #0
 80014e0:	e7d7      	b.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80014e2:	2003      	movs	r0, #3
 80014e4:	e7d5      	b.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80014e6:	2002      	movs	r0, #2
 80014e8:	e7d3      	b.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_GetSysClockFreq+0x8c>)
 80014f6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014fa:	f012 020c 	ands.w	r2, r2, #12
 80014fe:	d005      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x18>
 8001500:	2a0c      	cmp	r2, #12
 8001502:	d115      	bne.n	8001530 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001504:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001508:	2901      	cmp	r1, #1
 800150a:	d118      	bne.n	800153e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800150c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800150e:	481d      	ldr	r0, [pc, #116]	; (8001584 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001510:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001512:	bf55      	itete	pl
 8001514:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001518:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800151a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800151e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001522:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001526:	b34a      	cbz	r2, 800157c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001528:	2a0c      	cmp	r2, #12
 800152a:	d009      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x4c>
 800152c:	2000      	movs	r0, #0
  return sysclockfreq;
 800152e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001530:	2a04      	cmp	r2, #4
 8001532:	d022      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x86>
 8001534:	2a08      	cmp	r2, #8
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <HAL_RCC_GetSysClockFreq+0x94>)
 8001538:	bf18      	it	ne
 800153a:	2000      	movne	r0, #0
 800153c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800153e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001546:	2a02      	cmp	r2, #2
 8001548:	d015      	beq.n	8001576 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 800154a:	490f      	ldr	r1, [pc, #60]	; (8001588 <HAL_RCC_GetSysClockFreq+0x94>)
 800154c:	2a03      	cmp	r2, #3
 800154e:	bf08      	it	eq
 8001550:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001552:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001554:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800155c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001560:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001564:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001566:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001568:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800156a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800156c:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001570:	fbb0 f0f3 	udiv	r0, r0, r3
 8001574:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_RCC_GetSysClockFreq+0x98>)
 8001578:	e7eb      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	080048b0 	.word	0x080048b0
 8001588:	007a1200 	.word	0x007a1200
 800158c:	00f42400 	.word	0x00f42400

08001590 <HAL_RCC_OscConfig>:
{
 8001590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001594:	4605      	mov	r5, r0
 8001596:	b918      	cbnz	r0, 80015a0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
}
 800159a:	b003      	add	sp, #12
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a0:	4ca7      	ldr	r4, [pc, #668]	; (8001840 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a8:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015aa:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ae:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015b2:	d53d      	bpl.n	8001630 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015b4:	b11e      	cbz	r6, 80015be <HAL_RCC_OscConfig+0x2e>
 80015b6:	2e0c      	cmp	r6, #12
 80015b8:	d166      	bne.n	8001688 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ba:	2f01      	cmp	r7, #1
 80015bc:	d164      	bne.n	8001688 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	0799      	lsls	r1, r3, #30
 80015c2:	d502      	bpl.n	80015ca <HAL_RCC_OscConfig+0x3a>
 80015c4:	69ab      	ldr	r3, [r5, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0e6      	beq.n	8001598 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	6a28      	ldr	r0, [r5, #32]
 80015ce:	071a      	lsls	r2, r3, #28
 80015d0:	bf56      	itet	pl
 80015d2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80015d6:	6823      	ldrmi	r3, [r4, #0]
 80015d8:	091b      	lsrpl	r3, r3, #4
 80015da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015de:	4298      	cmp	r0, r3
 80015e0:	d93b      	bls.n	800165a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e2:	f7ff ff45 	bl	8001470 <RCC_SetFlashLatencyFromMSIRange>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1d6      	bne.n	8001598 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	6a2a      	ldr	r2, [r5, #32]
 80015f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015fa:	4313      	orrs	r3, r2
 80015fc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	6863      	ldr	r3, [r4, #4]
 8001600:	69ea      	ldr	r2, [r5, #28]
 8001602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001606:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800160a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800160c:	f7ff ff72 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001610:	68a3      	ldr	r3, [r4, #8]
 8001612:	4a8c      	ldr	r2, [pc, #560]	; (8001844 <HAL_RCC_OscConfig+0x2b4>)
 8001614:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	40d8      	lsrs	r0, r3
 8001620:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_RCC_OscConfig+0x2b8>)
 8001622:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001624:	4b89      	ldr	r3, [pc, #548]	; (800184c <HAL_RCC_OscConfig+0x2bc>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	f7ff fcb4 	bl	8000f94 <HAL_InitTick>
        if(status != HAL_OK)
 800162c:	2800      	cmp	r0, #0
 800162e:	d1b4      	bne.n	800159a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	07d9      	lsls	r1, r3, #31
 8001634:	d45f      	bmi.n	80016f6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	079a      	lsls	r2, r3, #30
 800163a:	f100 809e 	bmi.w	800177a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	0719      	lsls	r1, r3, #28
 8001642:	f100 80d2 	bmi.w	80017ea <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001646:	682b      	ldr	r3, [r5, #0]
 8001648:	075a      	lsls	r2, r3, #29
 800164a:	f100 8101 	bmi.w	8001850 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800164e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 816a 	bne.w	800192a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001656:	2000      	movs	r0, #0
 8001658:	e79f      	b.n	800159a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001668:	4303      	orrs	r3, r0
 800166a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166c:	6863      	ldr	r3, [r4, #4]
 800166e:	69ea      	ldr	r2, [r5, #28]
 8001670:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001678:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800167a:	2e00      	cmp	r6, #0
 800167c:	d1c6      	bne.n	800160c <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167e:	f7ff fef7 	bl	8001470 <RCC_SetFlashLatencyFromMSIRange>
 8001682:	2800      	cmp	r0, #0
 8001684:	d0c2      	beq.n	800160c <HAL_RCC_OscConfig+0x7c>
 8001686:	e787      	b.n	8001598 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001688:	69ab      	ldr	r3, [r5, #24]
 800168a:	b31b      	cbz	r3, 80016d4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001694:	f7ff fcbe 	bl	8001014 <HAL_GetTick>
 8001698:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	079b      	lsls	r3, r3, #30
 800169e:	d511      	bpl.n	80016c4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6023      	str	r3, [r4, #0]
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	6a2a      	ldr	r2, [r5, #32]
 80016ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b0:	4313      	orrs	r3, r2
 80016b2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b4:	6863      	ldr	r3, [r4, #4]
 80016b6:	69ea      	ldr	r2, [r5, #28]
 80016b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016c0:	6063      	str	r3, [r4, #4]
 80016c2:	e7b5      	b.n	8001630 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c4:	f7ff fca6 	bl	8001014 <HAL_GetTick>
 80016c8:	eba0 0008 	sub.w	r0, r0, r8
 80016cc:	2802      	cmp	r0, #2
 80016ce:	d9e4      	bls.n	800169a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80016d0:	2003      	movs	r0, #3
 80016d2:	e762      	b.n	800159a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc9a 	bl	8001014 <HAL_GetTick>
 80016e0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	0798      	lsls	r0, r3, #30
 80016e6:	d5a3      	bpl.n	8001630 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e8:	f7ff fc94 	bl	8001014 <HAL_GetTick>
 80016ec:	eba0 0008 	sub.w	r0, r0, r8
 80016f0:	2802      	cmp	r0, #2
 80016f2:	d9f6      	bls.n	80016e2 <HAL_RCC_OscConfig+0x152>
 80016f4:	e7ec      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016f6:	2e08      	cmp	r6, #8
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_OscConfig+0x172>
 80016fa:	2e0c      	cmp	r6, #12
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016fe:	2f03      	cmp	r7, #3
 8001700:	d106      	bne.n	8001710 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	039b      	lsls	r3, r3, #14
 8001706:	d596      	bpl.n	8001636 <HAL_RCC_OscConfig+0xa6>
 8001708:	686b      	ldr	r3, [r5, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d193      	bne.n	8001636 <HAL_RCC_OscConfig+0xa6>
 800170e:	e743      	b.n	8001598 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001710:	686b      	ldr	r3, [r5, #4]
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001716:	d110      	bne.n	800173a <HAL_RCC_OscConfig+0x1aa>
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001720:	f7ff fc78 	bl	8001014 <HAL_GetTick>
 8001724:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	0398      	lsls	r0, r3, #14
 800172a:	d484      	bmi.n	8001636 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fc72 	bl	8001014 <HAL_GetTick>
 8001730:	eba0 0008 	sub.w	r0, r0, r8
 8001734:	2864      	cmp	r0, #100	; 0x64
 8001736:	d9f6      	bls.n	8001726 <HAL_RCC_OscConfig+0x196>
 8001738:	e7ca      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173e:	d104      	bne.n	800174a <HAL_RCC_OscConfig+0x1ba>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001746:	6023      	str	r3, [r4, #0]
 8001748:	e7e6      	b.n	8001718 <HAL_RCC_OscConfig+0x188>
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001750:	6022      	str	r2, [r4, #0]
 8001752:	6822      	ldr	r2, [r4, #0]
 8001754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001758:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1e0      	bne.n	8001720 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800175e:	f7ff fc59 	bl	8001014 <HAL_GetTick>
 8001762:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	0399      	lsls	r1, r3, #14
 8001768:	f57f af65 	bpl.w	8001636 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc52 	bl	8001014 <HAL_GetTick>
 8001770:	eba0 0008 	sub.w	r0, r0, r8
 8001774:	2864      	cmp	r0, #100	; 0x64
 8001776:	d9f5      	bls.n	8001764 <HAL_RCC_OscConfig+0x1d4>
 8001778:	e7aa      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800177a:	2e04      	cmp	r6, #4
 800177c:	d003      	beq.n	8001786 <HAL_RCC_OscConfig+0x1f6>
 800177e:	2e0c      	cmp	r6, #12
 8001780:	d110      	bne.n	80017a4 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001782:	2f02      	cmp	r7, #2
 8001784:	d10e      	bne.n	80017a4 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	055a      	lsls	r2, r3, #21
 800178a:	d503      	bpl.n	8001794 <HAL_RCC_OscConfig+0x204>
 800178c:	68eb      	ldr	r3, [r5, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f43f af02 	beq.w	8001598 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	6863      	ldr	r3, [r4, #4]
 8001796:	692a      	ldr	r2, [r5, #16]
 8001798:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800179c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017a0:	6063      	str	r3, [r4, #4]
 80017a2:	e74c      	b.n	800163e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a4:	68eb      	ldr	r3, [r5, #12]
 80017a6:	b17b      	cbz	r3, 80017c8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017b0:	f7ff fc30 	bl	8001014 <HAL_GetTick>
 80017b4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	055b      	lsls	r3, r3, #21
 80017ba:	d4eb      	bmi.n	8001794 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017bc:	f7ff fc2a 	bl	8001014 <HAL_GetTick>
 80017c0:	1bc0      	subs	r0, r0, r7
 80017c2:	2802      	cmp	r0, #2
 80017c4:	d9f7      	bls.n	80017b6 <HAL_RCC_OscConfig+0x226>
 80017c6:	e783      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc20 	bl	8001014 <HAL_GetTick>
 80017d4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	0558      	lsls	r0, r3, #21
 80017da:	f57f af30 	bpl.w	800163e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fc19 	bl	8001014 <HAL_GetTick>
 80017e2:	1bc0      	subs	r0, r0, r7
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9f6      	bls.n	80017d6 <HAL_RCC_OscConfig+0x246>
 80017e8:	e772      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ea:	696b      	ldr	r3, [r5, #20]
 80017ec:	b19b      	cbz	r3, 8001816 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80017ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017fa:	f7ff fc0b 	bl	8001014 <HAL_GetTick>
 80017fe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001800:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001804:	079b      	lsls	r3, r3, #30
 8001806:	f53f af1e 	bmi.w	8001646 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fc03 	bl	8001014 <HAL_GetTick>
 800180e:	1bc0      	subs	r0, r0, r7
 8001810:	2802      	cmp	r0, #2
 8001812:	d9f5      	bls.n	8001800 <HAL_RCC_OscConfig+0x270>
 8001814:	e75c      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001816:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001822:	f7ff fbf7 	bl	8001014 <HAL_GetTick>
 8001826:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800182c:	0798      	lsls	r0, r3, #30
 800182e:	f57f af0a 	bpl.w	8001646 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fbef 	bl	8001014 <HAL_GetTick>
 8001836:	1bc0      	subs	r0, r0, r7
 8001838:	2802      	cmp	r0, #2
 800183a:	d9f5      	bls.n	8001828 <HAL_RCC_OscConfig+0x298>
 800183c:	e748      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	080048e0 	.word	0x080048e0
 8001848:	20000014 	.word	0x20000014
 800184c:	2000001c 	.word	0x2000001c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001850:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001852:	00d9      	lsls	r1, r3, #3
 8001854:	d429      	bmi.n	80018aa <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	65a3      	str	r3, [r4, #88]	; 0x58
 800185e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001868:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4f89      	ldr	r7, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	05da      	lsls	r2, r3, #23
 8001872:	d51d      	bpl.n	80018b0 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	68ab      	ldr	r3, [r5, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d12b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x342>
 800187a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001886:	f7ff fbc5 	bl	8001014 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800188e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001890:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001894:	0798      	lsls	r0, r3, #30
 8001896:	d542      	bpl.n	800191e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001898:	f1b8 0f00 	cmp.w	r8, #0
 800189c:	f43f aed7 	beq.w	800164e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80018a8:	e6d1      	b.n	800164e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	f04f 0800 	mov.w	r8, #0
 80018ae:	e7dd      	b.n	800186c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80018b8:	f7ff fbac 	bl	8001014 <HAL_GetTick>
 80018bc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	d4d7      	bmi.n	8001874 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff fba6 	bl	8001014 <HAL_GetTick>
 80018c8:	eba0 0009 	sub.w	r0, r0, r9
 80018cc:	2802      	cmp	r0, #2
 80018ce:	d9f6      	bls.n	80018be <HAL_RCC_OscConfig+0x32e>
 80018d0:	e6fe      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x354>
 80018d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80018e2:	e7ca      	b.n	800187a <HAL_RCC_OscConfig+0x2ea>
 80018e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80018f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80018f4:	f022 0204 	bic.w	r2, r2, #4
 80018f8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1c2      	bne.n	8001886 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001900:	f7ff fb88 	bl	8001014 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001908:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800190e:	0799      	lsls	r1, r3, #30
 8001910:	d5c2      	bpl.n	8001898 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fb7f 	bl	8001014 <HAL_GetTick>
 8001916:	1bc0      	subs	r0, r0, r7
 8001918:	4548      	cmp	r0, r9
 800191a:	d9f6      	bls.n	800190a <HAL_RCC_OscConfig+0x37a>
 800191c:	e6d8      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb79 	bl	8001014 <HAL_GetTick>
 8001922:	1bc0      	subs	r0, r0, r7
 8001924:	4548      	cmp	r0, r9
 8001926:	d9b3      	bls.n	8001890 <HAL_RCC_OscConfig+0x300>
 8001928:	e6d2      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192a:	2b02      	cmp	r3, #2
 800192c:	f040 808f 	bne.w	8001a4e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001930:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001934:	f003 0103 	and.w	r1, r3, #3
 8001938:	4291      	cmp	r1, r2
 800193a:	d124      	bne.n	8001986 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800193e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001942:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001948:	d11d      	bne.n	8001986 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800194c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001950:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001954:	d117      	bne.n	8001986 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001956:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001958:	3a07      	subs	r2, #7
 800195a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800195e:	bf18      	it	ne
 8001960:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001962:	4291      	cmp	r1, r2
 8001964:	d10f      	bne.n	8001986 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001966:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001968:	0852      	lsrs	r2, r2, #1
 800196a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800196e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001970:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001974:	d107      	bne.n	8001986 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001976:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001978:	0852      	lsrs	r2, r2, #1
 800197a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800197e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001980:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001984:	d04a      	beq.n	8001a1c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001986:	2e0c      	cmp	r6, #12
 8001988:	f43f ae06 	beq.w	8001598 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	f53f ae02 	bmi.w	8001598 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	f53f adfe 	bmi.w	8001598 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80019a4:	f7ff fb36 	bl	8001014 <HAL_GetTick>
 80019a8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	019f      	lsls	r7, r3, #6
 80019ae:	d42f      	bmi.n	8001a10 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	68e2      	ldr	r2, [r4, #12]
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80019b8:	4313      	orrs	r3, r2
 80019ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019c0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019c2:	3a01      	subs	r2, #1
 80019c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80019c8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80019ca:	0912      	lsrs	r2, r2, #4
 80019cc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80019d0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80019d2:	0852      	lsrs	r2, r2, #1
 80019d4:	3a01      	subs	r2, #1
 80019d6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80019da:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019dc:	0852      	lsrs	r2, r2, #1
 80019de:	3a01      	subs	r2, #1
 80019e0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80019e4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ec:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ee:	68e3      	ldr	r3, [r4, #12]
 80019f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80019f6:	f7ff fb0d 	bl	8001014 <HAL_GetTick>
 80019fa:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	0198      	lsls	r0, r3, #6
 8001a00:	f53f ae29 	bmi.w	8001656 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fb06 	bl	8001014 <HAL_GetTick>
 8001a08:	1b40      	subs	r0, r0, r5
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d9f6      	bls.n	80019fc <HAL_RCC_OscConfig+0x46c>
 8001a0e:	e65f      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fb00 	bl	8001014 <HAL_GetTick>
 8001a14:	1b80      	subs	r0, r0, r6
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d9c7      	bls.n	80019aa <HAL_RCC_OscConfig+0x41a>
 8001a1a:	e659      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	0199      	lsls	r1, r3, #6
 8001a20:	f53f ae19 	bmi.w	8001656 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a2c:	68e3      	ldr	r3, [r4, #12]
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001a34:	f7ff faee 	bl	8001014 <HAL_GetTick>
 8001a38:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	019a      	lsls	r2, r3, #6
 8001a3e:	f53f ae0a 	bmi.w	8001656 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff fae7 	bl	8001014 <HAL_GetTick>
 8001a46:	1b40      	subs	r0, r0, r5
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d9f6      	bls.n	8001a3a <HAL_RCC_OscConfig+0x4aa>
 8001a4c:	e640      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4e:	2e0c      	cmp	r6, #12
 8001a50:	f43f ada2 	beq.w	8001598 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a62:	bf02      	ittt	eq
 8001a64:	68e3      	ldreq	r3, [r4, #12]
 8001a66:	f023 0303 	biceq.w	r3, r3, #3
 8001a6a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a6c:	68e3      	ldr	r3, [r4, #12]
 8001a6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a78:	f7ff facc 	bl	8001014 <HAL_GetTick>
 8001a7c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	f57f ade8 	bpl.w	8001656 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff fac5 	bl	8001014 <HAL_GetTick>
 8001a8a:	1b40      	subs	r0, r0, r5
 8001a8c:	2802      	cmp	r0, #2
 8001a8e:	d9f6      	bls.n	8001a7e <HAL_RCC_OscConfig+0x4ee>
 8001a90:	e61e      	b.n	80016d0 <HAL_RCC_OscConfig+0x140>
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000
 8001a98:	f99d808c 	.word	0xf99d808c

08001a9c <HAL_RCC_ClockConfig>:
{
 8001a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	b910      	cbnz	r0, 8001aac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
}
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_RCC_ClockConfig+0x114>)
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	d32a      	bcc.n	8001b0e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	07d9      	lsls	r1, r3, #31
 8001abc:	d432      	bmi.n	8001b24 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abe:	6821      	ldr	r1, [r4, #0]
 8001ac0:	078a      	lsls	r2, r1, #30
 8001ac2:	d45b      	bmi.n	8001b7c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <HAL_RCC_ClockConfig+0x114>)
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	42b3      	cmp	r3, r6
 8001ace:	d85d      	bhi.n	8001b8c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	f011 0f04 	tst.w	r1, #4
 8001ad4:	4d37      	ldr	r5, [pc, #220]	; (8001bb4 <HAL_RCC_ClockConfig+0x118>)
 8001ad6:	d164      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	070b      	lsls	r3, r1, #28
 8001ada:	d506      	bpl.n	8001aea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001adc:	68ab      	ldr	r3, [r5, #8]
 8001ade:	6922      	ldr	r2, [r4, #16]
 8001ae0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ae4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ae8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aea:	f7ff fd03 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001aee:	68ab      	ldr	r3, [r5, #8]
 8001af0:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <HAL_RCC_ClockConfig+0x11c>)
 8001af2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	40d8      	lsrs	r0, r3
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_RCC_ClockConfig+0x120>)
 8001b04:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_RCC_ClockConfig+0x124>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f7ff ba43 	b.w	8000f94 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f023 0307 	bic.w	r3, r3, #7
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	428b      	cmp	r3, r1
 8001b20:	d1c1      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xa>
 8001b22:	e7c9      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b24:	6862      	ldr	r2, [r4, #4]
 8001b26:	4d23      	ldr	r5, [pc, #140]	; (8001bb4 <HAL_RCC_ClockConfig+0x118>)
 8001b28:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2c:	d11a      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b32:	d0b8      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b34:	68ab      	ldr	r3, [r5, #8]
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001b3e:	f7ff fa69 	bl	8001014 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b42:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b46:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	68ab      	ldr	r3, [r5, #8]
 8001b4a:	6862      	ldr	r2, [r4, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b54:	d0b3      	beq.n	8001abe <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b56:	f7ff fa5d 	bl	8001014 <HAL_GetTick>
 8001b5a:	1bc0      	subs	r0, r0, r7
 8001b5c:	4540      	cmp	r0, r8
 8001b5e:	d9f3      	bls.n	8001b48 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001b60:	2003      	movs	r0, #3
 8001b62:	e7a1      	b.n	8001aa8 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	2a02      	cmp	r2, #2
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b6c:	e7e1      	b.n	8001b32 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b6e:	b912      	cbnz	r2, 8001b76 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b70:	f013 0f02 	tst.w	r3, #2
 8001b74:	e7dd      	b.n	8001b32 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b7a:	e7da      	b.n	8001b32 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_RCC_ClockConfig+0x118>)
 8001b7e:	68a0      	ldr	r0, [r4, #8]
 8001b80:	6893      	ldr	r3, [r2, #8]
 8001b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b86:	4303      	orrs	r3, r0
 8001b88:	6093      	str	r3, [r2, #8]
 8001b8a:	e79b      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	f023 0307 	bic.w	r3, r3, #7
 8001b92:	4333      	orrs	r3, r6
 8001b94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	42b3      	cmp	r3, r6
 8001b9e:	d182      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xa>
 8001ba0:	e796      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba2:	68ab      	ldr	r3, [r5, #8]
 8001ba4:	68e2      	ldr	r2, [r4, #12]
 8001ba6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60ab      	str	r3, [r5, #8]
 8001bae:	e793      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	080048e0 	.word	0x080048e0
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	2000001c 	.word	0x2000001c

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bc6:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd2:	6810      	ldr	r0, [r2, #0]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
}
 8001bd8:	40d8      	lsrs	r0, r3
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	080048f0 	.word	0x080048f0
 8001be4:	20000014 	.word	0x20000014

08001be8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf6:	6810      	ldr	r0, [r2, #0]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
}
 8001bfc:	40d8      	lsrs	r0, r3
 8001bfe:	4770      	bx	lr
 8001c00:	40021000 	.word	0x40021000
 8001c04:	080048f0 	.word	0x080048f0
 8001c08:	20000014 	.word	0x20000014

08001c0c <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001c0c:	4770      	bx	lr
	...

08001c10 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c10:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c12:	69c1      	ldr	r1, [r0, #28]
{
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c18:	6883      	ldr	r3, [r0, #8]
 8001c1a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c1c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	6960      	ldr	r0, [r4, #20]
 8001c22:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c24:	48bb      	ldr	r0, [pc, #748]	; (8001f14 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c26:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c28:	4028      	ands	r0, r5
 8001c2a:	4303      	orrs	r3, r0
 8001c2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c2e:	6853      	ldr	r3, [r2, #4]
 8001c30:	68e0      	ldr	r0, [r4, #12]
 8001c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c36:	4303      	orrs	r3, r0
 8001c38:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c3a:	4bb7      	ldr	r3, [pc, #732]	; (8001f18 <UART_SetConfig+0x308>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c3c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c3e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001c40:	bf1c      	itt	ne
 8001c42:	6a23      	ldrne	r3, [r4, #32]
 8001c44:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c46:	6893      	ldr	r3, [r2, #8]
 8001c48:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001c4c:	4303      	orrs	r3, r0
 8001c4e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c50:	4bb2      	ldr	r3, [pc, #712]	; (8001f1c <UART_SetConfig+0x30c>)
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d119      	bne.n	8001c8a <UART_SetConfig+0x7a>
 8001c56:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c5a:	4ab1      	ldr	r2, [pc, #708]	; (8001f20 <UART_SetConfig+0x310>)
 8001c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c66:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c6a:	f040 813b 	bne.w	8001ee4 <UART_SetConfig+0x2d4>
  {
    switch (clocksource)
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	f200 80d7 	bhi.w	8001e22 <UART_SetConfig+0x212>
 8001c74:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c78:	00d2011d 	.word	0x00d2011d
 8001c7c:	00d50104 	.word	0x00d50104
 8001c80:	00d50117 	.word	0x00d50117
 8001c84:	00d500d5 	.word	0x00d500d5
 8001c88:	003b      	.short	0x003b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c8a:	4ba6      	ldr	r3, [pc, #664]	; (8001f24 <UART_SetConfig+0x314>)
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d109      	bne.n	8001ca4 <UART_SetConfig+0x94>
 8001c90:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c98:	4ba1      	ldr	r3, [pc, #644]	; (8001f20 <UART_SetConfig+0x310>)
 8001c9a:	f002 020c 	and.w	r2, r2, #12
 8001c9e:	4413      	add	r3, r2
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	e7e0      	b.n	8001c66 <UART_SetConfig+0x56>
 8001ca4:	4ba0      	ldr	r3, [pc, #640]	; (8001f28 <UART_SetConfig+0x318>)
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d126      	bne.n	8001cf8 <UART_SetConfig+0xe8>
 8001caa:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	f000 80eb 	beq.w	8001e92 <UART_SetConfig+0x282>
 8001cbc:	d80b      	bhi.n	8001cd6 <UART_SetConfig+0xc6>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d056      	beq.n	8001d70 <UART_SetConfig+0x160>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cc2:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <UART_SetConfig+0x308>)
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d064      	beq.n	8001d92 <UART_SetConfig+0x182>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ccc:	f000 80a9 	beq.w	8001e22 <UART_SetConfig+0x212>
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 8001cd0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e0b1      	b.n	8001e3a <UART_SetConfig+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	f000 80cc 	beq.w	8001e74 <UART_SetConfig+0x264>
 8001cdc:	2b30      	cmp	r3, #48	; 0x30
 8001cde:	d1f0      	bne.n	8001cc2 <UART_SetConfig+0xb2>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ce0:	4b8d      	ldr	r3, [pc, #564]	; (8001f18 <UART_SetConfig+0x308>)
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d05b      	beq.n	8001d9e <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ce6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cea:	f040 80be 	bne.w	8001e6a <UART_SetConfig+0x25a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cee:	6860      	ldr	r0, [r4, #4]
 8001cf0:	0843      	lsrs	r3, r0, #1
 8001cf2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001cf6:	e0c9      	b.n	8001e8c <UART_SetConfig+0x27c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <UART_SetConfig+0x31c>)
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10e      	bne.n	8001d1c <UART_SetConfig+0x10c>
 8001cfe:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	f000 80c1 	beq.w	8001e92 <UART_SetConfig+0x282>
 8001d10:	d9d5      	bls.n	8001cbe <UART_SetConfig+0xae>
 8001d12:	2b80      	cmp	r3, #128	; 0x80
 8001d14:	f000 80ae 	beq.w	8001e74 <UART_SetConfig+0x264>
 8001d18:	2bc0      	cmp	r3, #192	; 0xc0
 8001d1a:	e7e0      	b.n	8001cde <UART_SetConfig+0xce>
 8001d1c:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <UART_SetConfig+0x320>)
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d111      	bne.n	8001d46 <UART_SetConfig+0x136>
 8001d22:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d32:	f000 80ae 	beq.w	8001e92 <UART_SetConfig+0x282>
 8001d36:	d9c2      	bls.n	8001cbe <UART_SetConfig+0xae>
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	f000 809a 	beq.w	8001e74 <UART_SetConfig+0x264>
 8001d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d44:	e7cb      	b.n	8001cde <UART_SetConfig+0xce>
 8001d46:	4b74      	ldr	r3, [pc, #464]	; (8001f18 <UART_SetConfig+0x308>)
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1bd      	bne.n	8001cc8 <UART_SetConfig+0xb8>
 8001d4c:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5c:	f000 8099 	beq.w	8001e92 <UART_SetConfig+0x282>
 8001d60:	d9ad      	bls.n	8001cbe <UART_SetConfig+0xae>
 8001d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d66:	f000 8085 	beq.w	8001e74 <UART_SetConfig+0x264>
 8001d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d6e:	e7b6      	b.n	8001cde <UART_SetConfig+0xce>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d70:	4b69      	ldr	r3, [pc, #420]	; (8001f18 <UART_SetConfig+0x308>)
 8001d72:	429a      	cmp	r2, r3
 8001d74:	f040 809a 	bne.w	8001eac <UART_SetConfig+0x29c>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001d78:	f7ff ff24 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001d7c:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001d7e:	b918      	cbnz	r0, 8001d88 <UART_SetConfig+0x178>
 8001d80:	4602      	mov	r2, r0
 8001d82:	e007      	b.n	8001d94 <UART_SetConfig+0x184>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001d84:	486b      	ldr	r0, [pc, #428]	; (8001f34 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d86:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001d88:	6862      	ldr	r2, [r4, #4]
 8001d8a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001d8e:	4281      	cmp	r1, r0
 8001d90:	d909      	bls.n	8001da6 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8001d92:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001d94:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001d96:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d9e:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001da0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001da4:	e7f0      	b.n	8001d88 <UART_SetConfig+0x178>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001da6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001daa:	d8f2      	bhi.n	8001d92 <UART_SetConfig+0x182>
        switch (clocksource)
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d832      	bhi.n	8001e16 <UART_SetConfig+0x206>
 8001db0:	e8df f003 	tbb	[pc, r3]
 8001db4:	31123105 	.word	0x31123105
 8001db8:	31313125 	.word	0x31313125
 8001dbc:	28          	.byte	0x28
 8001dbd:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 8001dbe:	f7ff ff01 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc8:	0856      	lsrs	r6, r2, #1
 8001dca:	2700      	movs	r7, #0
 8001dcc:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	4639      	mov	r1, r7
 8001dd6:	e007      	b.n	8001de8 <UART_SetConfig+0x1d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001dd8:	4e57      	ldr	r6, [pc, #348]	; (8001f38 <UART_SetConfig+0x328>)
 8001dda:	0855      	lsrs	r5, r2, #1
 8001ddc:	2700      	movs	r7, #0
 8001dde:	1970      	adds	r0, r6, r5
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	f147 0100 	adc.w	r1, r7, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001de8:	f7fe fe8a 	bl	8000b00 <__aeabi_uldivmod>
            break;
 8001dec:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <UART_SetConfig+0x32c>)
 8001df0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001df4:	4299      	cmp	r1, r3
 8001df6:	d8cc      	bhi.n	8001d92 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	60d8      	str	r0, [r3, #12]
 8001dfc:	e7ca      	b.n	8001d94 <UART_SetConfig+0x184>
            pclk = HAL_RCC_GetSysClockFreq();
 8001dfe:	f7ff fb79 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001e02:	e7de      	b.n	8001dc2 <UART_SetConfig+0x1b2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001e04:	0850      	lsrs	r0, r2, #1
 8001e06:	2600      	movs	r6, #0
 8001e08:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	f146 0100 	adc.w	r1, r6, #0
 8001e14:	e7e8      	b.n	8001de8 <UART_SetConfig+0x1d8>
            ret = HAL_ERROR;
 8001e16:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001e18:	2000      	movs	r0, #0
 8001e1a:	e7e8      	b.n	8001dee <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e1c:	f7ff fee4 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8001e20:	e049      	b.n	8001eb6 <UART_SetConfig+0x2a6>
        ret = HAL_ERROR;
 8001e22:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e04e      	b.n	8001ec6 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e28:	f7ff fecc 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e36:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e38:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e3a:	f1a3 0010 	sub.w	r0, r3, #16
 8001e3e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001e42:	4288      	cmp	r0, r1
 8001e44:	d8a5      	bhi.n	8001d92 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001e46:	6821      	ldr	r1, [r4, #0]
 8001e48:	60cb      	str	r3, [r1, #12]
 8001e4a:	e7a3      	b.n	8001d94 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e4c:	f7ff fecc 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8001e50:	e7ec      	b.n	8001e2c <UART_SetConfig+0x21c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e52:	6860      	ldr	r0, [r4, #4]
 8001e54:	0843      	lsrs	r3, r0, #1
 8001e56:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001e5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e62:	e7e8      	b.n	8001e36 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e64:	f7ff fb46 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001e68:	e7e0      	b.n	8001e2c <UART_SetConfig+0x21c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e6a:	6860      	ldr	r0, [r4, #4]
 8001e6c:	0843      	lsrs	r3, r0, #1
 8001e6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e72:	e7f4      	b.n	8001e5e <UART_SetConfig+0x24e>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <UART_SetConfig+0x308>)
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d084      	beq.n	8001d84 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e7a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001e7e:	d1e8      	bne.n	8001e52 <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e80:	6860      	ldr	r0, [r4, #4]
 8001e82:	0843      	lsrs	r3, r0, #1
 8001e84:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001e88:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e90:	e017      	b.n	8001ec2 <UART_SetConfig+0x2b2>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <UART_SetConfig+0x308>)
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d103      	bne.n	8001ea0 <UART_SetConfig+0x290>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001e98:	f7ff fb2c 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
        break;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e76e      	b.n	8001d7e <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ea4:	d1de      	bne.n	8001e64 <UART_SetConfig+0x254>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ea6:	f7ff fb25 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001eaa:	e004      	b.n	8001eb6 <UART_SetConfig+0x2a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001eb0:	d1ba      	bne.n	8001e28 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eb2:	f7ff fe87 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001eb6:	6861      	ldr	r1, [r4, #4]
 8001eb8:	084a      	lsrs	r2, r1, #1
 8001eba:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ec4:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ec6:	f1a3 0010 	sub.w	r0, r3, #16
 8001eca:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ece:	4288      	cmp	r0, r1
 8001ed0:	f63f af5f 	bhi.w	8001d92 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ed4:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001ed8:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001eda:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	60c3      	str	r3, [r0, #12]
 8001ee2:	e757      	b.n	8001d94 <UART_SetConfig+0x184>
    switch (clocksource)
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	f63f af54 	bhi.w	8001d92 <UART_SetConfig+0x182>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <UART_SetConfig+0x2e0>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001e29 	.word	0x08001e29
 8001ef4:	08001e4d 	.word	0x08001e4d
 8001ef8:	08001e53 	.word	0x08001e53
 8001efc:	08001d93 	.word	0x08001d93
 8001f00:	08001e65 	.word	0x08001e65
 8001f04:	08001d93 	.word	0x08001d93
 8001f08:	08001d93 	.word	0x08001d93
 8001f0c:	08001d93 	.word	0x08001d93
 8001f10:	08001e6b 	.word	0x08001e6b
 8001f14:	efff69f3 	.word	0xefff69f3
 8001f18:	40008000 	.word	0x40008000
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	080048f8 	.word	0x080048f8
 8001f24:	40004400 	.word	0x40004400
 8001f28:	40004800 	.word	0x40004800
 8001f2c:	40004c00 	.word	0x40004c00
 8001f30:	40005000 	.word	0x40005000
 8001f34:	00f42400 	.word	0x00f42400
 8001f38:	f4240000 	.word	0xf4240000
 8001f3c:	000ffcff 	.word	0x000ffcff

08001f40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f42:	07da      	lsls	r2, r3, #31
{
 8001f44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f46:	d506      	bpl.n	8001f56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f48:	6801      	ldr	r1, [r0, #0]
 8001f4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f4c:	684a      	ldr	r2, [r1, #4]
 8001f4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f52:	4322      	orrs	r2, r4
 8001f54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f56:	079c      	lsls	r4, r3, #30
 8001f58:	d506      	bpl.n	8001f68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f5a:	6801      	ldr	r1, [r0, #0]
 8001f5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f5e:	684a      	ldr	r2, [r1, #4]
 8001f60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f64:	4322      	orrs	r2, r4
 8001f66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f68:	0759      	lsls	r1, r3, #29
 8001f6a:	d506      	bpl.n	8001f7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f6c:	6801      	ldr	r1, [r0, #0]
 8001f6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f70:	684a      	ldr	r2, [r1, #4]
 8001f72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f76:	4322      	orrs	r2, r4
 8001f78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f7a:	071a      	lsls	r2, r3, #28
 8001f7c:	d506      	bpl.n	8001f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f7e:	6801      	ldr	r1, [r0, #0]
 8001f80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f82:	684a      	ldr	r2, [r1, #4]
 8001f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f88:	4322      	orrs	r2, r4
 8001f8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f8c:	06dc      	lsls	r4, r3, #27
 8001f8e:	d506      	bpl.n	8001f9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f90:	6801      	ldr	r1, [r0, #0]
 8001f92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f94:	688a      	ldr	r2, [r1, #8]
 8001f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f9a:	4322      	orrs	r2, r4
 8001f9c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f9e:	0699      	lsls	r1, r3, #26
 8001fa0:	d506      	bpl.n	8001fb0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fa2:	6801      	ldr	r1, [r0, #0]
 8001fa4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001fa6:	688a      	ldr	r2, [r1, #8]
 8001fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fac:	4322      	orrs	r2, r4
 8001fae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fb0:	065a      	lsls	r2, r3, #25
 8001fb2:	d50f      	bpl.n	8001fd4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fb4:	6801      	ldr	r1, [r0, #0]
 8001fb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001fb8:	684a      	ldr	r2, [r1, #4]
 8001fba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001fbe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fc4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fc6:	d105      	bne.n	8001fd4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fc8:	684a      	ldr	r2, [r1, #4]
 8001fca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fcc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001fd0:	4322      	orrs	r2, r4
 8001fd2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	d506      	bpl.n	8001fe6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fd8:	6802      	ldr	r2, [r0, #0]
 8001fda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001fdc:	6853      	ldr	r3, [r2, #4]
 8001fde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	6053      	str	r3, [r2, #4]
  }
}
 8001fe6:	bd10      	pop	{r4, pc}

08001fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fec:	9d06      	ldr	r5, [sp, #24]
 8001fee:	4604      	mov	r4, r0
 8001ff0:	460f      	mov	r7, r1
 8001ff2:	4616      	mov	r6, r2
 8001ff4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff6:	6821      	ldr	r1, [r4, #0]
 8001ff8:	69ca      	ldr	r2, [r1, #28]
 8001ffa:	ea37 0302 	bics.w	r3, r7, r2
 8001ffe:	bf0c      	ite	eq
 8002000:	2201      	moveq	r2, #1
 8002002:	2200      	movne	r2, #0
 8002004:	42b2      	cmp	r2, r6
 8002006:	d001      	beq.n	800200c <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002008:	2000      	movs	r0, #0
 800200a:	e018      	b.n	800203e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800200c:	1c68      	adds	r0, r5, #1
 800200e:	d0f3      	beq.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002010:	f7ff f800 	bl	8001014 <HAL_GetTick>
 8002014:	eba0 0008 	sub.w	r0, r0, r8
 8002018:	42a8      	cmp	r0, r5
 800201a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800201c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201e:	d800      	bhi.n	8002022 <UART_WaitOnFlagUntilTimeout+0x3a>
 8002020:	b97d      	cbnz	r5, 8002042 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002022:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002026:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002028:	6883      	ldr	r3, [r0, #8]
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002030:	2320      	movs	r3, #32
 8002032:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002034:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002036:	2300      	movs	r3, #0
 8002038:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
}
 800203e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002042:	075a      	lsls	r2, r3, #29
 8002044:	d5d7      	bpl.n	8001ff6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002046:	69c3      	ldr	r3, [r0, #28]
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	d5d4      	bpl.n	8001ff6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800204c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002050:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002052:	6803      	ldr	r3, [r0, #0]
 8002054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002058:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	6883      	ldr	r3, [r0, #8]
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002062:	2320      	movs	r3, #32
 8002064:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002066:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002068:	67e3      	str	r3, [r4, #124]	; 0x7c
 800206a:	e7e4      	b.n	8002036 <UART_WaitOnFlagUntilTimeout+0x4e>

0800206c <HAL_UART_Transmit>:
{
 800206c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002070:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002072:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002074:	2b20      	cmp	r3, #32
{
 8002076:	4604      	mov	r4, r0
 8002078:	460e      	mov	r6, r1
 800207a:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800207c:	d14c      	bne.n	8002118 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 800207e:	2900      	cmp	r1, #0
 8002080:	d048      	beq.n	8002114 <HAL_UART_Transmit+0xa8>
 8002082:	2a00      	cmp	r2, #0
 8002084:	d046      	beq.n	8002114 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8002086:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800208a:	2b01      	cmp	r3, #1
 800208c:	d044      	beq.n	8002118 <HAL_UART_Transmit+0xac>
 800208e:	2301      	movs	r3, #1
 8002090:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002094:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002096:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002098:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800209c:	f7fe ffba 	bl	8001014 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80020a2:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80020aa:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80020ac:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	d103      	bne.n	80020ba <HAL_UART_Transmit+0x4e>
 80020b2:	6923      	ldr	r3, [r4, #16]
 80020b4:	b90b      	cbnz	r3, 80020ba <HAL_UART_Transmit+0x4e>
 80020b6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80020b8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80020ba:	2300      	movs	r3, #0
 80020bc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80020c0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80020c8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80020cc:	b93a      	cbnz	r2, 80020de <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff ff89 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout>
 80020d6:	b940      	cbnz	r0, 80020ea <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80020d8:	2320      	movs	r3, #32
 80020da:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80020dc:	e006      	b.n	80020ec <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff ff80 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout>
 80020e8:	b118      	cbz	r0, 80020f2 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 80020ea:	2003      	movs	r0, #3
}
 80020ec:	b003      	add	sp, #12
 80020ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020f2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80020f4:	b95e      	cbnz	r6, 800210e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002100:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002104:	3b01      	subs	r3, #1
 8002106:	b29b      	uxth	r3, r3
 8002108:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800210c:	e7d8      	b.n	80020c0 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800210e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002112:	e7f4      	b.n	80020fe <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7e9      	b.n	80020ec <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002118:	2002      	movs	r0, #2
 800211a:	e7e7      	b.n	80020ec <HAL_UART_Transmit+0x80>

0800211c <HAL_UART_Receive>:
{
 800211c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002120:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002122:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002124:	2b20      	cmp	r3, #32
{
 8002126:	4604      	mov	r4, r0
 8002128:	460d      	mov	r5, r1
 800212a:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800212c:	d164      	bne.n	80021f8 <HAL_UART_Receive+0xdc>
    if ((pData == NULL) || (Size == 0U))
 800212e:	2900      	cmp	r1, #0
 8002130:	d060      	beq.n	80021f4 <HAL_UART_Receive+0xd8>
 8002132:	2a00      	cmp	r2, #0
 8002134:	d05e      	beq.n	80021f4 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8002136:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800213a:	2b01      	cmp	r3, #1
 800213c:	d05c      	beq.n	80021f8 <HAL_UART_Receive+0xdc>
 800213e:	2301      	movs	r3, #1
 8002140:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002144:	2700      	movs	r7, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002146:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800214a:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800214c:	f7fe ff62 	bl	8001014 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002150:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8002152:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800215a:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800215c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002160:	d11c      	bne.n	800219c <HAL_UART_Receive+0x80>
 8002162:	6922      	ldr	r2, [r4, #16]
 8002164:	b9c2      	cbnz	r2, 8002198 <HAL_UART_Receive+0x7c>
 8002166:	f240 12ff 	movw	r2, #511	; 0x1ff
 800216a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8002172:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002176:	d122      	bne.n	80021be <HAL_UART_Receive+0xa2>
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	bb03      	cbnz	r3, 80021be <HAL_UART_Receive+0xa2>
 800217c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800217e:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8002180:	2300      	movs	r3, #0
 8002182:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8002186:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800218a:	b280      	uxth	r0, r0
 800218c:	b9c8      	cbnz	r0, 80021c2 <HAL_UART_Receive+0xa6>
    huart->RxState = HAL_UART_STATE_READY;
 800218e:	2320      	movs	r3, #32
 8002190:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002192:	b003      	add	sp, #12
 8002194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8002198:	22ff      	movs	r2, #255	; 0xff
 800219a:	e7e6      	b.n	800216a <HAL_UART_Receive+0x4e>
 800219c:	b923      	cbnz	r3, 80021a8 <HAL_UART_Receive+0x8c>
 800219e:	6922      	ldr	r2, [r4, #16]
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d0f9      	beq.n	8002198 <HAL_UART_Receive+0x7c>
 80021a4:	227f      	movs	r2, #127	; 0x7f
 80021a6:	e7e0      	b.n	800216a <HAL_UART_Receive+0x4e>
 80021a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ac:	d104      	bne.n	80021b8 <HAL_UART_Receive+0x9c>
 80021ae:	6922      	ldr	r2, [r4, #16]
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	d0f7      	beq.n	80021a4 <HAL_UART_Receive+0x88>
 80021b4:	223f      	movs	r2, #63	; 0x3f
 80021b6:	e7d8      	b.n	800216a <HAL_UART_Receive+0x4e>
 80021b8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80021bc:	e7d7      	b.n	800216e <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 80021be:	2600      	movs	r6, #0
 80021c0:	e7de      	b.n	8002180 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	f8cd 9000 	str.w	r9, [sp]
 80021c6:	4643      	mov	r3, r8
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff0b 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout>
 80021d2:	b998      	cbnz	r0, 80021fc <HAL_UART_Receive+0xe0>
 80021d4:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021d8:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80021da:	b945      	cbnz	r5, 80021ee <HAL_UART_Receive+0xd2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021dc:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80021e0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80021ec:	e7cb      	b.n	8002186 <HAL_UART_Receive+0x6a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021ee:	f805 3b01 	strb.w	r3, [r5], #1
 80021f2:	e7f5      	b.n	80021e0 <HAL_UART_Receive+0xc4>
      return  HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
 80021f6:	e7cc      	b.n	8002192 <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 80021f8:	2002      	movs	r0, #2
 80021fa:	e7ca      	b.n	8002192 <HAL_UART_Receive+0x76>
        return HAL_TIMEOUT;
 80021fc:	2003      	movs	r0, #3
 80021fe:	e7c8      	b.n	8002192 <HAL_UART_Receive+0x76>

08002200 <UART_CheckIdleState>:
{
 8002200:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002202:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	2600      	movs	r6, #0
 8002206:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002208:	f7fe ff04 	bl	8001014 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002212:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002214:	d415      	bmi.n	8002242 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	075b      	lsls	r3, r3, #29
 800221c:	d50a      	bpl.n	8002234 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800221e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	462b      	mov	r3, r5
 8002228:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff fedb 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout>
 8002232:	b990      	cbnz	r0, 800225a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002234:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002236:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002238:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800223a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800223e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002240:	e00c      	b.n	800225c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4632      	mov	r2, r6
 800224a:	4603      	mov	r3, r0
 800224c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff fec9 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout>
 8002256:	2800      	cmp	r0, #0
 8002258:	d0dd      	beq.n	8002216 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800225a:	2003      	movs	r0, #3
}
 800225c:	b002      	add	sp, #8
 800225e:	bd70      	pop	{r4, r5, r6, pc}

08002260 <HAL_UART_Init>:
{
 8002260:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002262:	4604      	mov	r4, r0
 8002264:	b340      	cbz	r0, 80022b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002268:	b91b      	cbnz	r3, 8002272 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800226a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800226e:	f7ff fccd 	bl	8001c0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002272:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002274:	2324      	movs	r3, #36	; 0x24
 8002276:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff fcc5 	bl	8001c10 <UART_SetConfig>
 8002286:	2801      	cmp	r0, #1
 8002288:	d016      	beq.n	80022b8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800228c:	b113      	cbz	r3, 8002294 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff fe56 	bl	8001f40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80022ac:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80022b4:	f7ff bfa4 	b.w	8002200 <UART_CheckIdleState>
}
 80022b8:	2001      	movs	r0, #1
 80022ba:	bd10      	pop	{r4, pc}

080022bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022c2:	e003      	b.n	80022cc <LoopCopyDataInit>

080022c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022ca:	3104      	adds	r1, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022d4:	d3f6      	bcc.n	80022c4 <CopyDataInit>
	ldr	r2, =_sbss
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022d8:	e002      	b.n	80022e0 <LoopFillZerobss>

080022da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022dc:	f842 3b04 	str.w	r3, [r2], #4

080022e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <LoopForever+0x16>)
	cmp	r2, r3
 80022e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022e4:	d3f9      	bcc.n	80022da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022e6:	f7fe fe2f 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f000 f985 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ee:	f000 f92d 	bl	800254c <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80022f8:	08004d08 	.word	0x08004d08
	ldr	r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002300:	20000210 	.word	0x20000210
	ldr	r2, =_sbss
 8002304:	20000210 	.word	0x20000210
	ldr	r3, = _ebss
 8002308:	20000310 	.word	0x20000310

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>

0800230e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 800230e:	b510      	push	{r4, lr}
 8002310:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8002312:	f000 f94b 	bl	80025ac <__io_getchar>
 8002316:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8002318:	2001      	movs	r0, #1
 800231a:	bd10      	pop	{r4, pc}

0800231c <_write>:

int _write(int file, char *ptr, int len)
{
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	460e      	mov	r6, r1
 8002320:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	460c      	mov	r4, r1
 8002324:	1ba3      	subs	r3, r4, r6
 8002326:	429d      	cmp	r5, r3
 8002328:	dc01      	bgt.n	800232e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800232a:	4628      	mov	r0, r5
 800232c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800232e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002332:	f000 f927 	bl	8002584 <__io_putchar>
 8002336:	e7f5      	b.n	8002324 <_write+0x8>

08002338 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002338:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <_sbrk+0x2c>)
 800233c:	6819      	ldr	r1, [r3, #0]
{
 800233e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002340:	b909      	cbnz	r1, 8002346 <_sbrk+0xe>
		heap_end = &end;
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <_sbrk+0x30>)
 8002344:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002346:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002348:	4669      	mov	r1, sp
 800234a:	4402      	add	r2, r0
 800234c:	428a      	cmp	r2, r1
 800234e:	d906      	bls.n	800235e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002350:	f000 f94c 	bl	80025ec <__errno>
 8002354:	230c      	movs	r3, #12
 8002356:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800235c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800235e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002360:	e7fc      	b.n	800235c <_sbrk+0x24>
 8002362:	bf00      	nop
 8002364:	2000022c 	.word	0x2000022c
 8002368:	20000310 	.word	0x20000310

0800236c <_close>:

int _close(int file)
{
	return -1;
}
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	4770      	bx	lr

08002372 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002376:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002378:	2000      	movs	r0, #0
 800237a:	4770      	bx	lr

0800237c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800237c:	2001      	movs	r0, #1
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002380:	2000      	movs	r0, #0
 8002382:	4770      	bx	lr

08002384 <execute_img1>:

void execute_img1(){

	void (*img_1_call_back)(void);//pointer to hold the reset handler
	//MSP
	uint32_t mspVal= *(volatile uint32_t*)IMG_1_START_ADDR;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <execute_img1+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002388:	f383 8808 	msr	MSP, r3
	__set_MSP(mspVal);

	//second address is address of reset handler
	uint32_t resetHandler= *(volatile uint32_t*)(IMG_1_START_ADDR+4);
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <execute_img1+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
	img_1_call_back = (void *)resetHandler;
	//printf("RH: %d\n",resetHandler);
	//Jumping to User Application;
	img_1_call_back();
 8002390:	4718      	bx	r3
 8002392:	bf00      	nop
 8002394:	08080000 	.word	0x08080000
 8002398:	08080004 	.word	0x08080004

0800239c <execute_img0>:

	//printf("RH: %x\n",IMG_0_START_ADDR+4);
	void (*img_0_call_back)(void);//pointer to hold the reset handler
	//MSP

	uint32_t mspVal= *(volatile uint32_t*)IMG_0_START_ADDR;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <execute_img0+0x10>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f383 8808 	msr	MSP, r3
	__set_MSP(mspVal);

	//second address is address of reset handler
	uint32_t resetHandler= *(volatile uint32_t*)(IMG_0_START_ADDR+4);
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <execute_img0+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
	img_0_call_back = (void *)resetHandler;
	//Jumping to User Application;
	//printf("RH: %x\n",IMG_0_START_ADDR+4);
	img_0_call_back();
 80023a8:	4718      	bx	r3
 80023aa:	bf00      	nop
 80023ac:	08006800 	.word	0x08006800
 80023b0:	08006804 	.word	0x08006804
 80023b4:	00000000 	.word	0x00000000

080023b8 <meta_data_init>:

}

void meta_data_init(){
 80023b8:	b507      	push	{r0, r1, r2, lr}
	//Initializing Meta-data
	uint32_t true=1;
	uint32_t false=0;
	uint32_t end_indicator=0xDEADBEEF;
	uint64_t data=0;
	volatile uint32_t sanity_chk_0=*(uint32_t*)META_DATA_IMG_0_CHK;
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <meta_data_init+0x80>)
	volatile uint32_t sanity_chk_1=*(uint32_t*)META_DATA_IMG_1_CHK;
	if((sanity_chk_0!=end_indicator || sanity_chk_1!=end_indicator)){
 80023bc:	4a1f      	ldr	r2, [pc, #124]	; (800243c <meta_data_init+0x84>)
	volatile uint32_t sanity_chk_0=*(uint32_t*)META_DATA_IMG_0_CHK;
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	9300      	str	r3, [sp, #0]
	volatile uint32_t sanity_chk_1=*(uint32_t*)META_DATA_IMG_1_CHK;
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <meta_data_init+0x88>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	9301      	str	r3, [sp, #4]
	if((sanity_chk_0!=end_indicator || sanity_chk_1!=end_indicator)){
 80023c8:	9b00      	ldr	r3, [sp, #0]
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d102      	bne.n	80023d4 <meta_data_init+0x1c>
 80023ce:	9a01      	ldr	r2, [sp, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d023      	beq.n	800241c <meta_data_init+0x64>
		printf("-->Initializing Meta Data Info...\r\n");
 80023d4:	481b      	ldr	r0, [pc, #108]	; (8002444 <meta_data_init+0x8c>)
 80023d6:	f000 fce1 	bl	8002d9c <puts>
		uint32_t* addr=(uint32_t*)IMG_0_METADATA_START_ADDR;
		HAL_FLASH_Unlock();
 80023da:	f7fe fea1 	bl	8001120 <HAL_FLASH_Unlock>
		//Initialize meta-data for img_0:
		data=true; //meta_data.img_strt_add
		data=data<<32 | (0x08006800UL);	//meta_data.isUpdated
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 80023de:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <meta_data_init+0x90>)
 80023e0:	491a      	ldr	r1, [pc, #104]	; (800244c <meta_data_init+0x94>)
 80023e2:	2301      	movs	r3, #1
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fee1 	bl	80011ac <HAL_FLASH_Program>

		addr=addr+2;
		data=end_indicator; //meta_data.next
		data=data << 32 | (0x08006010UL);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 80023ea:	a30f      	add	r3, pc, #60	; (adr r3, 8002428 <meta_data_init+0x70>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	4917      	ldr	r1, [pc, #92]	; (8002450 <meta_data_init+0x98>)
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe feda 	bl	80011ac <HAL_FLASH_Program>

		//initialise metadata for img_1:
		addr=(uint32_t*) (0x08006010UL);
		data=false; //meta_data.img_strt_add
		data=data<<32 | (0x08080000UL); //meta_data.isUpdated
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <meta_data_init+0x9c>)
 80023fa:	4917      	ldr	r1, [pc, #92]	; (8002458 <meta_data_init+0xa0>)
 80023fc:	2300      	movs	r3, #0
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe fed4 	bl	80011ac <HAL_FLASH_Program>
		addr=addr+2;
		data=end_indicator;
		data=data << 32 | IMG_0_METADATA_START_ADDR;
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 8002404:	a30a      	add	r3, pc, #40	; (adr r3, 8002430 <meta_data_init+0x78>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	4914      	ldr	r1, [pc, #80]	; (800245c <meta_data_init+0xa4>)
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fecd 	bl	80011ac <HAL_FLASH_Program>
	}
	else{
		printf("-->Meta Data Already Initialized...\r\n");
	}

}
 8002412:	b003      	add	sp, #12
 8002414:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_FLASH_Lock();
 8002418:	f7fe be94 	b.w	8001144 <HAL_FLASH_Lock>
		printf("-->Meta Data Already Initialized...\r\n");
 800241c:	4810      	ldr	r0, [pc, #64]	; (8002460 <meta_data_init+0xa8>)
}
 800241e:	b003      	add	sp, #12
 8002420:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("-->Meta Data Already Initialized...\r\n");
 8002424:	f000 bcba 	b.w	8002d9c <puts>
 8002428:	08006010 	.word	0x08006010
 800242c:	deadbeef 	.word	0xdeadbeef
 8002430:	08006000 	.word	0x08006000
 8002434:	deadbeef 	.word	0xdeadbeef
 8002438:	0800600c 	.word	0x0800600c
 800243c:	deadbeef 	.word	0xdeadbeef
 8002440:	0800601c 	.word	0x0800601c
 8002444:	08004909 	.word	0x08004909
 8002448:	08006800 	.word	0x08006800
 800244c:	08006000 	.word	0x08006000
 8002450:	08006008 	.word	0x08006008
 8002454:	08080000 	.word	0x08080000
 8002458:	08006010 	.word	0x08006010
 800245c:	08006018 	.word	0x08006018
 8002460:	0800492c 	.word	0x0800492c

08002464 <select_updated_img_to_execute>:

//returns the address of image to Execute
uint32_t select_updated_img_to_execute(){
 8002464:	b508      	push	{r3, lr}

	uint32_t true=1;
	uint32_t false=0;
	meta_data_t *head=(meta_data_t*)IMG_0_METADATA_START_ADDR;
	meta_data_t *curr=head;
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <select_updated_img_to_execute+0x40>)

	while(curr->isUpdated !=true){
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	2a01      	cmp	r2, #1
 800246c:	d109      	bne.n	8002482 <select_updated_img_to_execute+0x1e>
		curr=curr->next;
	}

	if(curr->img_strt_add==IMG_0_START_ADDR){
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <select_updated_img_to_execute+0x44>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d107      	bne.n	8002486 <select_updated_img_to_execute+0x22>
		printf("-->Executing Img0\r\n");
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <select_updated_img_to_execute+0x48>)
 8002478:	f000 fc90 	bl	8002d9c <puts>
		execute_img0();
 800247c:	f7ff ff8e 	bl	800239c <execute_img0>
	}
	else{
		printf("-->!ERROR in METADATA\r\n");
	}

}
 8002480:	bd08      	pop	{r3, pc}
		curr=curr->next;
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	e7f0      	b.n	8002468 <select_updated_img_to_execute+0x4>
	else if(curr->img_strt_add==IMG_1_START_ADDR){
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <select_updated_img_to_execute+0x4c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d105      	bne.n	8002498 <select_updated_img_to_execute+0x34>
		printf("-->Executing Img1\r\n");
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <select_updated_img_to_execute+0x50>)
 800248e:	f000 fc85 	bl	8002d9c <puts>
		execute_img1();
 8002492:	f7ff ff77 	bl	8002384 <execute_img1>
 8002496:	e7f3      	b.n	8002480 <select_updated_img_to_execute+0x1c>
		printf("-->!ERROR in METADATA\r\n");
 8002498:	4807      	ldr	r0, [pc, #28]	; (80024b8 <select_updated_img_to_execute+0x54>)
}
 800249a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("-->!ERROR in METADATA\r\n");
 800249e:	f000 bc7d 	b.w	8002d9c <puts>
 80024a2:	bf00      	nop
 80024a4:	08006000 	.word	0x08006000
 80024a8:	08006800 	.word	0x08006800
 80024ac:	08004951 	.word	0x08004951
 80024b0:	08080000 	.word	0x08080000
 80024b4:	08004964 	.word	0x08004964
 80024b8:	08004977 	.word	0x08004977

080024bc <board_init>:
  * @param  None
  * @retval None
  */
#if ENABLE_BOOTLOADER_CODE

void board_init(){
 80024bc:	b510      	push	{r4, lr}
 80024be:	b096      	sub	sp, #88	; 0x58

	  HAL_Init();
 80024c0:	f7fe fd8c 	bl	8000fdc <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80024c4:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80024c6:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80024c8:	2200      	movs	r2, #0
 80024ca:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80024ce:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d0:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024d2:	2301      	movs	r3, #1
 80024d4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024d6:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024da:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80024dc:	2328      	movs	r3, #40	; 0x28
 80024de:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e0:	2404      	movs	r4, #4
 80024e2:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024e6:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e8:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ec:	f7ff f850 	bl	8001590 <HAL_RCC_OscConfig>
 80024f0:	b100      	cbz	r0, 80024f4 <board_init+0x38>
 80024f2:	e7fe      	b.n	80024f2 <board_init+0x36>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f4:	210f      	movs	r1, #15
 80024f6:	2303      	movs	r3, #3
 80024f8:	e9cd 1300 	strd	r1, r3, [sp]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80024fc:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002500:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002502:	4621      	mov	r1, r4
 8002504:	4668      	mov	r0, sp
 8002506:	f7ff fac9 	bl	8001a9c <HAL_RCC_ClockConfig>
 800250a:	4604      	mov	r4, r0
 800250c:	b100      	cbz	r0, 8002510 <board_init+0x54>
 800250e:	e7fe      	b.n	800250e <board_init+0x52>
	  BSP_LED_Init(LED2);
 8002510:	f7fe fc76 	bl	8000e00 <BSP_LED_Init>
	  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002514:	4621      	mov	r1, r4
 8002516:	4620      	mov	r0, r4
 8002518:	f7fe fc94 	bl	8000e44 <BSP_PB_Init>
	  hDiscoUart.Instance = DISCOVERY_COM1;
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <board_init+0x88>)
	  hDiscoUart.Init.BaudRate = 115200;
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <board_init+0x8c>)
	  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8002520:	610c      	str	r4, [r1, #16]
	  hDiscoUart.Init.BaudRate = 115200;
 8002522:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
	  BSP_COM_Init(COM1, &hDiscoUart);
 800252a:	4620      	mov	r0, r4
	  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 800252c:	230c      	movs	r3, #12
	  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800252e:	e9c1 4402 	strd	r4, r4, [r1, #8]
	  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	e9c1 3405 	strd	r3, r4, [r1, #20]
	  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002536:	e9c1 4407 	strd	r4, r4, [r1, #28]
	  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253a:	624c      	str	r4, [r1, #36]	; 0x24
	  BSP_COM_Init(COM1, &hDiscoUart);
 800253c:	f7fe fcc0 	bl	8000ec0 <BSP_COM_Init>
}
 8002540:	b016      	add	sp, #88	; 0x58
 8002542:	bd10      	pop	{r4, pc}
 8002544:	2000023c 	.word	0x2000023c
 8002548:	40013800 	.word	0x40013800

0800254c <main>:
{
 800254c:	b510      	push	{r4, lr}
	printf("........................................ \r\n");
 800254e:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <main+0x2c>)
	board_init();
 8002550:	f7ff ffb4 	bl	80024bc <board_init>
	printf("........................................ \r\n");
 8002554:	4620      	mov	r0, r4
 8002556:	f000 fc21 	bl	8002d9c <puts>
	printf(" .......... BootLoader ............... \r\n");
 800255a:	4808      	ldr	r0, [pc, #32]	; (800257c <main+0x30>)
 800255c:	f000 fc1e 	bl	8002d9c <puts>
	printf("........................................ \r\n");
 8002560:	4620      	mov	r0, r4
 8002562:	f000 fc1b 	bl	8002d9c <puts>
	printf("-->We Are Inside the Boot loader: \r\n");
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <main+0x34>)
 8002568:	f000 fc18 	bl	8002d9c <puts>
	meta_data_init();
 800256c:	f7ff ff24 	bl	80023b8 <meta_data_init>
	select_updated_img_to_execute();
 8002570:	f7ff ff78 	bl	8002464 <select_updated_img_to_execute>
}
 8002574:	2000      	movs	r0, #0
 8002576:	bd10      	pop	{r4, pc}
 8002578:	080049a5 	.word	0x080049a5
 800257c:	080049d0 	.word	0x080049d0
 8002580:	080049f9 	.word	0x080049f9

08002584 <__io_putchar>:
  * @brief Retargets the C library msg_info function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002586:	ac02      	add	r4, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 8002588:	4d07      	ldr	r5, [pc, #28]	; (80025a8 <__io_putchar+0x24>)
{
 800258a:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 800258e:	f247 5330 	movw	r3, #30000	; 0x7530
 8002592:	2201      	movs	r2, #1
 8002594:	4621      	mov	r1, r4
 8002596:	4628      	mov	r0, r5
 8002598:	f7ff fd68 	bl	800206c <HAL_UART_Transmit>
 800259c:	2800      	cmp	r0, #0
 800259e:	d1f6      	bne.n	800258e <__io_putchar+0xa>
  {
    ;
  }
  return ch;
}
 80025a0:	9801      	ldr	r0, [sp, #4]
 80025a2:	b003      	add	sp, #12
 80025a4:	bd30      	pop	{r4, r5, pc}
 80025a6:	bf00      	nop
 80025a8:	2000023c 	.word	0x2000023c

080025ac <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80025ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 80025ae:	ac02      	add	r4, sp, #8
 80025b0:	2300      	movs	r3, #0
 80025b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 80025b6:	4d07      	ldr	r5, [pc, #28]	; (80025d4 <__io_getchar+0x28>)
 80025b8:	f247 5330 	movw	r3, #30000	; 0x7530
 80025bc:	2201      	movs	r2, #1
 80025be:	4621      	mov	r1, r4
 80025c0:	4628      	mov	r0, r5
 80025c2:	f7ff fdab 	bl	800211c <HAL_UART_Receive>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d1f6      	bne.n	80025b8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
}
 80025ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80025ce:	b003      	add	sp, #12
 80025d0:	bd30      	pop	{r4, r5, pc}
 80025d2:	bf00      	nop
 80025d4:	2000023c 	.word	0x2000023c

080025d8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80025d8:	4770      	bx	lr

080025da <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80025da:	e7fe      	b.n	80025da <HardFault_Handler>

080025dc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80025dc:	e7fe      	b.n	80025dc <MemManage_Handler>

080025de <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80025de:	e7fe      	b.n	80025de <BusFault_Handler>

080025e0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80025e0:	e7fe      	b.n	80025e0 <UsageFault_Handler>

080025e2 <SVC_Handler>:
 80025e2:	4770      	bx	lr

080025e4 <DebugMon_Handler>:
 80025e4:	4770      	bx	lr

080025e6 <PendSV_Handler>:
 80025e6:	4770      	bx	lr

080025e8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80025e8:	f7fe bd08 	b.w	8000ffc <HAL_IncTick>

080025ec <__errno>:
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <__errno+0x8>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000040 	.word	0x20000040

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	4e0d      	ldr	r6, [pc, #52]	; (8002630 <__libc_init_array+0x38>)
 80025fc:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <__libc_init_array+0x3c>)
 80025fe:	1ba4      	subs	r4, r4, r6
 8002600:	10a4      	asrs	r4, r4, #2
 8002602:	2500      	movs	r5, #0
 8002604:	42a5      	cmp	r5, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	4e0b      	ldr	r6, [pc, #44]	; (8002638 <__libc_init_array+0x40>)
 800260a:	4c0c      	ldr	r4, [pc, #48]	; (800263c <__libc_init_array+0x44>)
 800260c:	f002 f942 	bl	8004894 <_init>
 8002610:	1ba4      	subs	r4, r4, r6
 8002612:	10a4      	asrs	r4, r4, #2
 8002614:	2500      	movs	r5, #0
 8002616:	42a5      	cmp	r5, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002620:	4798      	blx	r3
 8002622:	3501      	adds	r5, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800262a:	4798      	blx	r3
 800262c:	3501      	adds	r5, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	08004cf8 	.word	0x08004cf8
 8002634:	08004cf8 	.word	0x08004cf8
 8002638:	08004cf8 	.word	0x08004cf8
 800263c:	08004cfc 	.word	0x08004cfc

08002640 <memset>:
 8002640:	4402      	add	r2, r0
 8002642:	4603      	mov	r3, r0
 8002644:	4293      	cmp	r3, r2
 8002646:	d100      	bne.n	800264a <memset+0xa>
 8002648:	4770      	bx	lr
 800264a:	f803 1b01 	strb.w	r1, [r3], #1
 800264e:	e7f9      	b.n	8002644 <memset+0x4>

08002650 <__cvt>:
 8002650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002654:	ec55 4b10 	vmov	r4, r5, d0
 8002658:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800265a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800265e:	2d00      	cmp	r5, #0
 8002660:	460e      	mov	r6, r1
 8002662:	4691      	mov	r9, r2
 8002664:	4619      	mov	r1, r3
 8002666:	bfb8      	it	lt
 8002668:	4622      	movlt	r2, r4
 800266a:	462b      	mov	r3, r5
 800266c:	f027 0720 	bic.w	r7, r7, #32
 8002670:	bfbb      	ittet	lt
 8002672:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002676:	461d      	movlt	r5, r3
 8002678:	2300      	movge	r3, #0
 800267a:	232d      	movlt	r3, #45	; 0x2d
 800267c:	bfb8      	it	lt
 800267e:	4614      	movlt	r4, r2
 8002680:	2f46      	cmp	r7, #70	; 0x46
 8002682:	700b      	strb	r3, [r1, #0]
 8002684:	d004      	beq.n	8002690 <__cvt+0x40>
 8002686:	2f45      	cmp	r7, #69	; 0x45
 8002688:	d100      	bne.n	800268c <__cvt+0x3c>
 800268a:	3601      	adds	r6, #1
 800268c:	2102      	movs	r1, #2
 800268e:	e000      	b.n	8002692 <__cvt+0x42>
 8002690:	2103      	movs	r1, #3
 8002692:	ab03      	add	r3, sp, #12
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	ab02      	add	r3, sp, #8
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4632      	mov	r2, r6
 800269c:	4653      	mov	r3, sl
 800269e:	ec45 4b10 	vmov	d0, r4, r5
 80026a2:	f000 fcd1 	bl	8003048 <_dtoa_r>
 80026a6:	2f47      	cmp	r7, #71	; 0x47
 80026a8:	4680      	mov	r8, r0
 80026aa:	d102      	bne.n	80026b2 <__cvt+0x62>
 80026ac:	f019 0f01 	tst.w	r9, #1
 80026b0:	d026      	beq.n	8002700 <__cvt+0xb0>
 80026b2:	2f46      	cmp	r7, #70	; 0x46
 80026b4:	eb08 0906 	add.w	r9, r8, r6
 80026b8:	d111      	bne.n	80026de <__cvt+0x8e>
 80026ba:	f898 3000 	ldrb.w	r3, [r8]
 80026be:	2b30      	cmp	r3, #48	; 0x30
 80026c0:	d10a      	bne.n	80026d8 <__cvt+0x88>
 80026c2:	2200      	movs	r2, #0
 80026c4:	2300      	movs	r3, #0
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fe f9a9 	bl	8000a20 <__aeabi_dcmpeq>
 80026ce:	b918      	cbnz	r0, 80026d8 <__cvt+0x88>
 80026d0:	f1c6 0601 	rsb	r6, r6, #1
 80026d4:	f8ca 6000 	str.w	r6, [sl]
 80026d8:	f8da 3000 	ldr.w	r3, [sl]
 80026dc:	4499      	add	r9, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	2300      	movs	r3, #0
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fe f99b 	bl	8000a20 <__aeabi_dcmpeq>
 80026ea:	b938      	cbnz	r0, 80026fc <__cvt+0xac>
 80026ec:	2230      	movs	r2, #48	; 0x30
 80026ee:	9b03      	ldr	r3, [sp, #12]
 80026f0:	454b      	cmp	r3, r9
 80026f2:	d205      	bcs.n	8002700 <__cvt+0xb0>
 80026f4:	1c59      	adds	r1, r3, #1
 80026f6:	9103      	str	r1, [sp, #12]
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e7f8      	b.n	80026ee <__cvt+0x9e>
 80026fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8002700:	9b03      	ldr	r3, [sp, #12]
 8002702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002704:	eba3 0308 	sub.w	r3, r3, r8
 8002708:	4640      	mov	r0, r8
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	b004      	add	sp, #16
 800270e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002712 <__exponent>:
 8002712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002714:	2900      	cmp	r1, #0
 8002716:	4604      	mov	r4, r0
 8002718:	bfba      	itte	lt
 800271a:	4249      	neglt	r1, r1
 800271c:	232d      	movlt	r3, #45	; 0x2d
 800271e:	232b      	movge	r3, #43	; 0x2b
 8002720:	2909      	cmp	r1, #9
 8002722:	f804 2b02 	strb.w	r2, [r4], #2
 8002726:	7043      	strb	r3, [r0, #1]
 8002728:	dd20      	ble.n	800276c <__exponent+0x5a>
 800272a:	f10d 0307 	add.w	r3, sp, #7
 800272e:	461f      	mov	r7, r3
 8002730:	260a      	movs	r6, #10
 8002732:	fb91 f5f6 	sdiv	r5, r1, r6
 8002736:	fb06 1115 	mls	r1, r6, r5, r1
 800273a:	3130      	adds	r1, #48	; 0x30
 800273c:	2d09      	cmp	r5, #9
 800273e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002742:	f103 32ff 	add.w	r2, r3, #4294967295
 8002746:	4629      	mov	r1, r5
 8002748:	dc09      	bgt.n	800275e <__exponent+0x4c>
 800274a:	3130      	adds	r1, #48	; 0x30
 800274c:	3b02      	subs	r3, #2
 800274e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002752:	42bb      	cmp	r3, r7
 8002754:	4622      	mov	r2, r4
 8002756:	d304      	bcc.n	8002762 <__exponent+0x50>
 8002758:	1a10      	subs	r0, r2, r0
 800275a:	b003      	add	sp, #12
 800275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275e:	4613      	mov	r3, r2
 8002760:	e7e7      	b.n	8002732 <__exponent+0x20>
 8002762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002766:	f804 2b01 	strb.w	r2, [r4], #1
 800276a:	e7f2      	b.n	8002752 <__exponent+0x40>
 800276c:	2330      	movs	r3, #48	; 0x30
 800276e:	4419      	add	r1, r3
 8002770:	7083      	strb	r3, [r0, #2]
 8002772:	1d02      	adds	r2, r0, #4
 8002774:	70c1      	strb	r1, [r0, #3]
 8002776:	e7ef      	b.n	8002758 <__exponent+0x46>

08002778 <_printf_float>:
 8002778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800277c:	b08d      	sub	sp, #52	; 0x34
 800277e:	460c      	mov	r4, r1
 8002780:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002784:	4616      	mov	r6, r2
 8002786:	461f      	mov	r7, r3
 8002788:	4605      	mov	r5, r0
 800278a:	f001 fb8f 	bl	8003eac <_localeconv_r>
 800278e:	6803      	ldr	r3, [r0, #0]
 8002790:	9304      	str	r3, [sp, #16]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fd18 	bl	80001c8 <strlen>
 8002798:	2300      	movs	r3, #0
 800279a:	930a      	str	r3, [sp, #40]	; 0x28
 800279c:	f8d8 3000 	ldr.w	r3, [r8]
 80027a0:	9005      	str	r0, [sp, #20]
 80027a2:	3307      	adds	r3, #7
 80027a4:	f023 0307 	bic.w	r3, r3, #7
 80027a8:	f103 0208 	add.w	r2, r3, #8
 80027ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80027b0:	f8d4 b000 	ldr.w	fp, [r4]
 80027b4:	f8c8 2000 	str.w	r2, [r8]
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80027c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80027c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80027c8:	9307      	str	r3, [sp, #28]
 80027ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	4ba7      	ldr	r3, [pc, #668]	; (8002a70 <_printf_float+0x2f8>)
 80027d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80027d8:	f7fe f954 	bl	8000a84 <__aeabi_dcmpun>
 80027dc:	bb70      	cbnz	r0, 800283c <_printf_float+0xc4>
 80027de:	f04f 32ff 	mov.w	r2, #4294967295
 80027e2:	4ba3      	ldr	r3, [pc, #652]	; (8002a70 <_printf_float+0x2f8>)
 80027e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80027e8:	f7fe f92e 	bl	8000a48 <__aeabi_dcmple>
 80027ec:	bb30      	cbnz	r0, 800283c <_printf_float+0xc4>
 80027ee:	2200      	movs	r2, #0
 80027f0:	2300      	movs	r3, #0
 80027f2:	4640      	mov	r0, r8
 80027f4:	4649      	mov	r1, r9
 80027f6:	f7fe f91d 	bl	8000a34 <__aeabi_dcmplt>
 80027fa:	b110      	cbz	r0, 8002802 <_printf_float+0x8a>
 80027fc:	232d      	movs	r3, #45	; 0x2d
 80027fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002802:	4a9c      	ldr	r2, [pc, #624]	; (8002a74 <_printf_float+0x2fc>)
 8002804:	4b9c      	ldr	r3, [pc, #624]	; (8002a78 <_printf_float+0x300>)
 8002806:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800280a:	bf8c      	ite	hi
 800280c:	4690      	movhi	r8, r2
 800280e:	4698      	movls	r8, r3
 8002810:	2303      	movs	r3, #3
 8002812:	f02b 0204 	bic.w	r2, fp, #4
 8002816:	6123      	str	r3, [r4, #16]
 8002818:	6022      	str	r2, [r4, #0]
 800281a:	f04f 0900 	mov.w	r9, #0
 800281e:	9700      	str	r7, [sp, #0]
 8002820:	4633      	mov	r3, r6
 8002822:	aa0b      	add	r2, sp, #44	; 0x2c
 8002824:	4621      	mov	r1, r4
 8002826:	4628      	mov	r0, r5
 8002828:	f000 f9e6 	bl	8002bf8 <_printf_common>
 800282c:	3001      	adds	r0, #1
 800282e:	f040 808d 	bne.w	800294c <_printf_float+0x1d4>
 8002832:	f04f 30ff 	mov.w	r0, #4294967295
 8002836:	b00d      	add	sp, #52	; 0x34
 8002838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283c:	4642      	mov	r2, r8
 800283e:	464b      	mov	r3, r9
 8002840:	4640      	mov	r0, r8
 8002842:	4649      	mov	r1, r9
 8002844:	f7fe f91e 	bl	8000a84 <__aeabi_dcmpun>
 8002848:	b110      	cbz	r0, 8002850 <_printf_float+0xd8>
 800284a:	4a8c      	ldr	r2, [pc, #560]	; (8002a7c <_printf_float+0x304>)
 800284c:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <_printf_float+0x308>)
 800284e:	e7da      	b.n	8002806 <_printf_float+0x8e>
 8002850:	6861      	ldr	r1, [r4, #4]
 8002852:	1c4b      	adds	r3, r1, #1
 8002854:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002858:	a80a      	add	r0, sp, #40	; 0x28
 800285a:	d13e      	bne.n	80028da <_printf_float+0x162>
 800285c:	2306      	movs	r3, #6
 800285e:	6063      	str	r3, [r4, #4]
 8002860:	2300      	movs	r3, #0
 8002862:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002866:	ab09      	add	r3, sp, #36	; 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	ec49 8b10 	vmov	d0, r8, r9
 800286e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002872:	6022      	str	r2, [r4, #0]
 8002874:	f8cd a004 	str.w	sl, [sp, #4]
 8002878:	6861      	ldr	r1, [r4, #4]
 800287a:	4628      	mov	r0, r5
 800287c:	f7ff fee8 	bl	8002650 <__cvt>
 8002880:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002884:	2b47      	cmp	r3, #71	; 0x47
 8002886:	4680      	mov	r8, r0
 8002888:	d109      	bne.n	800289e <_printf_float+0x126>
 800288a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800288c:	1cd8      	adds	r0, r3, #3
 800288e:	db02      	blt.n	8002896 <_printf_float+0x11e>
 8002890:	6862      	ldr	r2, [r4, #4]
 8002892:	4293      	cmp	r3, r2
 8002894:	dd47      	ble.n	8002926 <_printf_float+0x1ae>
 8002896:	f1aa 0a02 	sub.w	sl, sl, #2
 800289a:	fa5f fa8a 	uxtb.w	sl, sl
 800289e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80028a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028a4:	d824      	bhi.n	80028f0 <_printf_float+0x178>
 80028a6:	3901      	subs	r1, #1
 80028a8:	4652      	mov	r2, sl
 80028aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80028ae:	9109      	str	r1, [sp, #36]	; 0x24
 80028b0:	f7ff ff2f 	bl	8002712 <__exponent>
 80028b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80028b6:	1813      	adds	r3, r2, r0
 80028b8:	2a01      	cmp	r2, #1
 80028ba:	4681      	mov	r9, r0
 80028bc:	6123      	str	r3, [r4, #16]
 80028be:	dc02      	bgt.n	80028c6 <_printf_float+0x14e>
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	07d1      	lsls	r1, r2, #31
 80028c4:	d501      	bpl.n	80028ca <_printf_float+0x152>
 80028c6:	3301      	adds	r3, #1
 80028c8:	6123      	str	r3, [r4, #16]
 80028ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0a5      	beq.n	800281e <_printf_float+0xa6>
 80028d2:	232d      	movs	r3, #45	; 0x2d
 80028d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028d8:	e7a1      	b.n	800281e <_printf_float+0xa6>
 80028da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80028de:	f000 8177 	beq.w	8002bd0 <_printf_float+0x458>
 80028e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80028e6:	d1bb      	bne.n	8002860 <_printf_float+0xe8>
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d1b9      	bne.n	8002860 <_printf_float+0xe8>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e7b6      	b.n	800285e <_printf_float+0xe6>
 80028f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80028f4:	d119      	bne.n	800292a <_printf_float+0x1b2>
 80028f6:	2900      	cmp	r1, #0
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	dd0c      	ble.n	8002916 <_printf_float+0x19e>
 80028fc:	6121      	str	r1, [r4, #16]
 80028fe:	b913      	cbnz	r3, 8002906 <_printf_float+0x18e>
 8002900:	6822      	ldr	r2, [r4, #0]
 8002902:	07d2      	lsls	r2, r2, #31
 8002904:	d502      	bpl.n	800290c <_printf_float+0x194>
 8002906:	3301      	adds	r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	6123      	str	r3, [r4, #16]
 800290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800290e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002910:	f04f 0900 	mov.w	r9, #0
 8002914:	e7d9      	b.n	80028ca <_printf_float+0x152>
 8002916:	b913      	cbnz	r3, 800291e <_printf_float+0x1a6>
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	07d0      	lsls	r0, r2, #31
 800291c:	d501      	bpl.n	8002922 <_printf_float+0x1aa>
 800291e:	3302      	adds	r3, #2
 8002920:	e7f3      	b.n	800290a <_printf_float+0x192>
 8002922:	2301      	movs	r3, #1
 8002924:	e7f1      	b.n	800290a <_printf_float+0x192>
 8002926:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800292a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800292e:	4293      	cmp	r3, r2
 8002930:	db05      	blt.n	800293e <_printf_float+0x1c6>
 8002932:	6822      	ldr	r2, [r4, #0]
 8002934:	6123      	str	r3, [r4, #16]
 8002936:	07d1      	lsls	r1, r2, #31
 8002938:	d5e8      	bpl.n	800290c <_printf_float+0x194>
 800293a:	3301      	adds	r3, #1
 800293c:	e7e5      	b.n	800290a <_printf_float+0x192>
 800293e:	2b00      	cmp	r3, #0
 8002940:	bfd4      	ite	le
 8002942:	f1c3 0302 	rsble	r3, r3, #2
 8002946:	2301      	movgt	r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	e7de      	b.n	800290a <_printf_float+0x192>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	055a      	lsls	r2, r3, #21
 8002950:	d407      	bmi.n	8002962 <_printf_float+0x1ea>
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	4642      	mov	r2, r8
 8002956:	4631      	mov	r1, r6
 8002958:	4628      	mov	r0, r5
 800295a:	47b8      	blx	r7
 800295c:	3001      	adds	r0, #1
 800295e:	d12b      	bne.n	80029b8 <_printf_float+0x240>
 8002960:	e767      	b.n	8002832 <_printf_float+0xba>
 8002962:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002966:	f240 80dc 	bls.w	8002b22 <_printf_float+0x3aa>
 800296a:	2200      	movs	r2, #0
 800296c:	2300      	movs	r3, #0
 800296e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002972:	f7fe f855 	bl	8000a20 <__aeabi_dcmpeq>
 8002976:	2800      	cmp	r0, #0
 8002978:	d033      	beq.n	80029e2 <_printf_float+0x26a>
 800297a:	2301      	movs	r3, #1
 800297c:	4a41      	ldr	r2, [pc, #260]	; (8002a84 <_printf_float+0x30c>)
 800297e:	4631      	mov	r1, r6
 8002980:	4628      	mov	r0, r5
 8002982:	47b8      	blx	r7
 8002984:	3001      	adds	r0, #1
 8002986:	f43f af54 	beq.w	8002832 <_printf_float+0xba>
 800298a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800298e:	429a      	cmp	r2, r3
 8002990:	db02      	blt.n	8002998 <_printf_float+0x220>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	07d8      	lsls	r0, r3, #31
 8002996:	d50f      	bpl.n	80029b8 <_printf_float+0x240>
 8002998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800299c:	4631      	mov	r1, r6
 800299e:	4628      	mov	r0, r5
 80029a0:	47b8      	blx	r7
 80029a2:	3001      	adds	r0, #1
 80029a4:	f43f af45 	beq.w	8002832 <_printf_float+0xba>
 80029a8:	f04f 0800 	mov.w	r8, #0
 80029ac:	f104 091a 	add.w	r9, r4, #26
 80029b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	4543      	cmp	r3, r8
 80029b6:	dc09      	bgt.n	80029cc <_printf_float+0x254>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	079b      	lsls	r3, r3, #30
 80029bc:	f100 8103 	bmi.w	8002bc6 <_printf_float+0x44e>
 80029c0:	68e0      	ldr	r0, [r4, #12]
 80029c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029c4:	4298      	cmp	r0, r3
 80029c6:	bfb8      	it	lt
 80029c8:	4618      	movlt	r0, r3
 80029ca:	e734      	b.n	8002836 <_printf_float+0xbe>
 80029cc:	2301      	movs	r3, #1
 80029ce:	464a      	mov	r2, r9
 80029d0:	4631      	mov	r1, r6
 80029d2:	4628      	mov	r0, r5
 80029d4:	47b8      	blx	r7
 80029d6:	3001      	adds	r0, #1
 80029d8:	f43f af2b 	beq.w	8002832 <_printf_float+0xba>
 80029dc:	f108 0801 	add.w	r8, r8, #1
 80029e0:	e7e6      	b.n	80029b0 <_printf_float+0x238>
 80029e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	dc2b      	bgt.n	8002a40 <_printf_float+0x2c8>
 80029e8:	2301      	movs	r3, #1
 80029ea:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <_printf_float+0x30c>)
 80029ec:	4631      	mov	r1, r6
 80029ee:	4628      	mov	r0, r5
 80029f0:	47b8      	blx	r7
 80029f2:	3001      	adds	r0, #1
 80029f4:	f43f af1d 	beq.w	8002832 <_printf_float+0xba>
 80029f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029fa:	b923      	cbnz	r3, 8002a06 <_printf_float+0x28e>
 80029fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029fe:	b913      	cbnz	r3, 8002a06 <_printf_float+0x28e>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	07d9      	lsls	r1, r3, #31
 8002a04:	d5d8      	bpl.n	80029b8 <_printf_float+0x240>
 8002a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a0a:	4631      	mov	r1, r6
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	47b8      	blx	r7
 8002a10:	3001      	adds	r0, #1
 8002a12:	f43f af0e 	beq.w	8002832 <_printf_float+0xba>
 8002a16:	f04f 0900 	mov.w	r9, #0
 8002a1a:	f104 0a1a 	add.w	sl, r4, #26
 8002a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a20:	425b      	negs	r3, r3
 8002a22:	454b      	cmp	r3, r9
 8002a24:	dc01      	bgt.n	8002a2a <_printf_float+0x2b2>
 8002a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a28:	e794      	b.n	8002954 <_printf_float+0x1dc>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4631      	mov	r1, r6
 8002a30:	4628      	mov	r0, r5
 8002a32:	47b8      	blx	r7
 8002a34:	3001      	adds	r0, #1
 8002a36:	f43f aefc 	beq.w	8002832 <_printf_float+0xba>
 8002a3a:	f109 0901 	add.w	r9, r9, #1
 8002a3e:	e7ee      	b.n	8002a1e <_printf_float+0x2a6>
 8002a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a44:	429a      	cmp	r2, r3
 8002a46:	bfa8      	it	ge
 8002a48:	461a      	movge	r2, r3
 8002a4a:	2a00      	cmp	r2, #0
 8002a4c:	4691      	mov	r9, r2
 8002a4e:	dd07      	ble.n	8002a60 <_printf_float+0x2e8>
 8002a50:	4613      	mov	r3, r2
 8002a52:	4631      	mov	r1, r6
 8002a54:	4642      	mov	r2, r8
 8002a56:	4628      	mov	r0, r5
 8002a58:	47b8      	blx	r7
 8002a5a:	3001      	adds	r0, #1
 8002a5c:	f43f aee9 	beq.w	8002832 <_printf_float+0xba>
 8002a60:	f104 031a 	add.w	r3, r4, #26
 8002a64:	f04f 0b00 	mov.w	fp, #0
 8002a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002a6c:	9306      	str	r3, [sp, #24]
 8002a6e:	e015      	b.n	8002a9c <_printf_float+0x324>
 8002a70:	7fefffff 	.word	0x7fefffff
 8002a74:	08004a6c 	.word	0x08004a6c
 8002a78:	08004a68 	.word	0x08004a68
 8002a7c:	08004a74 	.word	0x08004a74
 8002a80:	08004a70 	.word	0x08004a70
 8002a84:	08004a78 	.word	0x08004a78
 8002a88:	2301      	movs	r3, #1
 8002a8a:	9a06      	ldr	r2, [sp, #24]
 8002a8c:	4631      	mov	r1, r6
 8002a8e:	4628      	mov	r0, r5
 8002a90:	47b8      	blx	r7
 8002a92:	3001      	adds	r0, #1
 8002a94:	f43f aecd 	beq.w	8002832 <_printf_float+0xba>
 8002a98:	f10b 0b01 	add.w	fp, fp, #1
 8002a9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002aa0:	ebaa 0309 	sub.w	r3, sl, r9
 8002aa4:	455b      	cmp	r3, fp
 8002aa6:	dcef      	bgt.n	8002a88 <_printf_float+0x310>
 8002aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002aac:	429a      	cmp	r2, r3
 8002aae:	44d0      	add	r8, sl
 8002ab0:	db15      	blt.n	8002ade <_printf_float+0x366>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	07da      	lsls	r2, r3, #31
 8002ab6:	d412      	bmi.n	8002ade <_printf_float+0x366>
 8002ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002abc:	eba3 020a 	sub.w	r2, r3, sl
 8002ac0:	eba3 0a01 	sub.w	sl, r3, r1
 8002ac4:	4592      	cmp	sl, r2
 8002ac6:	bfa8      	it	ge
 8002ac8:	4692      	movge	sl, r2
 8002aca:	f1ba 0f00 	cmp.w	sl, #0
 8002ace:	dc0e      	bgt.n	8002aee <_printf_float+0x376>
 8002ad0:	f04f 0800 	mov.w	r8, #0
 8002ad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002ad8:	f104 091a 	add.w	r9, r4, #26
 8002adc:	e019      	b.n	8002b12 <_printf_float+0x39a>
 8002ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	47b8      	blx	r7
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d1e5      	bne.n	8002ab8 <_printf_float+0x340>
 8002aec:	e6a1      	b.n	8002832 <_printf_float+0xba>
 8002aee:	4653      	mov	r3, sl
 8002af0:	4642      	mov	r2, r8
 8002af2:	4631      	mov	r1, r6
 8002af4:	4628      	mov	r0, r5
 8002af6:	47b8      	blx	r7
 8002af8:	3001      	adds	r0, #1
 8002afa:	d1e9      	bne.n	8002ad0 <_printf_float+0x358>
 8002afc:	e699      	b.n	8002832 <_printf_float+0xba>
 8002afe:	2301      	movs	r3, #1
 8002b00:	464a      	mov	r2, r9
 8002b02:	4631      	mov	r1, r6
 8002b04:	4628      	mov	r0, r5
 8002b06:	47b8      	blx	r7
 8002b08:	3001      	adds	r0, #1
 8002b0a:	f43f ae92 	beq.w	8002832 <_printf_float+0xba>
 8002b0e:	f108 0801 	add.w	r8, r8, #1
 8002b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	eba3 030a 	sub.w	r3, r3, sl
 8002b1c:	4543      	cmp	r3, r8
 8002b1e:	dcee      	bgt.n	8002afe <_printf_float+0x386>
 8002b20:	e74a      	b.n	80029b8 <_printf_float+0x240>
 8002b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b24:	2a01      	cmp	r2, #1
 8002b26:	dc01      	bgt.n	8002b2c <_printf_float+0x3b4>
 8002b28:	07db      	lsls	r3, r3, #31
 8002b2a:	d53a      	bpl.n	8002ba2 <_printf_float+0x42a>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4642      	mov	r2, r8
 8002b30:	4631      	mov	r1, r6
 8002b32:	4628      	mov	r0, r5
 8002b34:	47b8      	blx	r7
 8002b36:	3001      	adds	r0, #1
 8002b38:	f43f ae7b 	beq.w	8002832 <_printf_float+0xba>
 8002b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b40:	4631      	mov	r1, r6
 8002b42:	4628      	mov	r0, r5
 8002b44:	47b8      	blx	r7
 8002b46:	3001      	adds	r0, #1
 8002b48:	f108 0801 	add.w	r8, r8, #1
 8002b4c:	f43f ae71 	beq.w	8002832 <_printf_float+0xba>
 8002b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b52:	2200      	movs	r2, #0
 8002b54:	f103 3aff 	add.w	sl, r3, #4294967295
 8002b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f7fd ff5f 	bl	8000a20 <__aeabi_dcmpeq>
 8002b62:	b9c8      	cbnz	r0, 8002b98 <_printf_float+0x420>
 8002b64:	4653      	mov	r3, sl
 8002b66:	4642      	mov	r2, r8
 8002b68:	4631      	mov	r1, r6
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	47b8      	blx	r7
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d10e      	bne.n	8002b90 <_printf_float+0x418>
 8002b72:	e65e      	b.n	8002832 <_printf_float+0xba>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4652      	mov	r2, sl
 8002b78:	4631      	mov	r1, r6
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	47b8      	blx	r7
 8002b7e:	3001      	adds	r0, #1
 8002b80:	f43f ae57 	beq.w	8002832 <_printf_float+0xba>
 8002b84:	f108 0801 	add.w	r8, r8, #1
 8002b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	4543      	cmp	r3, r8
 8002b8e:	dcf1      	bgt.n	8002b74 <_printf_float+0x3fc>
 8002b90:	464b      	mov	r3, r9
 8002b92:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002b96:	e6de      	b.n	8002956 <_printf_float+0x1de>
 8002b98:	f04f 0800 	mov.w	r8, #0
 8002b9c:	f104 0a1a 	add.w	sl, r4, #26
 8002ba0:	e7f2      	b.n	8002b88 <_printf_float+0x410>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e7df      	b.n	8002b66 <_printf_float+0x3ee>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	464a      	mov	r2, r9
 8002baa:	4631      	mov	r1, r6
 8002bac:	4628      	mov	r0, r5
 8002bae:	47b8      	blx	r7
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	f43f ae3e 	beq.w	8002832 <_printf_float+0xba>
 8002bb6:	f108 0801 	add.w	r8, r8, #1
 8002bba:	68e3      	ldr	r3, [r4, #12]
 8002bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	4543      	cmp	r3, r8
 8002bc2:	dcf0      	bgt.n	8002ba6 <_printf_float+0x42e>
 8002bc4:	e6fc      	b.n	80029c0 <_printf_float+0x248>
 8002bc6:	f04f 0800 	mov.w	r8, #0
 8002bca:	f104 0919 	add.w	r9, r4, #25
 8002bce:	e7f4      	b.n	8002bba <_printf_float+0x442>
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	f43f ae8b 	beq.w	80028ec <_printf_float+0x174>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002bdc:	ab09      	add	r3, sp, #36	; 0x24
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	ec49 8b10 	vmov	d0, r8, r9
 8002be4:	6022      	str	r2, [r4, #0]
 8002be6:	f8cd a004 	str.w	sl, [sp, #4]
 8002bea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f7ff fd2e 	bl	8002650 <__cvt>
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	e648      	b.n	800288a <_printf_float+0x112>

08002bf8 <_printf_common>:
 8002bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bfc:	4691      	mov	r9, r2
 8002bfe:	461f      	mov	r7, r3
 8002c00:	688a      	ldr	r2, [r1, #8]
 8002c02:	690b      	ldr	r3, [r1, #16]
 8002c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bfb8      	it	lt
 8002c0c:	4613      	movlt	r3, r2
 8002c0e:	f8c9 3000 	str.w	r3, [r9]
 8002c12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c16:	4606      	mov	r6, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	b112      	cbz	r2, 8002c22 <_printf_common+0x2a>
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f8c9 3000 	str.w	r3, [r9]
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	0699      	lsls	r1, r3, #26
 8002c26:	bf42      	ittt	mi
 8002c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c2c:	3302      	addmi	r3, #2
 8002c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c32:	6825      	ldr	r5, [r4, #0]
 8002c34:	f015 0506 	ands.w	r5, r5, #6
 8002c38:	d107      	bne.n	8002c4a <_printf_common+0x52>
 8002c3a:	f104 0a19 	add.w	sl, r4, #25
 8002c3e:	68e3      	ldr	r3, [r4, #12]
 8002c40:	f8d9 2000 	ldr.w	r2, [r9]
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	42ab      	cmp	r3, r5
 8002c48:	dc28      	bgt.n	8002c9c <_printf_common+0xa4>
 8002c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	3300      	adds	r3, #0
 8002c52:	bf18      	it	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	0692      	lsls	r2, r2, #26
 8002c58:	d42d      	bmi.n	8002cb6 <_printf_common+0xbe>
 8002c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c5e:	4639      	mov	r1, r7
 8002c60:	4630      	mov	r0, r6
 8002c62:	47c0      	blx	r8
 8002c64:	3001      	adds	r0, #1
 8002c66:	d020      	beq.n	8002caa <_printf_common+0xb2>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	68e5      	ldr	r5, [r4, #12]
 8002c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c70:	f003 0306 	and.w	r3, r3, #6
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	bf08      	it	eq
 8002c78:	1aad      	subeq	r5, r5, r2
 8002c7a:	68a3      	ldr	r3, [r4, #8]
 8002c7c:	6922      	ldr	r2, [r4, #16]
 8002c7e:	bf0c      	ite	eq
 8002c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c84:	2500      	movne	r5, #0
 8002c86:	4293      	cmp	r3, r2
 8002c88:	bfc4      	itt	gt
 8002c8a:	1a9b      	subgt	r3, r3, r2
 8002c8c:	18ed      	addgt	r5, r5, r3
 8002c8e:	f04f 0900 	mov.w	r9, #0
 8002c92:	341a      	adds	r4, #26
 8002c94:	454d      	cmp	r5, r9
 8002c96:	d11a      	bne.n	8002cce <_printf_common+0xd6>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e008      	b.n	8002cae <_printf_common+0xb6>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	4652      	mov	r2, sl
 8002ca0:	4639      	mov	r1, r7
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	47c0      	blx	r8
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d103      	bne.n	8002cb2 <_printf_common+0xba>
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb2:	3501      	adds	r5, #1
 8002cb4:	e7c3      	b.n	8002c3e <_printf_common+0x46>
 8002cb6:	18e1      	adds	r1, r4, r3
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	2030      	movs	r0, #48	; 0x30
 8002cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cc0:	4422      	add	r2, r4
 8002cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cca:	3302      	adds	r3, #2
 8002ccc:	e7c5      	b.n	8002c5a <_printf_common+0x62>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	4639      	mov	r1, r7
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	47c0      	blx	r8
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d0e6      	beq.n	8002caa <_printf_common+0xb2>
 8002cdc:	f109 0901 	add.w	r9, r9, #1
 8002ce0:	e7d8      	b.n	8002c94 <_printf_common+0x9c>
	...

08002ce4 <_puts_r>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	460e      	mov	r6, r1
 8002ce8:	4605      	mov	r5, r0
 8002cea:	b118      	cbz	r0, 8002cf4 <_puts_r+0x10>
 8002cec:	6983      	ldr	r3, [r0, #24]
 8002cee:	b90b      	cbnz	r3, 8002cf4 <_puts_r+0x10>
 8002cf0:	f001 f852 	bl	8003d98 <__sinit>
 8002cf4:	69ab      	ldr	r3, [r5, #24]
 8002cf6:	68ac      	ldr	r4, [r5, #8]
 8002cf8:	b913      	cbnz	r3, 8002d00 <_puts_r+0x1c>
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	f001 f84c 	bl	8003d98 <__sinit>
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <_puts_r+0xac>)
 8002d02:	429c      	cmp	r4, r3
 8002d04:	d117      	bne.n	8002d36 <_puts_r+0x52>
 8002d06:	686c      	ldr	r4, [r5, #4]
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	071b      	lsls	r3, r3, #28
 8002d0c:	d51d      	bpl.n	8002d4a <_puts_r+0x66>
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	b1db      	cbz	r3, 8002d4a <_puts_r+0x66>
 8002d12:	3e01      	subs	r6, #1
 8002d14:	68a3      	ldr	r3, [r4, #8]
 8002d16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	60a3      	str	r3, [r4, #8]
 8002d1e:	b9e9      	cbnz	r1, 8002d5c <_puts_r+0x78>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da2e      	bge.n	8002d82 <_puts_r+0x9e>
 8002d24:	4622      	mov	r2, r4
 8002d26:	210a      	movs	r1, #10
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 f83f 	bl	8002dac <__swbuf_r>
 8002d2e:	3001      	adds	r0, #1
 8002d30:	d011      	beq.n	8002d56 <_puts_r+0x72>
 8002d32:	200a      	movs	r0, #10
 8002d34:	e011      	b.n	8002d5a <_puts_r+0x76>
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <_puts_r+0xb0>)
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	d101      	bne.n	8002d40 <_puts_r+0x5c>
 8002d3c:	68ac      	ldr	r4, [r5, #8]
 8002d3e:	e7e3      	b.n	8002d08 <_puts_r+0x24>
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <_puts_r+0xb4>)
 8002d42:	429c      	cmp	r4, r3
 8002d44:	bf08      	it	eq
 8002d46:	68ec      	ldreq	r4, [r5, #12]
 8002d48:	e7de      	b.n	8002d08 <_puts_r+0x24>
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f000 f87f 	bl	8002e50 <__swsetup_r>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d0dd      	beq.n	8002d12 <_puts_r+0x2e>
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da04      	bge.n	8002d6a <_puts_r+0x86>
 8002d60:	69a2      	ldr	r2, [r4, #24]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dc06      	bgt.n	8002d74 <_puts_r+0x90>
 8002d66:	290a      	cmp	r1, #10
 8002d68:	d004      	beq.n	8002d74 <_puts_r+0x90>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	6022      	str	r2, [r4, #0]
 8002d70:	7019      	strb	r1, [r3, #0]
 8002d72:	e7cf      	b.n	8002d14 <_puts_r+0x30>
 8002d74:	4622      	mov	r2, r4
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f818 	bl	8002dac <__swbuf_r>
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	d1c9      	bne.n	8002d14 <_puts_r+0x30>
 8002d80:	e7e9      	b.n	8002d56 <_puts_r+0x72>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	200a      	movs	r0, #10
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	6022      	str	r2, [r4, #0]
 8002d8a:	7018      	strb	r0, [r3, #0]
 8002d8c:	e7e5      	b.n	8002d5a <_puts_r+0x76>
 8002d8e:	bf00      	nop
 8002d90:	08004aa8 	.word	0x08004aa8
 8002d94:	08004ac8 	.word	0x08004ac8
 8002d98:	08004a88 	.word	0x08004a88

08002d9c <puts>:
 8002d9c:	4b02      	ldr	r3, [pc, #8]	; (8002da8 <puts+0xc>)
 8002d9e:	4601      	mov	r1, r0
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	f7ff bf9f 	b.w	8002ce4 <_puts_r>
 8002da6:	bf00      	nop
 8002da8:	20000040 	.word	0x20000040

08002dac <__swbuf_r>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	460e      	mov	r6, r1
 8002db0:	4614      	mov	r4, r2
 8002db2:	4605      	mov	r5, r0
 8002db4:	b118      	cbz	r0, 8002dbe <__swbuf_r+0x12>
 8002db6:	6983      	ldr	r3, [r0, #24]
 8002db8:	b90b      	cbnz	r3, 8002dbe <__swbuf_r+0x12>
 8002dba:	f000 ffed 	bl	8003d98 <__sinit>
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <__swbuf_r+0x98>)
 8002dc0:	429c      	cmp	r4, r3
 8002dc2:	d12a      	bne.n	8002e1a <__swbuf_r+0x6e>
 8002dc4:	686c      	ldr	r4, [r5, #4]
 8002dc6:	69a3      	ldr	r3, [r4, #24]
 8002dc8:	60a3      	str	r3, [r4, #8]
 8002dca:	89a3      	ldrh	r3, [r4, #12]
 8002dcc:	071a      	lsls	r2, r3, #28
 8002dce:	d52e      	bpl.n	8002e2e <__swbuf_r+0x82>
 8002dd0:	6923      	ldr	r3, [r4, #16]
 8002dd2:	b363      	cbz	r3, 8002e2e <__swbuf_r+0x82>
 8002dd4:	6923      	ldr	r3, [r4, #16]
 8002dd6:	6820      	ldr	r0, [r4, #0]
 8002dd8:	1ac0      	subs	r0, r0, r3
 8002dda:	6963      	ldr	r3, [r4, #20]
 8002ddc:	b2f6      	uxtb	r6, r6
 8002dde:	4283      	cmp	r3, r0
 8002de0:	4637      	mov	r7, r6
 8002de2:	dc04      	bgt.n	8002dee <__swbuf_r+0x42>
 8002de4:	4621      	mov	r1, r4
 8002de6:	4628      	mov	r0, r5
 8002de8:	f000 ff6c 	bl	8003cc4 <_fflush_r>
 8002dec:	bb28      	cbnz	r0, 8002e3a <__swbuf_r+0x8e>
 8002dee:	68a3      	ldr	r3, [r4, #8]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	60a3      	str	r3, [r4, #8]
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	6022      	str	r2, [r4, #0]
 8002dfa:	701e      	strb	r6, [r3, #0]
 8002dfc:	6963      	ldr	r3, [r4, #20]
 8002dfe:	3001      	adds	r0, #1
 8002e00:	4283      	cmp	r3, r0
 8002e02:	d004      	beq.n	8002e0e <__swbuf_r+0x62>
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	07db      	lsls	r3, r3, #31
 8002e08:	d519      	bpl.n	8002e3e <__swbuf_r+0x92>
 8002e0a:	2e0a      	cmp	r6, #10
 8002e0c:	d117      	bne.n	8002e3e <__swbuf_r+0x92>
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4628      	mov	r0, r5
 8002e12:	f000 ff57 	bl	8003cc4 <_fflush_r>
 8002e16:	b190      	cbz	r0, 8002e3e <__swbuf_r+0x92>
 8002e18:	e00f      	b.n	8002e3a <__swbuf_r+0x8e>
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <__swbuf_r+0x9c>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d101      	bne.n	8002e24 <__swbuf_r+0x78>
 8002e20:	68ac      	ldr	r4, [r5, #8]
 8002e22:	e7d0      	b.n	8002dc6 <__swbuf_r+0x1a>
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <__swbuf_r+0xa0>)
 8002e26:	429c      	cmp	r4, r3
 8002e28:	bf08      	it	eq
 8002e2a:	68ec      	ldreq	r4, [r5, #12]
 8002e2c:	e7cb      	b.n	8002dc6 <__swbuf_r+0x1a>
 8002e2e:	4621      	mov	r1, r4
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f80d 	bl	8002e50 <__swsetup_r>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d0cc      	beq.n	8002dd4 <__swbuf_r+0x28>
 8002e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8002e3e:	4638      	mov	r0, r7
 8002e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08004aa8 	.word	0x08004aa8
 8002e48:	08004ac8 	.word	0x08004ac8
 8002e4c:	08004a88 	.word	0x08004a88

08002e50 <__swsetup_r>:
 8002e50:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <__swsetup_r+0xcc>)
 8002e52:	b570      	push	{r4, r5, r6, lr}
 8002e54:	681d      	ldr	r5, [r3, #0]
 8002e56:	4606      	mov	r6, r0
 8002e58:	460c      	mov	r4, r1
 8002e5a:	b125      	cbz	r5, 8002e66 <__swsetup_r+0x16>
 8002e5c:	69ab      	ldr	r3, [r5, #24]
 8002e5e:	b913      	cbnz	r3, 8002e66 <__swsetup_r+0x16>
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 ff99 	bl	8003d98 <__sinit>
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <__swsetup_r+0xd0>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	d10f      	bne.n	8002e8c <__swsetup_r+0x3c>
 8002e6c:	686c      	ldr	r4, [r5, #4]
 8002e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	0715      	lsls	r5, r2, #28
 8002e76:	d42c      	bmi.n	8002ed2 <__swsetup_r+0x82>
 8002e78:	06d0      	lsls	r0, r2, #27
 8002e7a:	d411      	bmi.n	8002ea0 <__swsetup_r+0x50>
 8002e7c:	2209      	movs	r2, #9
 8002e7e:	6032      	str	r2, [r6, #0]
 8002e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e84:	81a3      	strh	r3, [r4, #12]
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8a:	e03e      	b.n	8002f0a <__swsetup_r+0xba>
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <__swsetup_r+0xd4>)
 8002e8e:	429c      	cmp	r4, r3
 8002e90:	d101      	bne.n	8002e96 <__swsetup_r+0x46>
 8002e92:	68ac      	ldr	r4, [r5, #8]
 8002e94:	e7eb      	b.n	8002e6e <__swsetup_r+0x1e>
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <__swsetup_r+0xd8>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	bf08      	it	eq
 8002e9c:	68ec      	ldreq	r4, [r5, #12]
 8002e9e:	e7e6      	b.n	8002e6e <__swsetup_r+0x1e>
 8002ea0:	0751      	lsls	r1, r2, #29
 8002ea2:	d512      	bpl.n	8002eca <__swsetup_r+0x7a>
 8002ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ea6:	b141      	cbz	r1, 8002eba <__swsetup_r+0x6a>
 8002ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eac:	4299      	cmp	r1, r3
 8002eae:	d002      	beq.n	8002eb6 <__swsetup_r+0x66>
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f001 fb69 	bl	8004588 <_free_r>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6063      	str	r3, [r4, #4]
 8002ec6:	6923      	ldr	r3, [r4, #16]
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	89a3      	ldrh	r3, [r4, #12]
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	81a3      	strh	r3, [r4, #12]
 8002ed2:	6923      	ldr	r3, [r4, #16]
 8002ed4:	b94b      	cbnz	r3, 8002eea <__swsetup_r+0x9a>
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee0:	d003      	beq.n	8002eea <__swsetup_r+0x9a>
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f001 f813 	bl	8003f10 <__smakebuf_r>
 8002eea:	89a2      	ldrh	r2, [r4, #12]
 8002eec:	f012 0301 	ands.w	r3, r2, #1
 8002ef0:	d00c      	beq.n	8002f0c <__swsetup_r+0xbc>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60a3      	str	r3, [r4, #8]
 8002ef6:	6963      	ldr	r3, [r4, #20]
 8002ef8:	425b      	negs	r3, r3
 8002efa:	61a3      	str	r3, [r4, #24]
 8002efc:	6923      	ldr	r3, [r4, #16]
 8002efe:	b953      	cbnz	r3, 8002f16 <__swsetup_r+0xc6>
 8002f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f08:	d1ba      	bne.n	8002e80 <__swsetup_r+0x30>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	0792      	lsls	r2, r2, #30
 8002f0e:	bf58      	it	pl
 8002f10:	6963      	ldrpl	r3, [r4, #20]
 8002f12:	60a3      	str	r3, [r4, #8]
 8002f14:	e7f2      	b.n	8002efc <__swsetup_r+0xac>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e7f7      	b.n	8002f0a <__swsetup_r+0xba>
 8002f1a:	bf00      	nop
 8002f1c:	20000040 	.word	0x20000040
 8002f20:	08004aa8 	.word	0x08004aa8
 8002f24:	08004ac8 	.word	0x08004ac8
 8002f28:	08004a88 	.word	0x08004a88

08002f2c <quorem>:
 8002f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f30:	6903      	ldr	r3, [r0, #16]
 8002f32:	690c      	ldr	r4, [r1, #16]
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	4680      	mov	r8, r0
 8002f38:	f2c0 8082 	blt.w	8003040 <quorem+0x114>
 8002f3c:	3c01      	subs	r4, #1
 8002f3e:	f101 0714 	add.w	r7, r1, #20
 8002f42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002f46:	f100 0614 	add.w	r6, r0, #20
 8002f4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002f4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002f52:	eb06 030c 	add.w	r3, r6, ip
 8002f56:	3501      	adds	r5, #1
 8002f58:	eb07 090c 	add.w	r9, r7, ip
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f62:	b395      	cbz	r5, 8002fca <quorem+0x9e>
 8002f64:	f04f 0a00 	mov.w	sl, #0
 8002f68:	4638      	mov	r0, r7
 8002f6a:	46b6      	mov	lr, r6
 8002f6c:	46d3      	mov	fp, sl
 8002f6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8002f72:	b293      	uxth	r3, r2
 8002f74:	fb05 a303 	mla	r3, r5, r3, sl
 8002f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	ebab 0303 	sub.w	r3, fp, r3
 8002f82:	0c12      	lsrs	r2, r2, #16
 8002f84:	f8de b000 	ldr.w	fp, [lr]
 8002f88:	fb05 a202 	mla	r2, r5, r2, sl
 8002f8c:	fa13 f38b 	uxtah	r3, r3, fp
 8002f90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002f94:	fa1f fb82 	uxth.w	fp, r2
 8002f98:	f8de 2000 	ldr.w	r2, [lr]
 8002f9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002faa:	4581      	cmp	r9, r0
 8002fac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002fb0:	f84e 3b04 	str.w	r3, [lr], #4
 8002fb4:	d2db      	bcs.n	8002f6e <quorem+0x42>
 8002fb6:	f856 300c 	ldr.w	r3, [r6, ip]
 8002fba:	b933      	cbnz	r3, 8002fca <quorem+0x9e>
 8002fbc:	9b01      	ldr	r3, [sp, #4]
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	429e      	cmp	r6, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	d330      	bcc.n	8003028 <quorem+0xfc>
 8002fc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8002fca:	4640      	mov	r0, r8
 8002fcc:	f001 fa08 	bl	80043e0 <__mcmp>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	db25      	blt.n	8003020 <quorem+0xf4>
 8002fd4:	3501      	adds	r5, #1
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f04f 0c00 	mov.w	ip, #0
 8002fdc:	f857 2b04 	ldr.w	r2, [r7], #4
 8002fe0:	f8d0 e000 	ldr.w	lr, [r0]
 8002fe4:	b293      	uxth	r3, r2
 8002fe6:	ebac 0303 	sub.w	r3, ip, r3
 8002fea:	0c12      	lsrs	r2, r2, #16
 8002fec:	fa13 f38e 	uxtah	r3, r3, lr
 8002ff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ffe:	45b9      	cmp	r9, r7
 8003000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003004:	f840 3b04 	str.w	r3, [r0], #4
 8003008:	d2e8      	bcs.n	8002fdc <quorem+0xb0>
 800300a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800300e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003012:	b92a      	cbnz	r2, 8003020 <quorem+0xf4>
 8003014:	3b04      	subs	r3, #4
 8003016:	429e      	cmp	r6, r3
 8003018:	461a      	mov	r2, r3
 800301a:	d30b      	bcc.n	8003034 <quorem+0x108>
 800301c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003020:	4628      	mov	r0, r5
 8003022:	b003      	add	sp, #12
 8003024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	3b04      	subs	r3, #4
 800302c:	2a00      	cmp	r2, #0
 800302e:	d1ca      	bne.n	8002fc6 <quorem+0x9a>
 8003030:	3c01      	subs	r4, #1
 8003032:	e7c5      	b.n	8002fc0 <quorem+0x94>
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	3b04      	subs	r3, #4
 8003038:	2a00      	cmp	r2, #0
 800303a:	d1ef      	bne.n	800301c <quorem+0xf0>
 800303c:	3c01      	subs	r4, #1
 800303e:	e7ea      	b.n	8003016 <quorem+0xea>
 8003040:	2000      	movs	r0, #0
 8003042:	e7ee      	b.n	8003022 <quorem+0xf6>
 8003044:	0000      	movs	r0, r0
	...

08003048 <_dtoa_r>:
 8003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304c:	ec57 6b10 	vmov	r6, r7, d0
 8003050:	b097      	sub	sp, #92	; 0x5c
 8003052:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003054:	9106      	str	r1, [sp, #24]
 8003056:	4604      	mov	r4, r0
 8003058:	920b      	str	r2, [sp, #44]	; 0x2c
 800305a:	9312      	str	r3, [sp, #72]	; 0x48
 800305c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003060:	e9cd 6700 	strd	r6, r7, [sp]
 8003064:	b93d      	cbnz	r5, 8003076 <_dtoa_r+0x2e>
 8003066:	2010      	movs	r0, #16
 8003068:	f000 ff92 	bl	8003f90 <malloc>
 800306c:	6260      	str	r0, [r4, #36]	; 0x24
 800306e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003072:	6005      	str	r5, [r0, #0]
 8003074:	60c5      	str	r5, [r0, #12]
 8003076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	b151      	cbz	r1, 8003092 <_dtoa_r+0x4a>
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	604a      	str	r2, [r1, #4]
 8003080:	2301      	movs	r3, #1
 8003082:	4093      	lsls	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
 8003086:	4620      	mov	r0, r4
 8003088:	f000 ffc9 	bl	800401e <_Bfree>
 800308c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	1e3b      	subs	r3, r7, #0
 8003094:	bfbb      	ittet	lt
 8003096:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800309a:	9301      	strlt	r3, [sp, #4]
 800309c:	2300      	movge	r3, #0
 800309e:	2201      	movlt	r2, #1
 80030a0:	bfac      	ite	ge
 80030a2:	f8c8 3000 	strge.w	r3, [r8]
 80030a6:	f8c8 2000 	strlt.w	r2, [r8]
 80030aa:	4baf      	ldr	r3, [pc, #700]	; (8003368 <_dtoa_r+0x320>)
 80030ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80030b0:	ea33 0308 	bics.w	r3, r3, r8
 80030b4:	d114      	bne.n	80030e0 <_dtoa_r+0x98>
 80030b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	9b00      	ldr	r3, [sp, #0]
 80030c0:	b923      	cbnz	r3, 80030cc <_dtoa_r+0x84>
 80030c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80030c6:	2800      	cmp	r0, #0
 80030c8:	f000 8542 	beq.w	8003b50 <_dtoa_r+0xb08>
 80030cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800337c <_dtoa_r+0x334>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8544 	beq.w	8003b60 <_dtoa_r+0xb18>
 80030d8:	f10b 0303 	add.w	r3, fp, #3
 80030dc:	f000 bd3e 	b.w	8003b5c <_dtoa_r+0xb14>
 80030e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2300      	movs	r3, #0
 80030e8:	4630      	mov	r0, r6
 80030ea:	4639      	mov	r1, r7
 80030ec:	f7fd fc98 	bl	8000a20 <__aeabi_dcmpeq>
 80030f0:	4681      	mov	r9, r0
 80030f2:	b168      	cbz	r0, 8003110 <_dtoa_r+0xc8>
 80030f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030f6:	2301      	movs	r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8524 	beq.w	8003b4a <_dtoa_r+0xb02>
 8003102:	4b9a      	ldr	r3, [pc, #616]	; (800336c <_dtoa_r+0x324>)
 8003104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003106:	f103 3bff 	add.w	fp, r3, #4294967295
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	f000 bd28 	b.w	8003b60 <_dtoa_r+0xb18>
 8003110:	aa14      	add	r2, sp, #80	; 0x50
 8003112:	a915      	add	r1, sp, #84	; 0x54
 8003114:	ec47 6b10 	vmov	d0, r6, r7
 8003118:	4620      	mov	r0, r4
 800311a:	f001 f9d8 	bl	80044ce <__d2b>
 800311e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003122:	9004      	str	r0, [sp, #16]
 8003124:	2d00      	cmp	r5, #0
 8003126:	d07c      	beq.n	8003222 <_dtoa_r+0x1da>
 8003128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800312c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003130:	46b2      	mov	sl, r6
 8003132:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800313a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800313e:	2200      	movs	r2, #0
 8003140:	4b8b      	ldr	r3, [pc, #556]	; (8003370 <_dtoa_r+0x328>)
 8003142:	4650      	mov	r0, sl
 8003144:	4659      	mov	r1, fp
 8003146:	f7fd f84b 	bl	80001e0 <__aeabi_dsub>
 800314a:	a381      	add	r3, pc, #516	; (adr r3, 8003350 <_dtoa_r+0x308>)
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f7fd f9fe 	bl	8000550 <__aeabi_dmul>
 8003154:	a380      	add	r3, pc, #512	; (adr r3, 8003358 <_dtoa_r+0x310>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd f843 	bl	80001e4 <__adddf3>
 800315e:	4606      	mov	r6, r0
 8003160:	4628      	mov	r0, r5
 8003162:	460f      	mov	r7, r1
 8003164:	f7fd f98a 	bl	800047c <__aeabi_i2d>
 8003168:	a37d      	add	r3, pc, #500	; (adr r3, 8003360 <_dtoa_r+0x318>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd f9ef 	bl	8000550 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4630      	mov	r0, r6
 8003178:	4639      	mov	r1, r7
 800317a:	f7fd f833 	bl	80001e4 <__adddf3>
 800317e:	4606      	mov	r6, r0
 8003180:	460f      	mov	r7, r1
 8003182:	f7fd fc95 	bl	8000ab0 <__aeabi_d2iz>
 8003186:	2200      	movs	r2, #0
 8003188:	4682      	mov	sl, r0
 800318a:	2300      	movs	r3, #0
 800318c:	4630      	mov	r0, r6
 800318e:	4639      	mov	r1, r7
 8003190:	f7fd fc50 	bl	8000a34 <__aeabi_dcmplt>
 8003194:	b148      	cbz	r0, 80031aa <_dtoa_r+0x162>
 8003196:	4650      	mov	r0, sl
 8003198:	f7fd f970 	bl	800047c <__aeabi_i2d>
 800319c:	4632      	mov	r2, r6
 800319e:	463b      	mov	r3, r7
 80031a0:	f7fd fc3e 	bl	8000a20 <__aeabi_dcmpeq>
 80031a4:	b908      	cbnz	r0, 80031aa <_dtoa_r+0x162>
 80031a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80031aa:	f1ba 0f16 	cmp.w	sl, #22
 80031ae:	d859      	bhi.n	8003264 <_dtoa_r+0x21c>
 80031b0:	4970      	ldr	r1, [pc, #448]	; (8003374 <_dtoa_r+0x32c>)
 80031b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80031b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031be:	f7fd fc57 	bl	8000a70 <__aeabi_dcmpgt>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d050      	beq.n	8003268 <_dtoa_r+0x220>
 80031c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80031ca:	2300      	movs	r3, #0
 80031cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80031ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80031d0:	1b5d      	subs	r5, r3, r5
 80031d2:	f1b5 0801 	subs.w	r8, r5, #1
 80031d6:	bf49      	itett	mi
 80031d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80031dc:	2300      	movpl	r3, #0
 80031de:	9305      	strmi	r3, [sp, #20]
 80031e0:	f04f 0800 	movmi.w	r8, #0
 80031e4:	bf58      	it	pl
 80031e6:	9305      	strpl	r3, [sp, #20]
 80031e8:	f1ba 0f00 	cmp.w	sl, #0
 80031ec:	db3e      	blt.n	800326c <_dtoa_r+0x224>
 80031ee:	2300      	movs	r3, #0
 80031f0:	44d0      	add	r8, sl
 80031f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80031f6:	9307      	str	r3, [sp, #28]
 80031f8:	9b06      	ldr	r3, [sp, #24]
 80031fa:	2b09      	cmp	r3, #9
 80031fc:	f200 8090 	bhi.w	8003320 <_dtoa_r+0x2d8>
 8003200:	2b05      	cmp	r3, #5
 8003202:	bfc4      	itt	gt
 8003204:	3b04      	subgt	r3, #4
 8003206:	9306      	strgt	r3, [sp, #24]
 8003208:	9b06      	ldr	r3, [sp, #24]
 800320a:	f1a3 0302 	sub.w	r3, r3, #2
 800320e:	bfcc      	ite	gt
 8003210:	2500      	movgt	r5, #0
 8003212:	2501      	movle	r5, #1
 8003214:	2b03      	cmp	r3, #3
 8003216:	f200 808f 	bhi.w	8003338 <_dtoa_r+0x2f0>
 800321a:	e8df f003 	tbb	[pc, r3]
 800321e:	7f7d      	.short	0x7f7d
 8003220:	7131      	.short	0x7131
 8003222:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003226:	441d      	add	r5, r3
 8003228:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800322c:	2820      	cmp	r0, #32
 800322e:	dd13      	ble.n	8003258 <_dtoa_r+0x210>
 8003230:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003234:	9b00      	ldr	r3, [sp, #0]
 8003236:	fa08 f800 	lsl.w	r8, r8, r0
 800323a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800323e:	fa23 f000 	lsr.w	r0, r3, r0
 8003242:	ea48 0000 	orr.w	r0, r8, r0
 8003246:	f7fd f909 	bl	800045c <__aeabi_ui2d>
 800324a:	2301      	movs	r3, #1
 800324c:	4682      	mov	sl, r0
 800324e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003252:	3d01      	subs	r5, #1
 8003254:	9313      	str	r3, [sp, #76]	; 0x4c
 8003256:	e772      	b.n	800313e <_dtoa_r+0xf6>
 8003258:	9b00      	ldr	r3, [sp, #0]
 800325a:	f1c0 0020 	rsb	r0, r0, #32
 800325e:	fa03 f000 	lsl.w	r0, r3, r0
 8003262:	e7f0      	b.n	8003246 <_dtoa_r+0x1fe>
 8003264:	2301      	movs	r3, #1
 8003266:	e7b1      	b.n	80031cc <_dtoa_r+0x184>
 8003268:	900f      	str	r0, [sp, #60]	; 0x3c
 800326a:	e7b0      	b.n	80031ce <_dtoa_r+0x186>
 800326c:	9b05      	ldr	r3, [sp, #20]
 800326e:	eba3 030a 	sub.w	r3, r3, sl
 8003272:	9305      	str	r3, [sp, #20]
 8003274:	f1ca 0300 	rsb	r3, sl, #0
 8003278:	9307      	str	r3, [sp, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	930e      	str	r3, [sp, #56]	; 0x38
 800327e:	e7bb      	b.n	80031f8 <_dtoa_r+0x1b0>
 8003280:	2301      	movs	r3, #1
 8003282:	930a      	str	r3, [sp, #40]	; 0x28
 8003284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	dd59      	ble.n	800333e <_dtoa_r+0x2f6>
 800328a:	9302      	str	r3, [sp, #8]
 800328c:	4699      	mov	r9, r3
 800328e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003290:	2200      	movs	r2, #0
 8003292:	6072      	str	r2, [r6, #4]
 8003294:	2204      	movs	r2, #4
 8003296:	f102 0014 	add.w	r0, r2, #20
 800329a:	4298      	cmp	r0, r3
 800329c:	6871      	ldr	r1, [r6, #4]
 800329e:	d953      	bls.n	8003348 <_dtoa_r+0x300>
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fe88 	bl	8003fb6 <_Balloc>
 80032a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032a8:	6030      	str	r0, [r6, #0]
 80032aa:	f1b9 0f0e 	cmp.w	r9, #14
 80032ae:	f8d3 b000 	ldr.w	fp, [r3]
 80032b2:	f200 80e6 	bhi.w	8003482 <_dtoa_r+0x43a>
 80032b6:	2d00      	cmp	r5, #0
 80032b8:	f000 80e3 	beq.w	8003482 <_dtoa_r+0x43a>
 80032bc:	ed9d 7b00 	vldr	d7, [sp]
 80032c0:	f1ba 0f00 	cmp.w	sl, #0
 80032c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80032c8:	dd74      	ble.n	80033b4 <_dtoa_r+0x36c>
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <_dtoa_r+0x32c>)
 80032cc:	f00a 030f 	and.w	r3, sl, #15
 80032d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80032d4:	ed93 7b00 	vldr	d7, [r3]
 80032d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80032dc:	06f0      	lsls	r0, r6, #27
 80032de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80032e2:	d565      	bpl.n	80033b0 <_dtoa_r+0x368>
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <_dtoa_r+0x330>)
 80032e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80032ee:	f7fd fa59 	bl	80007a4 <__aeabi_ddiv>
 80032f2:	e9cd 0100 	strd	r0, r1, [sp]
 80032f6:	f006 060f 	and.w	r6, r6, #15
 80032fa:	2503      	movs	r5, #3
 80032fc:	4f1e      	ldr	r7, [pc, #120]	; (8003378 <_dtoa_r+0x330>)
 80032fe:	e04c      	b.n	800339a <_dtoa_r+0x352>
 8003300:	2301      	movs	r3, #1
 8003302:	930a      	str	r3, [sp, #40]	; 0x28
 8003304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003306:	4453      	add	r3, sl
 8003308:	f103 0901 	add.w	r9, r3, #1
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	464b      	mov	r3, r9
 8003310:	2b01      	cmp	r3, #1
 8003312:	bfb8      	it	lt
 8003314:	2301      	movlt	r3, #1
 8003316:	e7ba      	b.n	800328e <_dtoa_r+0x246>
 8003318:	2300      	movs	r3, #0
 800331a:	e7b2      	b.n	8003282 <_dtoa_r+0x23a>
 800331c:	2300      	movs	r3, #0
 800331e:	e7f0      	b.n	8003302 <_dtoa_r+0x2ba>
 8003320:	2501      	movs	r5, #1
 8003322:	2300      	movs	r3, #0
 8003324:	9306      	str	r3, [sp, #24]
 8003326:	950a      	str	r5, [sp, #40]	; 0x28
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	9302      	str	r3, [sp, #8]
 800332e:	4699      	mov	r9, r3
 8003330:	2200      	movs	r2, #0
 8003332:	2312      	movs	r3, #18
 8003334:	920b      	str	r2, [sp, #44]	; 0x2c
 8003336:	e7aa      	b.n	800328e <_dtoa_r+0x246>
 8003338:	2301      	movs	r3, #1
 800333a:	930a      	str	r3, [sp, #40]	; 0x28
 800333c:	e7f4      	b.n	8003328 <_dtoa_r+0x2e0>
 800333e:	2301      	movs	r3, #1
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	4699      	mov	r9, r3
 8003344:	461a      	mov	r2, r3
 8003346:	e7f5      	b.n	8003334 <_dtoa_r+0x2ec>
 8003348:	3101      	adds	r1, #1
 800334a:	6071      	str	r1, [r6, #4]
 800334c:	0052      	lsls	r2, r2, #1
 800334e:	e7a2      	b.n	8003296 <_dtoa_r+0x24e>
 8003350:	636f4361 	.word	0x636f4361
 8003354:	3fd287a7 	.word	0x3fd287a7
 8003358:	8b60c8b3 	.word	0x8b60c8b3
 800335c:	3fc68a28 	.word	0x3fc68a28
 8003360:	509f79fb 	.word	0x509f79fb
 8003364:	3fd34413 	.word	0x3fd34413
 8003368:	7ff00000 	.word	0x7ff00000
 800336c:	08004a79 	.word	0x08004a79
 8003370:	3ff80000 	.word	0x3ff80000
 8003374:	08004b10 	.word	0x08004b10
 8003378:	08004ae8 	.word	0x08004ae8
 800337c:	08004a83 	.word	0x08004a83
 8003380:	07f1      	lsls	r1, r6, #31
 8003382:	d508      	bpl.n	8003396 <_dtoa_r+0x34e>
 8003384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800338c:	f7fd f8e0 	bl	8000550 <__aeabi_dmul>
 8003390:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003394:	3501      	adds	r5, #1
 8003396:	1076      	asrs	r6, r6, #1
 8003398:	3708      	adds	r7, #8
 800339a:	2e00      	cmp	r6, #0
 800339c:	d1f0      	bne.n	8003380 <_dtoa_r+0x338>
 800339e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033a6:	f7fd f9fd 	bl	80007a4 <__aeabi_ddiv>
 80033aa:	e9cd 0100 	strd	r0, r1, [sp]
 80033ae:	e01a      	b.n	80033e6 <_dtoa_r+0x39e>
 80033b0:	2502      	movs	r5, #2
 80033b2:	e7a3      	b.n	80032fc <_dtoa_r+0x2b4>
 80033b4:	f000 80a0 	beq.w	80034f8 <_dtoa_r+0x4b0>
 80033b8:	f1ca 0600 	rsb	r6, sl, #0
 80033bc:	4b9f      	ldr	r3, [pc, #636]	; (800363c <_dtoa_r+0x5f4>)
 80033be:	4fa0      	ldr	r7, [pc, #640]	; (8003640 <_dtoa_r+0x5f8>)
 80033c0:	f006 020f 	and.w	r2, r6, #15
 80033c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80033d0:	f7fd f8be 	bl	8000550 <__aeabi_dmul>
 80033d4:	e9cd 0100 	strd	r0, r1, [sp]
 80033d8:	1136      	asrs	r6, r6, #4
 80033da:	2300      	movs	r3, #0
 80033dc:	2502      	movs	r5, #2
 80033de:	2e00      	cmp	r6, #0
 80033e0:	d17f      	bne.n	80034e2 <_dtoa_r+0x49a>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e1      	bne.n	80033aa <_dtoa_r+0x362>
 80033e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8087 	beq.w	80034fc <_dtoa_r+0x4b4>
 80033ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80033f2:	2200      	movs	r2, #0
 80033f4:	4b93      	ldr	r3, [pc, #588]	; (8003644 <_dtoa_r+0x5fc>)
 80033f6:	4630      	mov	r0, r6
 80033f8:	4639      	mov	r1, r7
 80033fa:	f7fd fb1b 	bl	8000a34 <__aeabi_dcmplt>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d07c      	beq.n	80034fc <_dtoa_r+0x4b4>
 8003402:	f1b9 0f00 	cmp.w	r9, #0
 8003406:	d079      	beq.n	80034fc <_dtoa_r+0x4b4>
 8003408:	9b02      	ldr	r3, [sp, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	dd35      	ble.n	800347a <_dtoa_r+0x432>
 800340e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003412:	9308      	str	r3, [sp, #32]
 8003414:	4639      	mov	r1, r7
 8003416:	2200      	movs	r2, #0
 8003418:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <_dtoa_r+0x600>)
 800341a:	4630      	mov	r0, r6
 800341c:	f7fd f898 	bl	8000550 <__aeabi_dmul>
 8003420:	e9cd 0100 	strd	r0, r1, [sp]
 8003424:	9f02      	ldr	r7, [sp, #8]
 8003426:	3501      	adds	r5, #1
 8003428:	4628      	mov	r0, r5
 800342a:	f7fd f827 	bl	800047c <__aeabi_i2d>
 800342e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003432:	f7fd f88d 	bl	8000550 <__aeabi_dmul>
 8003436:	2200      	movs	r2, #0
 8003438:	4b84      	ldr	r3, [pc, #528]	; (800364c <_dtoa_r+0x604>)
 800343a:	f7fc fed3 	bl	80001e4 <__adddf3>
 800343e:	4605      	mov	r5, r0
 8003440:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003444:	2f00      	cmp	r7, #0
 8003446:	d15d      	bne.n	8003504 <_dtoa_r+0x4bc>
 8003448:	2200      	movs	r2, #0
 800344a:	4b81      	ldr	r3, [pc, #516]	; (8003650 <_dtoa_r+0x608>)
 800344c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003450:	f7fc fec6 	bl	80001e0 <__aeabi_dsub>
 8003454:	462a      	mov	r2, r5
 8003456:	4633      	mov	r3, r6
 8003458:	e9cd 0100 	strd	r0, r1, [sp]
 800345c:	f7fd fb08 	bl	8000a70 <__aeabi_dcmpgt>
 8003460:	2800      	cmp	r0, #0
 8003462:	f040 8288 	bne.w	8003976 <_dtoa_r+0x92e>
 8003466:	462a      	mov	r2, r5
 8003468:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800346c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003470:	f7fd fae0 	bl	8000a34 <__aeabi_dcmplt>
 8003474:	2800      	cmp	r0, #0
 8003476:	f040 827c 	bne.w	8003972 <_dtoa_r+0x92a>
 800347a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800347e:	e9cd 2300 	strd	r2, r3, [sp]
 8003482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003484:	2b00      	cmp	r3, #0
 8003486:	f2c0 8150 	blt.w	800372a <_dtoa_r+0x6e2>
 800348a:	f1ba 0f0e 	cmp.w	sl, #14
 800348e:	f300 814c 	bgt.w	800372a <_dtoa_r+0x6e2>
 8003492:	4b6a      	ldr	r3, [pc, #424]	; (800363c <_dtoa_r+0x5f4>)
 8003494:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003498:	ed93 7b00 	vldr	d7, [r3]
 800349c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80034a4:	f280 80d8 	bge.w	8003658 <_dtoa_r+0x610>
 80034a8:	f1b9 0f00 	cmp.w	r9, #0
 80034ac:	f300 80d4 	bgt.w	8003658 <_dtoa_r+0x610>
 80034b0:	f040 825e 	bne.w	8003970 <_dtoa_r+0x928>
 80034b4:	2200      	movs	r2, #0
 80034b6:	4b66      	ldr	r3, [pc, #408]	; (8003650 <_dtoa_r+0x608>)
 80034b8:	ec51 0b17 	vmov	r0, r1, d7
 80034bc:	f7fd f848 	bl	8000550 <__aeabi_dmul>
 80034c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034c4:	f7fd faca 	bl	8000a5c <__aeabi_dcmpge>
 80034c8:	464f      	mov	r7, r9
 80034ca:	464e      	mov	r6, r9
 80034cc:	2800      	cmp	r0, #0
 80034ce:	f040 8234 	bne.w	800393a <_dtoa_r+0x8f2>
 80034d2:	2331      	movs	r3, #49	; 0x31
 80034d4:	f10b 0501 	add.w	r5, fp, #1
 80034d8:	f88b 3000 	strb.w	r3, [fp]
 80034dc:	f10a 0a01 	add.w	sl, sl, #1
 80034e0:	e22f      	b.n	8003942 <_dtoa_r+0x8fa>
 80034e2:	07f2      	lsls	r2, r6, #31
 80034e4:	d505      	bpl.n	80034f2 <_dtoa_r+0x4aa>
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	f7fd f831 	bl	8000550 <__aeabi_dmul>
 80034ee:	3501      	adds	r5, #1
 80034f0:	2301      	movs	r3, #1
 80034f2:	1076      	asrs	r6, r6, #1
 80034f4:	3708      	adds	r7, #8
 80034f6:	e772      	b.n	80033de <_dtoa_r+0x396>
 80034f8:	2502      	movs	r5, #2
 80034fa:	e774      	b.n	80033e6 <_dtoa_r+0x39e>
 80034fc:	f8cd a020 	str.w	sl, [sp, #32]
 8003500:	464f      	mov	r7, r9
 8003502:	e791      	b.n	8003428 <_dtoa_r+0x3e0>
 8003504:	4b4d      	ldr	r3, [pc, #308]	; (800363c <_dtoa_r+0x5f4>)
 8003506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800350a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800350e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d047      	beq.n	80035a4 <_dtoa_r+0x55c>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	2000      	movs	r0, #0
 800351a:	494e      	ldr	r1, [pc, #312]	; (8003654 <_dtoa_r+0x60c>)
 800351c:	f7fd f942 	bl	80007a4 <__aeabi_ddiv>
 8003520:	462a      	mov	r2, r5
 8003522:	4633      	mov	r3, r6
 8003524:	f7fc fe5c 	bl	80001e0 <__aeabi_dsub>
 8003528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800352c:	465d      	mov	r5, fp
 800352e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003532:	f7fd fabd 	bl	8000ab0 <__aeabi_d2iz>
 8003536:	4606      	mov	r6, r0
 8003538:	f7fc ffa0 	bl	800047c <__aeabi_i2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003544:	f7fc fe4c 	bl	80001e0 <__aeabi_dsub>
 8003548:	3630      	adds	r6, #48	; 0x30
 800354a:	f805 6b01 	strb.w	r6, [r5], #1
 800354e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003552:	e9cd 0100 	strd	r0, r1, [sp]
 8003556:	f7fd fa6d 	bl	8000a34 <__aeabi_dcmplt>
 800355a:	2800      	cmp	r0, #0
 800355c:	d163      	bne.n	8003626 <_dtoa_r+0x5de>
 800355e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003562:	2000      	movs	r0, #0
 8003564:	4937      	ldr	r1, [pc, #220]	; (8003644 <_dtoa_r+0x5fc>)
 8003566:	f7fc fe3b 	bl	80001e0 <__aeabi_dsub>
 800356a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800356e:	f7fd fa61 	bl	8000a34 <__aeabi_dcmplt>
 8003572:	2800      	cmp	r0, #0
 8003574:	f040 80b7 	bne.w	80036e6 <_dtoa_r+0x69e>
 8003578:	eba5 030b 	sub.w	r3, r5, fp
 800357c:	429f      	cmp	r7, r3
 800357e:	f77f af7c 	ble.w	800347a <_dtoa_r+0x432>
 8003582:	2200      	movs	r2, #0
 8003584:	4b30      	ldr	r3, [pc, #192]	; (8003648 <_dtoa_r+0x600>)
 8003586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800358a:	f7fc ffe1 	bl	8000550 <__aeabi_dmul>
 800358e:	2200      	movs	r2, #0
 8003590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <_dtoa_r+0x600>)
 8003596:	e9dd 0100 	ldrd	r0, r1, [sp]
 800359a:	f7fc ffd9 	bl	8000550 <__aeabi_dmul>
 800359e:	e9cd 0100 	strd	r0, r1, [sp]
 80035a2:	e7c4      	b.n	800352e <_dtoa_r+0x4e6>
 80035a4:	462a      	mov	r2, r5
 80035a6:	4633      	mov	r3, r6
 80035a8:	f7fc ffd2 	bl	8000550 <__aeabi_dmul>
 80035ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80035b0:	eb0b 0507 	add.w	r5, fp, r7
 80035b4:	465e      	mov	r6, fp
 80035b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035ba:	f7fd fa79 	bl	8000ab0 <__aeabi_d2iz>
 80035be:	4607      	mov	r7, r0
 80035c0:	f7fc ff5c 	bl	800047c <__aeabi_i2d>
 80035c4:	3730      	adds	r7, #48	; 0x30
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035ce:	f7fc fe07 	bl	80001e0 <__aeabi_dsub>
 80035d2:	f806 7b01 	strb.w	r7, [r6], #1
 80035d6:	42ae      	cmp	r6, r5
 80035d8:	e9cd 0100 	strd	r0, r1, [sp]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	d126      	bne.n	8003630 <_dtoa_r+0x5e8>
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <_dtoa_r+0x60c>)
 80035e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035e8:	f7fc fdfc 	bl	80001e4 <__adddf3>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035f4:	f7fd fa3c 	bl	8000a70 <__aeabi_dcmpgt>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d174      	bne.n	80036e6 <_dtoa_r+0x69e>
 80035fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003600:	2000      	movs	r0, #0
 8003602:	4914      	ldr	r1, [pc, #80]	; (8003654 <_dtoa_r+0x60c>)
 8003604:	f7fc fdec 	bl	80001e0 <__aeabi_dsub>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003610:	f7fd fa10 	bl	8000a34 <__aeabi_dcmplt>
 8003614:	2800      	cmp	r0, #0
 8003616:	f43f af30 	beq.w	800347a <_dtoa_r+0x432>
 800361a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800361e:	2b30      	cmp	r3, #48	; 0x30
 8003620:	f105 32ff 	add.w	r2, r5, #4294967295
 8003624:	d002      	beq.n	800362c <_dtoa_r+0x5e4>
 8003626:	f8dd a020 	ldr.w	sl, [sp, #32]
 800362a:	e04a      	b.n	80036c2 <_dtoa_r+0x67a>
 800362c:	4615      	mov	r5, r2
 800362e:	e7f4      	b.n	800361a <_dtoa_r+0x5d2>
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <_dtoa_r+0x600>)
 8003632:	f7fc ff8d 	bl	8000550 <__aeabi_dmul>
 8003636:	e9cd 0100 	strd	r0, r1, [sp]
 800363a:	e7bc      	b.n	80035b6 <_dtoa_r+0x56e>
 800363c:	08004b10 	.word	0x08004b10
 8003640:	08004ae8 	.word	0x08004ae8
 8003644:	3ff00000 	.word	0x3ff00000
 8003648:	40240000 	.word	0x40240000
 800364c:	401c0000 	.word	0x401c0000
 8003650:	40140000 	.word	0x40140000
 8003654:	3fe00000 	.word	0x3fe00000
 8003658:	e9dd 6700 	ldrd	r6, r7, [sp]
 800365c:	465d      	mov	r5, fp
 800365e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003662:	4630      	mov	r0, r6
 8003664:	4639      	mov	r1, r7
 8003666:	f7fd f89d 	bl	80007a4 <__aeabi_ddiv>
 800366a:	f7fd fa21 	bl	8000ab0 <__aeabi_d2iz>
 800366e:	4680      	mov	r8, r0
 8003670:	f7fc ff04 	bl	800047c <__aeabi_i2d>
 8003674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003678:	f7fc ff6a 	bl	8000550 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4630      	mov	r0, r6
 8003682:	4639      	mov	r1, r7
 8003684:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003688:	f7fc fdaa 	bl	80001e0 <__aeabi_dsub>
 800368c:	f805 6b01 	strb.w	r6, [r5], #1
 8003690:	eba5 060b 	sub.w	r6, r5, fp
 8003694:	45b1      	cmp	r9, r6
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	d139      	bne.n	8003710 <_dtoa_r+0x6c8>
 800369c:	f7fc fda2 	bl	80001e4 <__adddf3>
 80036a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036a4:	4606      	mov	r6, r0
 80036a6:	460f      	mov	r7, r1
 80036a8:	f7fd f9e2 	bl	8000a70 <__aeabi_dcmpgt>
 80036ac:	b9c8      	cbnz	r0, 80036e2 <_dtoa_r+0x69a>
 80036ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036b2:	4630      	mov	r0, r6
 80036b4:	4639      	mov	r1, r7
 80036b6:	f7fd f9b3 	bl	8000a20 <__aeabi_dcmpeq>
 80036ba:	b110      	cbz	r0, 80036c2 <_dtoa_r+0x67a>
 80036bc:	f018 0f01 	tst.w	r8, #1
 80036c0:	d10f      	bne.n	80036e2 <_dtoa_r+0x69a>
 80036c2:	9904      	ldr	r1, [sp, #16]
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fcaa 	bl	800401e <_Bfree>
 80036ca:	2300      	movs	r3, #0
 80036cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80036ce:	702b      	strb	r3, [r5, #0]
 80036d0:	f10a 0301 	add.w	r3, sl, #1
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8241 	beq.w	8003b60 <_dtoa_r+0xb18>
 80036de:	601d      	str	r5, [r3, #0]
 80036e0:	e23e      	b.n	8003b60 <_dtoa_r+0xb18>
 80036e2:	f8cd a020 	str.w	sl, [sp, #32]
 80036e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80036ea:	2a39      	cmp	r2, #57	; 0x39
 80036ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80036f0:	d108      	bne.n	8003704 <_dtoa_r+0x6bc>
 80036f2:	459b      	cmp	fp, r3
 80036f4:	d10a      	bne.n	800370c <_dtoa_r+0x6c4>
 80036f6:	9b08      	ldr	r3, [sp, #32]
 80036f8:	3301      	adds	r3, #1
 80036fa:	9308      	str	r3, [sp, #32]
 80036fc:	2330      	movs	r3, #48	; 0x30
 80036fe:	f88b 3000 	strb.w	r3, [fp]
 8003702:	465b      	mov	r3, fp
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	3201      	adds	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e78c      	b.n	8003626 <_dtoa_r+0x5de>
 800370c:	461d      	mov	r5, r3
 800370e:	e7ea      	b.n	80036e6 <_dtoa_r+0x69e>
 8003710:	2200      	movs	r2, #0
 8003712:	4b9b      	ldr	r3, [pc, #620]	; (8003980 <_dtoa_r+0x938>)
 8003714:	f7fc ff1c 	bl	8000550 <__aeabi_dmul>
 8003718:	2200      	movs	r2, #0
 800371a:	2300      	movs	r3, #0
 800371c:	4606      	mov	r6, r0
 800371e:	460f      	mov	r7, r1
 8003720:	f7fd f97e 	bl	8000a20 <__aeabi_dcmpeq>
 8003724:	2800      	cmp	r0, #0
 8003726:	d09a      	beq.n	800365e <_dtoa_r+0x616>
 8003728:	e7cb      	b.n	80036c2 <_dtoa_r+0x67a>
 800372a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800372c:	2a00      	cmp	r2, #0
 800372e:	f000 808b 	beq.w	8003848 <_dtoa_r+0x800>
 8003732:	9a06      	ldr	r2, [sp, #24]
 8003734:	2a01      	cmp	r2, #1
 8003736:	dc6e      	bgt.n	8003816 <_dtoa_r+0x7ce>
 8003738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800373a:	2a00      	cmp	r2, #0
 800373c:	d067      	beq.n	800380e <_dtoa_r+0x7c6>
 800373e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003742:	9f07      	ldr	r7, [sp, #28]
 8003744:	9d05      	ldr	r5, [sp, #20]
 8003746:	9a05      	ldr	r2, [sp, #20]
 8003748:	2101      	movs	r1, #1
 800374a:	441a      	add	r2, r3
 800374c:	4620      	mov	r0, r4
 800374e:	9205      	str	r2, [sp, #20]
 8003750:	4498      	add	r8, r3
 8003752:	f000 fd04 	bl	800415e <__i2b>
 8003756:	4606      	mov	r6, r0
 8003758:	2d00      	cmp	r5, #0
 800375a:	dd0c      	ble.n	8003776 <_dtoa_r+0x72e>
 800375c:	f1b8 0f00 	cmp.w	r8, #0
 8003760:	dd09      	ble.n	8003776 <_dtoa_r+0x72e>
 8003762:	4545      	cmp	r5, r8
 8003764:	9a05      	ldr	r2, [sp, #20]
 8003766:	462b      	mov	r3, r5
 8003768:	bfa8      	it	ge
 800376a:	4643      	movge	r3, r8
 800376c:	1ad2      	subs	r2, r2, r3
 800376e:	9205      	str	r2, [sp, #20]
 8003770:	1aed      	subs	r5, r5, r3
 8003772:	eba8 0803 	sub.w	r8, r8, r3
 8003776:	9b07      	ldr	r3, [sp, #28]
 8003778:	b1eb      	cbz	r3, 80037b6 <_dtoa_r+0x76e>
 800377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d067      	beq.n	8003850 <_dtoa_r+0x808>
 8003780:	b18f      	cbz	r7, 80037a6 <_dtoa_r+0x75e>
 8003782:	4631      	mov	r1, r6
 8003784:	463a      	mov	r2, r7
 8003786:	4620      	mov	r0, r4
 8003788:	f000 fd88 	bl	800429c <__pow5mult>
 800378c:	9a04      	ldr	r2, [sp, #16]
 800378e:	4601      	mov	r1, r0
 8003790:	4606      	mov	r6, r0
 8003792:	4620      	mov	r0, r4
 8003794:	f000 fcec 	bl	8004170 <__multiply>
 8003798:	9904      	ldr	r1, [sp, #16]
 800379a:	9008      	str	r0, [sp, #32]
 800379c:	4620      	mov	r0, r4
 800379e:	f000 fc3e 	bl	800401e <_Bfree>
 80037a2:	9b08      	ldr	r3, [sp, #32]
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	9b07      	ldr	r3, [sp, #28]
 80037a8:	1bda      	subs	r2, r3, r7
 80037aa:	d004      	beq.n	80037b6 <_dtoa_r+0x76e>
 80037ac:	9904      	ldr	r1, [sp, #16]
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 fd74 	bl	800429c <__pow5mult>
 80037b4:	9004      	str	r0, [sp, #16]
 80037b6:	2101      	movs	r1, #1
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 fcd0 	bl	800415e <__i2b>
 80037be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037c0:	4607      	mov	r7, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 81d0 	beq.w	8003b68 <_dtoa_r+0xb20>
 80037c8:	461a      	mov	r2, r3
 80037ca:	4601      	mov	r1, r0
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 fd65 	bl	800429c <__pow5mult>
 80037d2:	9b06      	ldr	r3, [sp, #24]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	4607      	mov	r7, r0
 80037d8:	dc40      	bgt.n	800385c <_dtoa_r+0x814>
 80037da:	9b00      	ldr	r3, [sp, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d139      	bne.n	8003854 <_dtoa_r+0x80c>
 80037e0:	9b01      	ldr	r3, [sp, #4]
 80037e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d136      	bne.n	8003858 <_dtoa_r+0x810>
 80037ea:	9b01      	ldr	r3, [sp, #4]
 80037ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037f0:	0d1b      	lsrs	r3, r3, #20
 80037f2:	051b      	lsls	r3, r3, #20
 80037f4:	b12b      	cbz	r3, 8003802 <_dtoa_r+0x7ba>
 80037f6:	9b05      	ldr	r3, [sp, #20]
 80037f8:	3301      	adds	r3, #1
 80037fa:	9305      	str	r3, [sp, #20]
 80037fc:	f108 0801 	add.w	r8, r8, #1
 8003800:	2301      	movs	r3, #1
 8003802:	9307      	str	r3, [sp, #28]
 8003804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003806:	2b00      	cmp	r3, #0
 8003808:	d12a      	bne.n	8003860 <_dtoa_r+0x818>
 800380a:	2001      	movs	r0, #1
 800380c:	e030      	b.n	8003870 <_dtoa_r+0x828>
 800380e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003810:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003814:	e795      	b.n	8003742 <_dtoa_r+0x6fa>
 8003816:	9b07      	ldr	r3, [sp, #28]
 8003818:	f109 37ff 	add.w	r7, r9, #4294967295
 800381c:	42bb      	cmp	r3, r7
 800381e:	bfbf      	itttt	lt
 8003820:	9b07      	ldrlt	r3, [sp, #28]
 8003822:	9707      	strlt	r7, [sp, #28]
 8003824:	1afa      	sublt	r2, r7, r3
 8003826:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003828:	bfbb      	ittet	lt
 800382a:	189b      	addlt	r3, r3, r2
 800382c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800382e:	1bdf      	subge	r7, r3, r7
 8003830:	2700      	movlt	r7, #0
 8003832:	f1b9 0f00 	cmp.w	r9, #0
 8003836:	bfb5      	itete	lt
 8003838:	9b05      	ldrlt	r3, [sp, #20]
 800383a:	9d05      	ldrge	r5, [sp, #20]
 800383c:	eba3 0509 	sublt.w	r5, r3, r9
 8003840:	464b      	movge	r3, r9
 8003842:	bfb8      	it	lt
 8003844:	2300      	movlt	r3, #0
 8003846:	e77e      	b.n	8003746 <_dtoa_r+0x6fe>
 8003848:	9f07      	ldr	r7, [sp, #28]
 800384a:	9d05      	ldr	r5, [sp, #20]
 800384c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800384e:	e783      	b.n	8003758 <_dtoa_r+0x710>
 8003850:	9a07      	ldr	r2, [sp, #28]
 8003852:	e7ab      	b.n	80037ac <_dtoa_r+0x764>
 8003854:	2300      	movs	r3, #0
 8003856:	e7d4      	b.n	8003802 <_dtoa_r+0x7ba>
 8003858:	9b00      	ldr	r3, [sp, #0]
 800385a:	e7d2      	b.n	8003802 <_dtoa_r+0x7ba>
 800385c:	2300      	movs	r3, #0
 800385e:	9307      	str	r3, [sp, #28]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003866:	6918      	ldr	r0, [r3, #16]
 8003868:	f000 fc2b 	bl	80040c2 <__hi0bits>
 800386c:	f1c0 0020 	rsb	r0, r0, #32
 8003870:	4440      	add	r0, r8
 8003872:	f010 001f 	ands.w	r0, r0, #31
 8003876:	d047      	beq.n	8003908 <_dtoa_r+0x8c0>
 8003878:	f1c0 0320 	rsb	r3, r0, #32
 800387c:	2b04      	cmp	r3, #4
 800387e:	dd3b      	ble.n	80038f8 <_dtoa_r+0x8b0>
 8003880:	9b05      	ldr	r3, [sp, #20]
 8003882:	f1c0 001c 	rsb	r0, r0, #28
 8003886:	4403      	add	r3, r0
 8003888:	9305      	str	r3, [sp, #20]
 800388a:	4405      	add	r5, r0
 800388c:	4480      	add	r8, r0
 800388e:	9b05      	ldr	r3, [sp, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	dd05      	ble.n	80038a0 <_dtoa_r+0x858>
 8003894:	461a      	mov	r2, r3
 8003896:	9904      	ldr	r1, [sp, #16]
 8003898:	4620      	mov	r0, r4
 800389a:	f000 fd4d 	bl	8004338 <__lshift>
 800389e:	9004      	str	r0, [sp, #16]
 80038a0:	f1b8 0f00 	cmp.w	r8, #0
 80038a4:	dd05      	ble.n	80038b2 <_dtoa_r+0x86a>
 80038a6:	4639      	mov	r1, r7
 80038a8:	4642      	mov	r2, r8
 80038aa:	4620      	mov	r0, r4
 80038ac:	f000 fd44 	bl	8004338 <__lshift>
 80038b0:	4607      	mov	r7, r0
 80038b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038b4:	b353      	cbz	r3, 800390c <_dtoa_r+0x8c4>
 80038b6:	4639      	mov	r1, r7
 80038b8:	9804      	ldr	r0, [sp, #16]
 80038ba:	f000 fd91 	bl	80043e0 <__mcmp>
 80038be:	2800      	cmp	r0, #0
 80038c0:	da24      	bge.n	800390c <_dtoa_r+0x8c4>
 80038c2:	2300      	movs	r3, #0
 80038c4:	220a      	movs	r2, #10
 80038c6:	9904      	ldr	r1, [sp, #16]
 80038c8:	4620      	mov	r0, r4
 80038ca:	f000 fbbf 	bl	800404c <__multadd>
 80038ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038d0:	9004      	str	r0, [sp, #16]
 80038d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 814d 	beq.w	8003b76 <_dtoa_r+0xb2e>
 80038dc:	2300      	movs	r3, #0
 80038de:	4631      	mov	r1, r6
 80038e0:	220a      	movs	r2, #10
 80038e2:	4620      	mov	r0, r4
 80038e4:	f000 fbb2 	bl	800404c <__multadd>
 80038e8:	9b02      	ldr	r3, [sp, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	4606      	mov	r6, r0
 80038ee:	dc4f      	bgt.n	8003990 <_dtoa_r+0x948>
 80038f0:	9b06      	ldr	r3, [sp, #24]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	dd4c      	ble.n	8003990 <_dtoa_r+0x948>
 80038f6:	e011      	b.n	800391c <_dtoa_r+0x8d4>
 80038f8:	d0c9      	beq.n	800388e <_dtoa_r+0x846>
 80038fa:	9a05      	ldr	r2, [sp, #20]
 80038fc:	331c      	adds	r3, #28
 80038fe:	441a      	add	r2, r3
 8003900:	9205      	str	r2, [sp, #20]
 8003902:	441d      	add	r5, r3
 8003904:	4498      	add	r8, r3
 8003906:	e7c2      	b.n	800388e <_dtoa_r+0x846>
 8003908:	4603      	mov	r3, r0
 800390a:	e7f6      	b.n	80038fa <_dtoa_r+0x8b2>
 800390c:	f1b9 0f00 	cmp.w	r9, #0
 8003910:	dc38      	bgt.n	8003984 <_dtoa_r+0x93c>
 8003912:	9b06      	ldr	r3, [sp, #24]
 8003914:	2b02      	cmp	r3, #2
 8003916:	dd35      	ble.n	8003984 <_dtoa_r+0x93c>
 8003918:	f8cd 9008 	str.w	r9, [sp, #8]
 800391c:	9b02      	ldr	r3, [sp, #8]
 800391e:	b963      	cbnz	r3, 800393a <_dtoa_r+0x8f2>
 8003920:	4639      	mov	r1, r7
 8003922:	2205      	movs	r2, #5
 8003924:	4620      	mov	r0, r4
 8003926:	f000 fb91 	bl	800404c <__multadd>
 800392a:	4601      	mov	r1, r0
 800392c:	4607      	mov	r7, r0
 800392e:	9804      	ldr	r0, [sp, #16]
 8003930:	f000 fd56 	bl	80043e0 <__mcmp>
 8003934:	2800      	cmp	r0, #0
 8003936:	f73f adcc 	bgt.w	80034d2 <_dtoa_r+0x48a>
 800393a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800393c:	465d      	mov	r5, fp
 800393e:	ea6f 0a03 	mvn.w	sl, r3
 8003942:	f04f 0900 	mov.w	r9, #0
 8003946:	4639      	mov	r1, r7
 8003948:	4620      	mov	r0, r4
 800394a:	f000 fb68 	bl	800401e <_Bfree>
 800394e:	2e00      	cmp	r6, #0
 8003950:	f43f aeb7 	beq.w	80036c2 <_dtoa_r+0x67a>
 8003954:	f1b9 0f00 	cmp.w	r9, #0
 8003958:	d005      	beq.n	8003966 <_dtoa_r+0x91e>
 800395a:	45b1      	cmp	r9, r6
 800395c:	d003      	beq.n	8003966 <_dtoa_r+0x91e>
 800395e:	4649      	mov	r1, r9
 8003960:	4620      	mov	r0, r4
 8003962:	f000 fb5c 	bl	800401e <_Bfree>
 8003966:	4631      	mov	r1, r6
 8003968:	4620      	mov	r0, r4
 800396a:	f000 fb58 	bl	800401e <_Bfree>
 800396e:	e6a8      	b.n	80036c2 <_dtoa_r+0x67a>
 8003970:	2700      	movs	r7, #0
 8003972:	463e      	mov	r6, r7
 8003974:	e7e1      	b.n	800393a <_dtoa_r+0x8f2>
 8003976:	f8dd a020 	ldr.w	sl, [sp, #32]
 800397a:	463e      	mov	r6, r7
 800397c:	e5a9      	b.n	80034d2 <_dtoa_r+0x48a>
 800397e:	bf00      	nop
 8003980:	40240000 	.word	0x40240000
 8003984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003986:	f8cd 9008 	str.w	r9, [sp, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80fa 	beq.w	8003b84 <_dtoa_r+0xb3c>
 8003990:	2d00      	cmp	r5, #0
 8003992:	dd05      	ble.n	80039a0 <_dtoa_r+0x958>
 8003994:	4631      	mov	r1, r6
 8003996:	462a      	mov	r2, r5
 8003998:	4620      	mov	r0, r4
 800399a:	f000 fccd 	bl	8004338 <__lshift>
 800399e:	4606      	mov	r6, r0
 80039a0:	9b07      	ldr	r3, [sp, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04c      	beq.n	8003a40 <_dtoa_r+0x9f8>
 80039a6:	6871      	ldr	r1, [r6, #4]
 80039a8:	4620      	mov	r0, r4
 80039aa:	f000 fb04 	bl	8003fb6 <_Balloc>
 80039ae:	6932      	ldr	r2, [r6, #16]
 80039b0:	3202      	adds	r2, #2
 80039b2:	4605      	mov	r5, r0
 80039b4:	0092      	lsls	r2, r2, #2
 80039b6:	f106 010c 	add.w	r1, r6, #12
 80039ba:	300c      	adds	r0, #12
 80039bc:	f000 faf0 	bl	8003fa0 <memcpy>
 80039c0:	2201      	movs	r2, #1
 80039c2:	4629      	mov	r1, r5
 80039c4:	4620      	mov	r0, r4
 80039c6:	f000 fcb7 	bl	8004338 <__lshift>
 80039ca:	9b00      	ldr	r3, [sp, #0]
 80039cc:	f8cd b014 	str.w	fp, [sp, #20]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	46b1      	mov	r9, r6
 80039d6:	9307      	str	r3, [sp, #28]
 80039d8:	4606      	mov	r6, r0
 80039da:	4639      	mov	r1, r7
 80039dc:	9804      	ldr	r0, [sp, #16]
 80039de:	f7ff faa5 	bl	8002f2c <quorem>
 80039e2:	4649      	mov	r1, r9
 80039e4:	4605      	mov	r5, r0
 80039e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80039ea:	9804      	ldr	r0, [sp, #16]
 80039ec:	f000 fcf8 	bl	80043e0 <__mcmp>
 80039f0:	4632      	mov	r2, r6
 80039f2:	9000      	str	r0, [sp, #0]
 80039f4:	4639      	mov	r1, r7
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 fd0c 	bl	8004414 <__mdiff>
 80039fc:	68c3      	ldr	r3, [r0, #12]
 80039fe:	4602      	mov	r2, r0
 8003a00:	bb03      	cbnz	r3, 8003a44 <_dtoa_r+0x9fc>
 8003a02:	4601      	mov	r1, r0
 8003a04:	9008      	str	r0, [sp, #32]
 8003a06:	9804      	ldr	r0, [sp, #16]
 8003a08:	f000 fcea 	bl	80043e0 <__mcmp>
 8003a0c:	9a08      	ldr	r2, [sp, #32]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4611      	mov	r1, r2
 8003a12:	4620      	mov	r0, r4
 8003a14:	9308      	str	r3, [sp, #32]
 8003a16:	f000 fb02 	bl	800401e <_Bfree>
 8003a1a:	9b08      	ldr	r3, [sp, #32]
 8003a1c:	b9a3      	cbnz	r3, 8003a48 <_dtoa_r+0xa00>
 8003a1e:	9a06      	ldr	r2, [sp, #24]
 8003a20:	b992      	cbnz	r2, 8003a48 <_dtoa_r+0xa00>
 8003a22:	9a07      	ldr	r2, [sp, #28]
 8003a24:	b982      	cbnz	r2, 8003a48 <_dtoa_r+0xa00>
 8003a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003a2a:	d029      	beq.n	8003a80 <_dtoa_r+0xa38>
 8003a2c:	9b00      	ldr	r3, [sp, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	dd01      	ble.n	8003a36 <_dtoa_r+0x9ee>
 8003a32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003a36:	9b05      	ldr	r3, [sp, #20]
 8003a38:	1c5d      	adds	r5, r3, #1
 8003a3a:	f883 8000 	strb.w	r8, [r3]
 8003a3e:	e782      	b.n	8003946 <_dtoa_r+0x8fe>
 8003a40:	4630      	mov	r0, r6
 8003a42:	e7c2      	b.n	80039ca <_dtoa_r+0x982>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e7e3      	b.n	8003a10 <_dtoa_r+0x9c8>
 8003a48:	9a00      	ldr	r2, [sp, #0]
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	db04      	blt.n	8003a58 <_dtoa_r+0xa10>
 8003a4e:	d125      	bne.n	8003a9c <_dtoa_r+0xa54>
 8003a50:	9a06      	ldr	r2, [sp, #24]
 8003a52:	bb1a      	cbnz	r2, 8003a9c <_dtoa_r+0xa54>
 8003a54:	9a07      	ldr	r2, [sp, #28]
 8003a56:	bb0a      	cbnz	r2, 8003a9c <_dtoa_r+0xa54>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	ddec      	ble.n	8003a36 <_dtoa_r+0x9ee>
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	9904      	ldr	r1, [sp, #16]
 8003a60:	4620      	mov	r0, r4
 8003a62:	f000 fc69 	bl	8004338 <__lshift>
 8003a66:	4639      	mov	r1, r7
 8003a68:	9004      	str	r0, [sp, #16]
 8003a6a:	f000 fcb9 	bl	80043e0 <__mcmp>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	dc03      	bgt.n	8003a7a <_dtoa_r+0xa32>
 8003a72:	d1e0      	bne.n	8003a36 <_dtoa_r+0x9ee>
 8003a74:	f018 0f01 	tst.w	r8, #1
 8003a78:	d0dd      	beq.n	8003a36 <_dtoa_r+0x9ee>
 8003a7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003a7e:	d1d8      	bne.n	8003a32 <_dtoa_r+0x9ea>
 8003a80:	9b05      	ldr	r3, [sp, #20]
 8003a82:	9a05      	ldr	r2, [sp, #20]
 8003a84:	1c5d      	adds	r5, r3, #1
 8003a86:	2339      	movs	r3, #57	; 0x39
 8003a88:	7013      	strb	r3, [r2, #0]
 8003a8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a8e:	2b39      	cmp	r3, #57	; 0x39
 8003a90:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a94:	d04f      	beq.n	8003b36 <_dtoa_r+0xaee>
 8003a96:	3301      	adds	r3, #1
 8003a98:	7013      	strb	r3, [r2, #0]
 8003a9a:	e754      	b.n	8003946 <_dtoa_r+0x8fe>
 8003a9c:	9a05      	ldr	r2, [sp, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f102 0501 	add.w	r5, r2, #1
 8003aa4:	dd06      	ble.n	8003ab4 <_dtoa_r+0xa6c>
 8003aa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003aaa:	d0e9      	beq.n	8003a80 <_dtoa_r+0xa38>
 8003aac:	f108 0801 	add.w	r8, r8, #1
 8003ab0:	9b05      	ldr	r3, [sp, #20]
 8003ab2:	e7c2      	b.n	8003a3a <_dtoa_r+0x9f2>
 8003ab4:	9a02      	ldr	r2, [sp, #8]
 8003ab6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003aba:	eba5 030b 	sub.w	r3, r5, fp
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d021      	beq.n	8003b06 <_dtoa_r+0xabe>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	220a      	movs	r2, #10
 8003ac6:	9904      	ldr	r1, [sp, #16]
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f000 fabf 	bl	800404c <__multadd>
 8003ace:	45b1      	cmp	r9, r6
 8003ad0:	9004      	str	r0, [sp, #16]
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f04f 020a 	mov.w	r2, #10
 8003ada:	4649      	mov	r1, r9
 8003adc:	4620      	mov	r0, r4
 8003ade:	d105      	bne.n	8003aec <_dtoa_r+0xaa4>
 8003ae0:	f000 fab4 	bl	800404c <__multadd>
 8003ae4:	4681      	mov	r9, r0
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	9505      	str	r5, [sp, #20]
 8003aea:	e776      	b.n	80039da <_dtoa_r+0x992>
 8003aec:	f000 faae 	bl	800404c <__multadd>
 8003af0:	4631      	mov	r1, r6
 8003af2:	4681      	mov	r9, r0
 8003af4:	2300      	movs	r3, #0
 8003af6:	220a      	movs	r2, #10
 8003af8:	4620      	mov	r0, r4
 8003afa:	f000 faa7 	bl	800404c <__multadd>
 8003afe:	4606      	mov	r6, r0
 8003b00:	e7f2      	b.n	8003ae8 <_dtoa_r+0xaa0>
 8003b02:	f04f 0900 	mov.w	r9, #0
 8003b06:	2201      	movs	r2, #1
 8003b08:	9904      	ldr	r1, [sp, #16]
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fc14 	bl	8004338 <__lshift>
 8003b10:	4639      	mov	r1, r7
 8003b12:	9004      	str	r0, [sp, #16]
 8003b14:	f000 fc64 	bl	80043e0 <__mcmp>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	dcb6      	bgt.n	8003a8a <_dtoa_r+0xa42>
 8003b1c:	d102      	bne.n	8003b24 <_dtoa_r+0xadc>
 8003b1e:	f018 0f01 	tst.w	r8, #1
 8003b22:	d1b2      	bne.n	8003a8a <_dtoa_r+0xa42>
 8003b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8003b2e:	f47f af0a 	bne.w	8003946 <_dtoa_r+0x8fe>
 8003b32:	4615      	mov	r5, r2
 8003b34:	e7f6      	b.n	8003b24 <_dtoa_r+0xadc>
 8003b36:	4593      	cmp	fp, r2
 8003b38:	d105      	bne.n	8003b46 <_dtoa_r+0xafe>
 8003b3a:	2331      	movs	r3, #49	; 0x31
 8003b3c:	f10a 0a01 	add.w	sl, sl, #1
 8003b40:	f88b 3000 	strb.w	r3, [fp]
 8003b44:	e6ff      	b.n	8003946 <_dtoa_r+0x8fe>
 8003b46:	4615      	mov	r5, r2
 8003b48:	e79f      	b.n	8003a8a <_dtoa_r+0xa42>
 8003b4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003bb0 <_dtoa_r+0xb68>
 8003b4e:	e007      	b.n	8003b60 <_dtoa_r+0xb18>
 8003b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003bb4 <_dtoa_r+0xb6c>
 8003b56:	b11b      	cbz	r3, 8003b60 <_dtoa_r+0xb18>
 8003b58:	f10b 0308 	add.w	r3, fp, #8
 8003b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4658      	mov	r0, fp
 8003b62:	b017      	add	sp, #92	; 0x5c
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	9b06      	ldr	r3, [sp, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f77f ae35 	ble.w	80037da <_dtoa_r+0x792>
 8003b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b72:	9307      	str	r3, [sp, #28]
 8003b74:	e649      	b.n	800380a <_dtoa_r+0x7c2>
 8003b76:	9b02      	ldr	r3, [sp, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	dc03      	bgt.n	8003b84 <_dtoa_r+0xb3c>
 8003b7c:	9b06      	ldr	r3, [sp, #24]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	f73f aecc 	bgt.w	800391c <_dtoa_r+0x8d4>
 8003b84:	465d      	mov	r5, fp
 8003b86:	4639      	mov	r1, r7
 8003b88:	9804      	ldr	r0, [sp, #16]
 8003b8a:	f7ff f9cf 	bl	8002f2c <quorem>
 8003b8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003b92:	f805 8b01 	strb.w	r8, [r5], #1
 8003b96:	9a02      	ldr	r2, [sp, #8]
 8003b98:	eba5 030b 	sub.w	r3, r5, fp
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	ddb0      	ble.n	8003b02 <_dtoa_r+0xaba>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	220a      	movs	r2, #10
 8003ba4:	9904      	ldr	r1, [sp, #16]
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 fa50 	bl	800404c <__multadd>
 8003bac:	9004      	str	r0, [sp, #16]
 8003bae:	e7ea      	b.n	8003b86 <_dtoa_r+0xb3e>
 8003bb0:	08004a78 	.word	0x08004a78
 8003bb4:	08004a7a 	.word	0x08004a7a

08003bb8 <__sflush_r>:
 8003bb8:	898a      	ldrh	r2, [r1, #12]
 8003bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	0710      	lsls	r0, r2, #28
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	d458      	bmi.n	8003c78 <__sflush_r+0xc0>
 8003bc6:	684b      	ldr	r3, [r1, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dc05      	bgt.n	8003bd8 <__sflush_r+0x20>
 8003bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dc02      	bgt.n	8003bd8 <__sflush_r+0x20>
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	d0f9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003bde:	2300      	movs	r3, #0
 8003be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003be4:	682f      	ldr	r7, [r5, #0]
 8003be6:	6a21      	ldr	r1, [r4, #32]
 8003be8:	602b      	str	r3, [r5, #0]
 8003bea:	d032      	beq.n	8003c52 <__sflush_r+0x9a>
 8003bec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	075a      	lsls	r2, r3, #29
 8003bf2:	d505      	bpl.n	8003c00 <__sflush_r+0x48>
 8003bf4:	6863      	ldr	r3, [r4, #4]
 8003bf6:	1ac0      	subs	r0, r0, r3
 8003bf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bfa:	b10b      	cbz	r3, 8003c00 <__sflush_r+0x48>
 8003bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bfe:	1ac0      	subs	r0, r0, r3
 8003c00:	2300      	movs	r3, #0
 8003c02:	4602      	mov	r2, r0
 8003c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c06:	6a21      	ldr	r1, [r4, #32]
 8003c08:	4628      	mov	r0, r5
 8003c0a:	47b0      	blx	r6
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	d106      	bne.n	8003c20 <__sflush_r+0x68>
 8003c12:	6829      	ldr	r1, [r5, #0]
 8003c14:	291d      	cmp	r1, #29
 8003c16:	d848      	bhi.n	8003caa <__sflush_r+0xf2>
 8003c18:	4a29      	ldr	r2, [pc, #164]	; (8003cc0 <__sflush_r+0x108>)
 8003c1a:	40ca      	lsrs	r2, r1
 8003c1c:	07d6      	lsls	r6, r2, #31
 8003c1e:	d544      	bpl.n	8003caa <__sflush_r+0xf2>
 8003c20:	2200      	movs	r2, #0
 8003c22:	6062      	str	r2, [r4, #4]
 8003c24:	04d9      	lsls	r1, r3, #19
 8003c26:	6922      	ldr	r2, [r4, #16]
 8003c28:	6022      	str	r2, [r4, #0]
 8003c2a:	d504      	bpl.n	8003c36 <__sflush_r+0x7e>
 8003c2c:	1c42      	adds	r2, r0, #1
 8003c2e:	d101      	bne.n	8003c34 <__sflush_r+0x7c>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b903      	cbnz	r3, 8003c36 <__sflush_r+0x7e>
 8003c34:	6560      	str	r0, [r4, #84]	; 0x54
 8003c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c38:	602f      	str	r7, [r5, #0]
 8003c3a:	2900      	cmp	r1, #0
 8003c3c:	d0c9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c42:	4299      	cmp	r1, r3
 8003c44:	d002      	beq.n	8003c4c <__sflush_r+0x94>
 8003c46:	4628      	mov	r0, r5
 8003c48:	f000 fc9e 	bl	8004588 <_free_r>
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c50:	e7c0      	b.n	8003bd4 <__sflush_r+0x1c>
 8003c52:	2301      	movs	r3, #1
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b0      	blx	r6
 8003c58:	1c41      	adds	r1, r0, #1
 8003c5a:	d1c8      	bne.n	8003bee <__sflush_r+0x36>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0c5      	beq.n	8003bee <__sflush_r+0x36>
 8003c62:	2b1d      	cmp	r3, #29
 8003c64:	d001      	beq.n	8003c6a <__sflush_r+0xb2>
 8003c66:	2b16      	cmp	r3, #22
 8003c68:	d101      	bne.n	8003c6e <__sflush_r+0xb6>
 8003c6a:	602f      	str	r7, [r5, #0]
 8003c6c:	e7b1      	b.n	8003bd2 <__sflush_r+0x1a>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	e7ad      	b.n	8003bd4 <__sflush_r+0x1c>
 8003c78:	690f      	ldr	r7, [r1, #16]
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	d0a9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003c7e:	0793      	lsls	r3, r2, #30
 8003c80:	680e      	ldr	r6, [r1, #0]
 8003c82:	bf08      	it	eq
 8003c84:	694b      	ldreq	r3, [r1, #20]
 8003c86:	600f      	str	r7, [r1, #0]
 8003c88:	bf18      	it	ne
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	eba6 0807 	sub.w	r8, r6, r7
 8003c90:	608b      	str	r3, [r1, #8]
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	dd9c      	ble.n	8003bd2 <__sflush_r+0x1a>
 8003c98:	4643      	mov	r3, r8
 8003c9a:	463a      	mov	r2, r7
 8003c9c:	6a21      	ldr	r1, [r4, #32]
 8003c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b0      	blx	r6
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	dc06      	bgt.n	8003cb6 <__sflush_r+0xfe>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e78e      	b.n	8003bd4 <__sflush_r+0x1c>
 8003cb6:	4407      	add	r7, r0
 8003cb8:	eba8 0800 	sub.w	r8, r8, r0
 8003cbc:	e7e9      	b.n	8003c92 <__sflush_r+0xda>
 8003cbe:	bf00      	nop
 8003cc0:	20400001 	.word	0x20400001

08003cc4 <_fflush_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	690b      	ldr	r3, [r1, #16]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b1db      	cbz	r3, 8003d06 <_fflush_r+0x42>
 8003cce:	b118      	cbz	r0, 8003cd8 <_fflush_r+0x14>
 8003cd0:	6983      	ldr	r3, [r0, #24]
 8003cd2:	b90b      	cbnz	r3, 8003cd8 <_fflush_r+0x14>
 8003cd4:	f000 f860 	bl	8003d98 <__sinit>
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <_fflush_r+0x48>)
 8003cda:	429c      	cmp	r4, r3
 8003cdc:	d109      	bne.n	8003cf2 <_fflush_r+0x2e>
 8003cde:	686c      	ldr	r4, [r5, #4]
 8003ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce4:	b17b      	cbz	r3, 8003d06 <_fflush_r+0x42>
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	4628      	mov	r0, r5
 8003cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cee:	f7ff bf63 	b.w	8003bb8 <__sflush_r>
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <_fflush_r+0x4c>)
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	d101      	bne.n	8003cfc <_fflush_r+0x38>
 8003cf8:	68ac      	ldr	r4, [r5, #8]
 8003cfa:	e7f1      	b.n	8003ce0 <_fflush_r+0x1c>
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <_fflush_r+0x50>)
 8003cfe:	429c      	cmp	r4, r3
 8003d00:	bf08      	it	eq
 8003d02:	68ec      	ldreq	r4, [r5, #12]
 8003d04:	e7ec      	b.n	8003ce0 <_fflush_r+0x1c>
 8003d06:	2000      	movs	r0, #0
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08004aa8 	.word	0x08004aa8
 8003d10:	08004ac8 	.word	0x08004ac8
 8003d14:	08004a88 	.word	0x08004a88

08003d18 <std>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d22:	6083      	str	r3, [r0, #8]
 8003d24:	8181      	strh	r1, [r0, #12]
 8003d26:	6643      	str	r3, [r0, #100]	; 0x64
 8003d28:	81c2      	strh	r2, [r0, #14]
 8003d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d2e:	6183      	str	r3, [r0, #24]
 8003d30:	4619      	mov	r1, r3
 8003d32:	2208      	movs	r2, #8
 8003d34:	305c      	adds	r0, #92	; 0x5c
 8003d36:	f7fe fc83 	bl	8002640 <memset>
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <std+0x38>)
 8003d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <std+0x3c>)
 8003d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <std+0x40>)
 8003d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <std+0x44>)
 8003d48:	6224      	str	r4, [r4, #32]
 8003d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	bf00      	nop
 8003d50:	080046f9 	.word	0x080046f9
 8003d54:	0800471b 	.word	0x0800471b
 8003d58:	08004753 	.word	0x08004753
 8003d5c:	08004777 	.word	0x08004777

08003d60 <_cleanup_r>:
 8003d60:	4901      	ldr	r1, [pc, #4]	; (8003d68 <_cleanup_r+0x8>)
 8003d62:	f000 b885 	b.w	8003e70 <_fwalk_reent>
 8003d66:	bf00      	nop
 8003d68:	08003cc5 	.word	0x08003cc5

08003d6c <__sfmoreglue>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	1e4a      	subs	r2, r1, #1
 8003d70:	2568      	movs	r5, #104	; 0x68
 8003d72:	4355      	muls	r5, r2
 8003d74:	460e      	mov	r6, r1
 8003d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d7a:	f000 fc53 	bl	8004624 <_malloc_r>
 8003d7e:	4604      	mov	r4, r0
 8003d80:	b140      	cbz	r0, 8003d94 <__sfmoreglue+0x28>
 8003d82:	2100      	movs	r1, #0
 8003d84:	e9c0 1600 	strd	r1, r6, [r0]
 8003d88:	300c      	adds	r0, #12
 8003d8a:	60a0      	str	r0, [r4, #8]
 8003d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d90:	f7fe fc56 	bl	8002640 <memset>
 8003d94:	4620      	mov	r0, r4
 8003d96:	bd70      	pop	{r4, r5, r6, pc}

08003d98 <__sinit>:
 8003d98:	6983      	ldr	r3, [r0, #24]
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	bb33      	cbnz	r3, 8003dee <__sinit+0x56>
 8003da0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003da4:	6503      	str	r3, [r0, #80]	; 0x50
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <__sinit+0x58>)
 8003da8:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <__sinit+0x5c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6282      	str	r2, [r0, #40]	; 0x28
 8003dae:	4298      	cmp	r0, r3
 8003db0:	bf04      	itt	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	6183      	streq	r3, [r0, #24]
 8003db6:	f000 f81f 	bl	8003df8 <__sfp>
 8003dba:	6060      	str	r0, [r4, #4]
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f000 f81b 	bl	8003df8 <__sfp>
 8003dc2:	60a0      	str	r0, [r4, #8]
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f000 f817 	bl	8003df8 <__sfp>
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60e0      	str	r0, [r4, #12]
 8003dce:	2104      	movs	r1, #4
 8003dd0:	6860      	ldr	r0, [r4, #4]
 8003dd2:	f7ff ffa1 	bl	8003d18 <std>
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	2109      	movs	r1, #9
 8003dda:	68a0      	ldr	r0, [r4, #8]
 8003ddc:	f7ff ff9c 	bl	8003d18 <std>
 8003de0:	2202      	movs	r2, #2
 8003de2:	2112      	movs	r1, #18
 8003de4:	68e0      	ldr	r0, [r4, #12]
 8003de6:	f7ff ff97 	bl	8003d18 <std>
 8003dea:	2301      	movs	r3, #1
 8003dec:	61a3      	str	r3, [r4, #24]
 8003dee:	bd10      	pop	{r4, pc}
 8003df0:	08004a64 	.word	0x08004a64
 8003df4:	08003d61 	.word	0x08003d61

08003df8 <__sfp>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <__sfp+0x70>)
 8003dfc:	681e      	ldr	r6, [r3, #0]
 8003dfe:	69b3      	ldr	r3, [r6, #24]
 8003e00:	4607      	mov	r7, r0
 8003e02:	b913      	cbnz	r3, 8003e0a <__sfp+0x12>
 8003e04:	4630      	mov	r0, r6
 8003e06:	f7ff ffc7 	bl	8003d98 <__sinit>
 8003e0a:	3648      	adds	r6, #72	; 0x48
 8003e0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	d503      	bpl.n	8003e1c <__sfp+0x24>
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	b133      	cbz	r3, 8003e26 <__sfp+0x2e>
 8003e18:	6836      	ldr	r6, [r6, #0]
 8003e1a:	e7f7      	b.n	8003e0c <__sfp+0x14>
 8003e1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e20:	b16d      	cbz	r5, 8003e3e <__sfp+0x46>
 8003e22:	3468      	adds	r4, #104	; 0x68
 8003e24:	e7f4      	b.n	8003e10 <__sfp+0x18>
 8003e26:	2104      	movs	r1, #4
 8003e28:	4638      	mov	r0, r7
 8003e2a:	f7ff ff9f 	bl	8003d6c <__sfmoreglue>
 8003e2e:	6030      	str	r0, [r6, #0]
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d1f1      	bne.n	8003e18 <__sfp+0x20>
 8003e34:	230c      	movs	r3, #12
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4604      	mov	r4, r0
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <__sfp+0x74>)
 8003e40:	6665      	str	r5, [r4, #100]	; 0x64
 8003e42:	e9c4 5500 	strd	r5, r5, [r4]
 8003e46:	60a5      	str	r5, [r4, #8]
 8003e48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e50:	2208      	movs	r2, #8
 8003e52:	4629      	mov	r1, r5
 8003e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e58:	f7fe fbf2 	bl	8002640 <memset>
 8003e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e64:	e7e9      	b.n	8003e3a <__sfp+0x42>
 8003e66:	bf00      	nop
 8003e68:	08004a64 	.word	0x08004a64
 8003e6c:	ffff0001 	.word	0xffff0001

08003e70 <_fwalk_reent>:
 8003e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e74:	4680      	mov	r8, r0
 8003e76:	4689      	mov	r9, r1
 8003e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	b914      	cbnz	r4, 8003e86 <_fwalk_reent+0x16>
 8003e80:	4630      	mov	r0, r6
 8003e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003e8a:	3f01      	subs	r7, #1
 8003e8c:	d501      	bpl.n	8003e92 <_fwalk_reent+0x22>
 8003e8e:	6824      	ldr	r4, [r4, #0]
 8003e90:	e7f5      	b.n	8003e7e <_fwalk_reent+0xe>
 8003e92:	89ab      	ldrh	r3, [r5, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d907      	bls.n	8003ea8 <_fwalk_reent+0x38>
 8003e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	d003      	beq.n	8003ea8 <_fwalk_reent+0x38>
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	47c8      	blx	r9
 8003ea6:	4306      	orrs	r6, r0
 8003ea8:	3568      	adds	r5, #104	; 0x68
 8003eaa:	e7ee      	b.n	8003e8a <_fwalk_reent+0x1a>

08003eac <_localeconv_r>:
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <_localeconv_r+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a18      	ldr	r0, [r3, #32]
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <_localeconv_r+0x18>)
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	bf08      	it	eq
 8003eb8:	4618      	moveq	r0, r3
 8003eba:	30f0      	adds	r0, #240	; 0xf0
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000040 	.word	0x20000040
 8003ec4:	200000a4 	.word	0x200000a4

08003ec8 <__swhatbuf_r>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	460e      	mov	r6, r1
 8003ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	b096      	sub	sp, #88	; 0x58
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	da07      	bge.n	8003eea <__swhatbuf_r+0x22>
 8003eda:	2300      	movs	r3, #0
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	89b3      	ldrh	r3, [r6, #12]
 8003ee0:	061a      	lsls	r2, r3, #24
 8003ee2:	d410      	bmi.n	8003f06 <__swhatbuf_r+0x3e>
 8003ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee8:	e00e      	b.n	8003f08 <__swhatbuf_r+0x40>
 8003eea:	466a      	mov	r2, sp
 8003eec:	f000 fc6a 	bl	80047c4 <_fstat_r>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	dbf2      	blt.n	8003eda <__swhatbuf_r+0x12>
 8003ef4:	9a01      	ldr	r2, [sp, #4]
 8003ef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003efa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003efe:	425a      	negs	r2, r3
 8003f00:	415a      	adcs	r2, r3
 8003f02:	602a      	str	r2, [r5, #0]
 8003f04:	e7ee      	b.n	8003ee4 <__swhatbuf_r+0x1c>
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	2000      	movs	r0, #0
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	b016      	add	sp, #88	; 0x58
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}

08003f10 <__smakebuf_r>:
 8003f10:	898b      	ldrh	r3, [r1, #12]
 8003f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f14:	079d      	lsls	r5, r3, #30
 8003f16:	4606      	mov	r6, r0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	d507      	bpl.n	8003f2c <__smakebuf_r+0x1c>
 8003f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	6123      	str	r3, [r4, #16]
 8003f24:	2301      	movs	r3, #1
 8003f26:	6163      	str	r3, [r4, #20]
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	ab01      	add	r3, sp, #4
 8003f2e:	466a      	mov	r2, sp
 8003f30:	f7ff ffca 	bl	8003ec8 <__swhatbuf_r>
 8003f34:	9900      	ldr	r1, [sp, #0]
 8003f36:	4605      	mov	r5, r0
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f000 fb73 	bl	8004624 <_malloc_r>
 8003f3e:	b948      	cbnz	r0, 8003f54 <__smakebuf_r+0x44>
 8003f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f44:	059a      	lsls	r2, r3, #22
 8003f46:	d4ef      	bmi.n	8003f28 <__smakebuf_r+0x18>
 8003f48:	f023 0303 	bic.w	r3, r3, #3
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	e7e3      	b.n	8003f1c <__smakebuf_r+0xc>
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <__smakebuf_r+0x7c>)
 8003f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	6020      	str	r0, [r4, #0]
 8003f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	9b00      	ldr	r3, [sp, #0]
 8003f64:	6163      	str	r3, [r4, #20]
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	6120      	str	r0, [r4, #16]
 8003f6a:	b15b      	cbz	r3, 8003f84 <__smakebuf_r+0x74>
 8003f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f70:	4630      	mov	r0, r6
 8003f72:	f000 fc39 	bl	80047e8 <_isatty_r>
 8003f76:	b128      	cbz	r0, 8003f84 <__smakebuf_r+0x74>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	81a3      	strh	r3, [r4, #12]
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	431d      	orrs	r5, r3
 8003f88:	81a5      	strh	r5, [r4, #12]
 8003f8a:	e7cd      	b.n	8003f28 <__smakebuf_r+0x18>
 8003f8c:	08003d61 	.word	0x08003d61

08003f90 <malloc>:
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <malloc+0xc>)
 8003f92:	4601      	mov	r1, r0
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	f000 bb45 	b.w	8004624 <_malloc_r>
 8003f9a:	bf00      	nop
 8003f9c:	20000040 	.word	0x20000040

08003fa0 <memcpy>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	1e43      	subs	r3, r0, #1
 8003fa4:	440a      	add	r2, r1
 8003fa6:	4291      	cmp	r1, r2
 8003fa8:	d100      	bne.n	8003fac <memcpy+0xc>
 8003faa:	bd10      	pop	{r4, pc}
 8003fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fb4:	e7f7      	b.n	8003fa6 <memcpy+0x6>

08003fb6 <_Balloc>:
 8003fb6:	b570      	push	{r4, r5, r6, lr}
 8003fb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003fba:	4604      	mov	r4, r0
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	b93d      	cbnz	r5, 8003fd0 <_Balloc+0x1a>
 8003fc0:	2010      	movs	r0, #16
 8003fc2:	f7ff ffe5 	bl	8003f90 <malloc>
 8003fc6:	6260      	str	r0, [r4, #36]	; 0x24
 8003fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fcc:	6005      	str	r5, [r0, #0]
 8003fce:	60c5      	str	r5, [r0, #12]
 8003fd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003fd2:	68eb      	ldr	r3, [r5, #12]
 8003fd4:	b183      	cbz	r3, 8003ff8 <_Balloc+0x42>
 8003fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003fde:	b9b8      	cbnz	r0, 8004010 <_Balloc+0x5a>
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f506 	lsl.w	r5, r1, r6
 8003fe6:	1d6a      	adds	r2, r5, #5
 8003fe8:	0092      	lsls	r2, r2, #2
 8003fea:	4620      	mov	r0, r4
 8003fec:	f000 fabe 	bl	800456c <_calloc_r>
 8003ff0:	b160      	cbz	r0, 800400c <_Balloc+0x56>
 8003ff2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003ff6:	e00e      	b.n	8004016 <_Balloc+0x60>
 8003ff8:	2221      	movs	r2, #33	; 0x21
 8003ffa:	2104      	movs	r1, #4
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f000 fab5 	bl	800456c <_calloc_r>
 8004002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004004:	60e8      	str	r0, [r5, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e4      	bne.n	8003fd6 <_Balloc+0x20>
 800400c:	2000      	movs	r0, #0
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	6802      	ldr	r2, [r0, #0]
 8004012:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004016:	2300      	movs	r3, #0
 8004018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800401c:	e7f7      	b.n	800400e <_Balloc+0x58>

0800401e <_Bfree>:
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004022:	4606      	mov	r6, r0
 8004024:	460d      	mov	r5, r1
 8004026:	b93c      	cbnz	r4, 8004038 <_Bfree+0x1a>
 8004028:	2010      	movs	r0, #16
 800402a:	f7ff ffb1 	bl	8003f90 <malloc>
 800402e:	6270      	str	r0, [r6, #36]	; 0x24
 8004030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004034:	6004      	str	r4, [r0, #0]
 8004036:	60c4      	str	r4, [r0, #12]
 8004038:	b13d      	cbz	r5, 800404a <_Bfree+0x2c>
 800403a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800403c:	686a      	ldr	r2, [r5, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004044:	6029      	str	r1, [r5, #0]
 8004046:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800404a:	bd70      	pop	{r4, r5, r6, pc}

0800404c <__multadd>:
 800404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004050:	690d      	ldr	r5, [r1, #16]
 8004052:	461f      	mov	r7, r3
 8004054:	4606      	mov	r6, r0
 8004056:	460c      	mov	r4, r1
 8004058:	f101 0c14 	add.w	ip, r1, #20
 800405c:	2300      	movs	r3, #0
 800405e:	f8dc 0000 	ldr.w	r0, [ip]
 8004062:	b281      	uxth	r1, r0
 8004064:	fb02 7101 	mla	r1, r2, r1, r7
 8004068:	0c0f      	lsrs	r7, r1, #16
 800406a:	0c00      	lsrs	r0, r0, #16
 800406c:	fb02 7000 	mla	r0, r2, r0, r7
 8004070:	b289      	uxth	r1, r1
 8004072:	3301      	adds	r3, #1
 8004074:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004078:	429d      	cmp	r5, r3
 800407a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800407e:	f84c 1b04 	str.w	r1, [ip], #4
 8004082:	dcec      	bgt.n	800405e <__multadd+0x12>
 8004084:	b1d7      	cbz	r7, 80040bc <__multadd+0x70>
 8004086:	68a3      	ldr	r3, [r4, #8]
 8004088:	42ab      	cmp	r3, r5
 800408a:	dc12      	bgt.n	80040b2 <__multadd+0x66>
 800408c:	6861      	ldr	r1, [r4, #4]
 800408e:	4630      	mov	r0, r6
 8004090:	3101      	adds	r1, #1
 8004092:	f7ff ff90 	bl	8003fb6 <_Balloc>
 8004096:	6922      	ldr	r2, [r4, #16]
 8004098:	3202      	adds	r2, #2
 800409a:	f104 010c 	add.w	r1, r4, #12
 800409e:	4680      	mov	r8, r0
 80040a0:	0092      	lsls	r2, r2, #2
 80040a2:	300c      	adds	r0, #12
 80040a4:	f7ff ff7c 	bl	8003fa0 <memcpy>
 80040a8:	4621      	mov	r1, r4
 80040aa:	4630      	mov	r0, r6
 80040ac:	f7ff ffb7 	bl	800401e <_Bfree>
 80040b0:	4644      	mov	r4, r8
 80040b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040b6:	3501      	adds	r5, #1
 80040b8:	615f      	str	r7, [r3, #20]
 80040ba:	6125      	str	r5, [r4, #16]
 80040bc:	4620      	mov	r0, r4
 80040be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040c2 <__hi0bits>:
 80040c2:	0c02      	lsrs	r2, r0, #16
 80040c4:	0412      	lsls	r2, r2, #16
 80040c6:	4603      	mov	r3, r0
 80040c8:	b9b2      	cbnz	r2, 80040f8 <__hi0bits+0x36>
 80040ca:	0403      	lsls	r3, r0, #16
 80040cc:	2010      	movs	r0, #16
 80040ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80040d2:	bf04      	itt	eq
 80040d4:	021b      	lsleq	r3, r3, #8
 80040d6:	3008      	addeq	r0, #8
 80040d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80040dc:	bf04      	itt	eq
 80040de:	011b      	lsleq	r3, r3, #4
 80040e0:	3004      	addeq	r0, #4
 80040e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80040e6:	bf04      	itt	eq
 80040e8:	009b      	lsleq	r3, r3, #2
 80040ea:	3002      	addeq	r0, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db06      	blt.n	80040fe <__hi0bits+0x3c>
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	d503      	bpl.n	80040fc <__hi0bits+0x3a>
 80040f4:	3001      	adds	r0, #1
 80040f6:	4770      	bx	lr
 80040f8:	2000      	movs	r0, #0
 80040fa:	e7e8      	b.n	80040ce <__hi0bits+0xc>
 80040fc:	2020      	movs	r0, #32
 80040fe:	4770      	bx	lr

08004100 <__lo0bits>:
 8004100:	6803      	ldr	r3, [r0, #0]
 8004102:	f013 0207 	ands.w	r2, r3, #7
 8004106:	4601      	mov	r1, r0
 8004108:	d00b      	beq.n	8004122 <__lo0bits+0x22>
 800410a:	07da      	lsls	r2, r3, #31
 800410c:	d423      	bmi.n	8004156 <__lo0bits+0x56>
 800410e:	0798      	lsls	r0, r3, #30
 8004110:	bf49      	itett	mi
 8004112:	085b      	lsrmi	r3, r3, #1
 8004114:	089b      	lsrpl	r3, r3, #2
 8004116:	2001      	movmi	r0, #1
 8004118:	600b      	strmi	r3, [r1, #0]
 800411a:	bf5c      	itt	pl
 800411c:	600b      	strpl	r3, [r1, #0]
 800411e:	2002      	movpl	r0, #2
 8004120:	4770      	bx	lr
 8004122:	b298      	uxth	r0, r3
 8004124:	b9a8      	cbnz	r0, 8004152 <__lo0bits+0x52>
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	2010      	movs	r0, #16
 800412a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800412e:	bf04      	itt	eq
 8004130:	0a1b      	lsreq	r3, r3, #8
 8004132:	3008      	addeq	r0, #8
 8004134:	071a      	lsls	r2, r3, #28
 8004136:	bf04      	itt	eq
 8004138:	091b      	lsreq	r3, r3, #4
 800413a:	3004      	addeq	r0, #4
 800413c:	079a      	lsls	r2, r3, #30
 800413e:	bf04      	itt	eq
 8004140:	089b      	lsreq	r3, r3, #2
 8004142:	3002      	addeq	r0, #2
 8004144:	07da      	lsls	r2, r3, #31
 8004146:	d402      	bmi.n	800414e <__lo0bits+0x4e>
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	d006      	beq.n	800415a <__lo0bits+0x5a>
 800414c:	3001      	adds	r0, #1
 800414e:	600b      	str	r3, [r1, #0]
 8004150:	4770      	bx	lr
 8004152:	4610      	mov	r0, r2
 8004154:	e7e9      	b.n	800412a <__lo0bits+0x2a>
 8004156:	2000      	movs	r0, #0
 8004158:	4770      	bx	lr
 800415a:	2020      	movs	r0, #32
 800415c:	4770      	bx	lr

0800415e <__i2b>:
 800415e:	b510      	push	{r4, lr}
 8004160:	460c      	mov	r4, r1
 8004162:	2101      	movs	r1, #1
 8004164:	f7ff ff27 	bl	8003fb6 <_Balloc>
 8004168:	2201      	movs	r2, #1
 800416a:	6144      	str	r4, [r0, #20]
 800416c:	6102      	str	r2, [r0, #16]
 800416e:	bd10      	pop	{r4, pc}

08004170 <__multiply>:
 8004170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	4614      	mov	r4, r2
 8004176:	690a      	ldr	r2, [r1, #16]
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	429a      	cmp	r2, r3
 800417c:	bfb8      	it	lt
 800417e:	460b      	movlt	r3, r1
 8004180:	4688      	mov	r8, r1
 8004182:	bfbc      	itt	lt
 8004184:	46a0      	movlt	r8, r4
 8004186:	461c      	movlt	r4, r3
 8004188:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800418c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004190:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004194:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004198:	eb07 0609 	add.w	r6, r7, r9
 800419c:	42b3      	cmp	r3, r6
 800419e:	bfb8      	it	lt
 80041a0:	3101      	addlt	r1, #1
 80041a2:	f7ff ff08 	bl	8003fb6 <_Balloc>
 80041a6:	f100 0514 	add.w	r5, r0, #20
 80041aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80041ae:	462b      	mov	r3, r5
 80041b0:	2200      	movs	r2, #0
 80041b2:	4573      	cmp	r3, lr
 80041b4:	d316      	bcc.n	80041e4 <__multiply+0x74>
 80041b6:	f104 0214 	add.w	r2, r4, #20
 80041ba:	f108 0114 	add.w	r1, r8, #20
 80041be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80041c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	9b00      	ldr	r3, [sp, #0]
 80041ca:	9201      	str	r2, [sp, #4]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d80c      	bhi.n	80041ea <__multiply+0x7a>
 80041d0:	2e00      	cmp	r6, #0
 80041d2:	dd03      	ble.n	80041dc <__multiply+0x6c>
 80041d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05d      	beq.n	8004298 <__multiply+0x128>
 80041dc:	6106      	str	r6, [r0, #16]
 80041de:	b003      	add	sp, #12
 80041e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e4:	f843 2b04 	str.w	r2, [r3], #4
 80041e8:	e7e3      	b.n	80041b2 <__multiply+0x42>
 80041ea:	f8b2 b000 	ldrh.w	fp, [r2]
 80041ee:	f1bb 0f00 	cmp.w	fp, #0
 80041f2:	d023      	beq.n	800423c <__multiply+0xcc>
 80041f4:	4689      	mov	r9, r1
 80041f6:	46ac      	mov	ip, r5
 80041f8:	f04f 0800 	mov.w	r8, #0
 80041fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8004200:	f8dc a000 	ldr.w	sl, [ip]
 8004204:	b2a3      	uxth	r3, r4
 8004206:	fa1f fa8a 	uxth.w	sl, sl
 800420a:	fb0b a303 	mla	r3, fp, r3, sl
 800420e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004212:	f8dc 4000 	ldr.w	r4, [ip]
 8004216:	4443      	add	r3, r8
 8004218:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800421c:	fb0b 840a 	mla	r4, fp, sl, r8
 8004220:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004224:	46e2      	mov	sl, ip
 8004226:	b29b      	uxth	r3, r3
 8004228:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800422c:	454f      	cmp	r7, r9
 800422e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004232:	f84a 3b04 	str.w	r3, [sl], #4
 8004236:	d82b      	bhi.n	8004290 <__multiply+0x120>
 8004238:	f8cc 8004 	str.w	r8, [ip, #4]
 800423c:	9b01      	ldr	r3, [sp, #4]
 800423e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004242:	3204      	adds	r2, #4
 8004244:	f1ba 0f00 	cmp.w	sl, #0
 8004248:	d020      	beq.n	800428c <__multiply+0x11c>
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	4689      	mov	r9, r1
 800424e:	46a8      	mov	r8, r5
 8004250:	f04f 0b00 	mov.w	fp, #0
 8004254:	f8b9 c000 	ldrh.w	ip, [r9]
 8004258:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800425c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004260:	445c      	add	r4, fp
 8004262:	46c4      	mov	ip, r8
 8004264:	b29b      	uxth	r3, r3
 8004266:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800426a:	f84c 3b04 	str.w	r3, [ip], #4
 800426e:	f859 3b04 	ldr.w	r3, [r9], #4
 8004272:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	fb0a b303 	mla	r3, sl, r3, fp
 800427c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004280:	454f      	cmp	r7, r9
 8004282:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004286:	d805      	bhi.n	8004294 <__multiply+0x124>
 8004288:	f8c8 3004 	str.w	r3, [r8, #4]
 800428c:	3504      	adds	r5, #4
 800428e:	e79b      	b.n	80041c8 <__multiply+0x58>
 8004290:	46d4      	mov	ip, sl
 8004292:	e7b3      	b.n	80041fc <__multiply+0x8c>
 8004294:	46e0      	mov	r8, ip
 8004296:	e7dd      	b.n	8004254 <__multiply+0xe4>
 8004298:	3e01      	subs	r6, #1
 800429a:	e799      	b.n	80041d0 <__multiply+0x60>

0800429c <__pow5mult>:
 800429c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a0:	4615      	mov	r5, r2
 80042a2:	f012 0203 	ands.w	r2, r2, #3
 80042a6:	4606      	mov	r6, r0
 80042a8:	460f      	mov	r7, r1
 80042aa:	d007      	beq.n	80042bc <__pow5mult+0x20>
 80042ac:	3a01      	subs	r2, #1
 80042ae:	4c21      	ldr	r4, [pc, #132]	; (8004334 <__pow5mult+0x98>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80042b6:	f7ff fec9 	bl	800404c <__multadd>
 80042ba:	4607      	mov	r7, r0
 80042bc:	10ad      	asrs	r5, r5, #2
 80042be:	d035      	beq.n	800432c <__pow5mult+0x90>
 80042c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80042c2:	b93c      	cbnz	r4, 80042d4 <__pow5mult+0x38>
 80042c4:	2010      	movs	r0, #16
 80042c6:	f7ff fe63 	bl	8003f90 <malloc>
 80042ca:	6270      	str	r0, [r6, #36]	; 0x24
 80042cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042d0:	6004      	str	r4, [r0, #0]
 80042d2:	60c4      	str	r4, [r0, #12]
 80042d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80042d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042dc:	b94c      	cbnz	r4, 80042f2 <__pow5mult+0x56>
 80042de:	f240 2171 	movw	r1, #625	; 0x271
 80042e2:	4630      	mov	r0, r6
 80042e4:	f7ff ff3b 	bl	800415e <__i2b>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80042ee:	4604      	mov	r4, r0
 80042f0:	6003      	str	r3, [r0, #0]
 80042f2:	f04f 0800 	mov.w	r8, #0
 80042f6:	07eb      	lsls	r3, r5, #31
 80042f8:	d50a      	bpl.n	8004310 <__pow5mult+0x74>
 80042fa:	4639      	mov	r1, r7
 80042fc:	4622      	mov	r2, r4
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff ff36 	bl	8004170 <__multiply>
 8004304:	4639      	mov	r1, r7
 8004306:	4681      	mov	r9, r0
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff fe88 	bl	800401e <_Bfree>
 800430e:	464f      	mov	r7, r9
 8004310:	106d      	asrs	r5, r5, #1
 8004312:	d00b      	beq.n	800432c <__pow5mult+0x90>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	b938      	cbnz	r0, 8004328 <__pow5mult+0x8c>
 8004318:	4622      	mov	r2, r4
 800431a:	4621      	mov	r1, r4
 800431c:	4630      	mov	r0, r6
 800431e:	f7ff ff27 	bl	8004170 <__multiply>
 8004322:	6020      	str	r0, [r4, #0]
 8004324:	f8c0 8000 	str.w	r8, [r0]
 8004328:	4604      	mov	r4, r0
 800432a:	e7e4      	b.n	80042f6 <__pow5mult+0x5a>
 800432c:	4638      	mov	r0, r7
 800432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004332:	bf00      	nop
 8004334:	08004bd8 	.word	0x08004bd8

08004338 <__lshift>:
 8004338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800433c:	460c      	mov	r4, r1
 800433e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	6849      	ldr	r1, [r1, #4]
 8004346:	eb0a 0903 	add.w	r9, sl, r3
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	4607      	mov	r7, r0
 800434e:	4616      	mov	r6, r2
 8004350:	f109 0501 	add.w	r5, r9, #1
 8004354:	42ab      	cmp	r3, r5
 8004356:	db32      	blt.n	80043be <__lshift+0x86>
 8004358:	4638      	mov	r0, r7
 800435a:	f7ff fe2c 	bl	8003fb6 <_Balloc>
 800435e:	2300      	movs	r3, #0
 8004360:	4680      	mov	r8, r0
 8004362:	f100 0114 	add.w	r1, r0, #20
 8004366:	461a      	mov	r2, r3
 8004368:	4553      	cmp	r3, sl
 800436a:	db2b      	blt.n	80043c4 <__lshift+0x8c>
 800436c:	6920      	ldr	r0, [r4, #16]
 800436e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004372:	f104 0314 	add.w	r3, r4, #20
 8004376:	f016 021f 	ands.w	r2, r6, #31
 800437a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800437e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004382:	d025      	beq.n	80043d0 <__lshift+0x98>
 8004384:	f1c2 0e20 	rsb	lr, r2, #32
 8004388:	2000      	movs	r0, #0
 800438a:	681e      	ldr	r6, [r3, #0]
 800438c:	468a      	mov	sl, r1
 800438e:	4096      	lsls	r6, r2
 8004390:	4330      	orrs	r0, r6
 8004392:	f84a 0b04 	str.w	r0, [sl], #4
 8004396:	f853 0b04 	ldr.w	r0, [r3], #4
 800439a:	459c      	cmp	ip, r3
 800439c:	fa20 f00e 	lsr.w	r0, r0, lr
 80043a0:	d814      	bhi.n	80043cc <__lshift+0x94>
 80043a2:	6048      	str	r0, [r1, #4]
 80043a4:	b108      	cbz	r0, 80043aa <__lshift+0x72>
 80043a6:	f109 0502 	add.w	r5, r9, #2
 80043aa:	3d01      	subs	r5, #1
 80043ac:	4638      	mov	r0, r7
 80043ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80043b2:	4621      	mov	r1, r4
 80043b4:	f7ff fe33 	bl	800401e <_Bfree>
 80043b8:	4640      	mov	r0, r8
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043be:	3101      	adds	r1, #1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	e7c7      	b.n	8004354 <__lshift+0x1c>
 80043c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043c8:	3301      	adds	r3, #1
 80043ca:	e7cd      	b.n	8004368 <__lshift+0x30>
 80043cc:	4651      	mov	r1, sl
 80043ce:	e7dc      	b.n	800438a <__lshift+0x52>
 80043d0:	3904      	subs	r1, #4
 80043d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80043da:	459c      	cmp	ip, r3
 80043dc:	d8f9      	bhi.n	80043d2 <__lshift+0x9a>
 80043de:	e7e4      	b.n	80043aa <__lshift+0x72>

080043e0 <__mcmp>:
 80043e0:	6903      	ldr	r3, [r0, #16]
 80043e2:	690a      	ldr	r2, [r1, #16]
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	b530      	push	{r4, r5, lr}
 80043e8:	d10c      	bne.n	8004404 <__mcmp+0x24>
 80043ea:	0092      	lsls	r2, r2, #2
 80043ec:	3014      	adds	r0, #20
 80043ee:	3114      	adds	r1, #20
 80043f0:	1884      	adds	r4, r0, r2
 80043f2:	4411      	add	r1, r2
 80043f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043fc:	4295      	cmp	r5, r2
 80043fe:	d003      	beq.n	8004408 <__mcmp+0x28>
 8004400:	d305      	bcc.n	800440e <__mcmp+0x2e>
 8004402:	2301      	movs	r3, #1
 8004404:	4618      	mov	r0, r3
 8004406:	bd30      	pop	{r4, r5, pc}
 8004408:	42a0      	cmp	r0, r4
 800440a:	d3f3      	bcc.n	80043f4 <__mcmp+0x14>
 800440c:	e7fa      	b.n	8004404 <__mcmp+0x24>
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e7f7      	b.n	8004404 <__mcmp+0x24>

08004414 <__mdiff>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	460d      	mov	r5, r1
 800441a:	4607      	mov	r7, r0
 800441c:	4611      	mov	r1, r2
 800441e:	4628      	mov	r0, r5
 8004420:	4614      	mov	r4, r2
 8004422:	f7ff ffdd 	bl	80043e0 <__mcmp>
 8004426:	1e06      	subs	r6, r0, #0
 8004428:	d108      	bne.n	800443c <__mdiff+0x28>
 800442a:	4631      	mov	r1, r6
 800442c:	4638      	mov	r0, r7
 800442e:	f7ff fdc2 	bl	8003fb6 <_Balloc>
 8004432:	2301      	movs	r3, #1
 8004434:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	bfa4      	itt	ge
 800443e:	4623      	movge	r3, r4
 8004440:	462c      	movge	r4, r5
 8004442:	4638      	mov	r0, r7
 8004444:	6861      	ldr	r1, [r4, #4]
 8004446:	bfa6      	itte	ge
 8004448:	461d      	movge	r5, r3
 800444a:	2600      	movge	r6, #0
 800444c:	2601      	movlt	r6, #1
 800444e:	f7ff fdb2 	bl	8003fb6 <_Balloc>
 8004452:	692b      	ldr	r3, [r5, #16]
 8004454:	60c6      	str	r6, [r0, #12]
 8004456:	6926      	ldr	r6, [r4, #16]
 8004458:	f105 0914 	add.w	r9, r5, #20
 800445c:	f104 0214 	add.w	r2, r4, #20
 8004460:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004464:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004468:	f100 0514 	add.w	r5, r0, #20
 800446c:	f04f 0e00 	mov.w	lr, #0
 8004470:	f852 ab04 	ldr.w	sl, [r2], #4
 8004474:	f859 4b04 	ldr.w	r4, [r9], #4
 8004478:	fa1e f18a 	uxtah	r1, lr, sl
 800447c:	b2a3      	uxth	r3, r4
 800447e:	1ac9      	subs	r1, r1, r3
 8004480:	0c23      	lsrs	r3, r4, #16
 8004482:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004486:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800448a:	b289      	uxth	r1, r1
 800448c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004490:	45c8      	cmp	r8, r9
 8004492:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004496:	4694      	mov	ip, r2
 8004498:	f845 3b04 	str.w	r3, [r5], #4
 800449c:	d8e8      	bhi.n	8004470 <__mdiff+0x5c>
 800449e:	45bc      	cmp	ip, r7
 80044a0:	d304      	bcc.n	80044ac <__mdiff+0x98>
 80044a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044a6:	b183      	cbz	r3, 80044ca <__mdiff+0xb6>
 80044a8:	6106      	str	r6, [r0, #16]
 80044aa:	e7c5      	b.n	8004438 <__mdiff+0x24>
 80044ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80044b0:	fa1e f381 	uxtah	r3, lr, r1
 80044b4:	141a      	asrs	r2, r3, #16
 80044b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80044c4:	f845 3b04 	str.w	r3, [r5], #4
 80044c8:	e7e9      	b.n	800449e <__mdiff+0x8a>
 80044ca:	3e01      	subs	r6, #1
 80044cc:	e7e9      	b.n	80044a2 <__mdiff+0x8e>

080044ce <__d2b>:
 80044ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80044d2:	460e      	mov	r6, r1
 80044d4:	2101      	movs	r1, #1
 80044d6:	ec59 8b10 	vmov	r8, r9, d0
 80044da:	4615      	mov	r5, r2
 80044dc:	f7ff fd6b 	bl	8003fb6 <_Balloc>
 80044e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80044e4:	4607      	mov	r7, r0
 80044e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044ea:	bb34      	cbnz	r4, 800453a <__d2b+0x6c>
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	f1b8 0300 	subs.w	r3, r8, #0
 80044f2:	d027      	beq.n	8004544 <__d2b+0x76>
 80044f4:	a802      	add	r0, sp, #8
 80044f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80044fa:	f7ff fe01 	bl	8004100 <__lo0bits>
 80044fe:	9900      	ldr	r1, [sp, #0]
 8004500:	b1f0      	cbz	r0, 8004540 <__d2b+0x72>
 8004502:	9a01      	ldr	r2, [sp, #4]
 8004504:	f1c0 0320 	rsb	r3, r0, #32
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	430b      	orrs	r3, r1
 800450e:	40c2      	lsrs	r2, r0
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	9201      	str	r2, [sp, #4]
 8004514:	9b01      	ldr	r3, [sp, #4]
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2102      	movne	r1, #2
 800451e:	2101      	moveq	r1, #1
 8004520:	6139      	str	r1, [r7, #16]
 8004522:	b1c4      	cbz	r4, 8004556 <__d2b+0x88>
 8004524:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004528:	4404      	add	r4, r0
 800452a:	6034      	str	r4, [r6, #0]
 800452c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004530:	6028      	str	r0, [r5, #0]
 8004532:	4638      	mov	r0, r7
 8004534:	b003      	add	sp, #12
 8004536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800453a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800453e:	e7d5      	b.n	80044ec <__d2b+0x1e>
 8004540:	6179      	str	r1, [r7, #20]
 8004542:	e7e7      	b.n	8004514 <__d2b+0x46>
 8004544:	a801      	add	r0, sp, #4
 8004546:	f7ff fddb 	bl	8004100 <__lo0bits>
 800454a:	9b01      	ldr	r3, [sp, #4]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	2101      	movs	r1, #1
 8004550:	6139      	str	r1, [r7, #16]
 8004552:	3020      	adds	r0, #32
 8004554:	e7e5      	b.n	8004522 <__d2b+0x54>
 8004556:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800455a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800455e:	6030      	str	r0, [r6, #0]
 8004560:	6918      	ldr	r0, [r3, #16]
 8004562:	f7ff fdae 	bl	80040c2 <__hi0bits>
 8004566:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800456a:	e7e1      	b.n	8004530 <__d2b+0x62>

0800456c <_calloc_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	fb02 f401 	mul.w	r4, r2, r1
 8004572:	4621      	mov	r1, r4
 8004574:	f000 f856 	bl	8004624 <_malloc_r>
 8004578:	4605      	mov	r5, r0
 800457a:	b118      	cbz	r0, 8004584 <_calloc_r+0x18>
 800457c:	4622      	mov	r2, r4
 800457e:	2100      	movs	r1, #0
 8004580:	f7fe f85e 	bl	8002640 <memset>
 8004584:	4628      	mov	r0, r5
 8004586:	bd38      	pop	{r3, r4, r5, pc}

08004588 <_free_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4605      	mov	r5, r0
 800458c:	2900      	cmp	r1, #0
 800458e:	d045      	beq.n	800461c <_free_r+0x94>
 8004590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004594:	1f0c      	subs	r4, r1, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	bfb8      	it	lt
 800459a:	18e4      	addlt	r4, r4, r3
 800459c:	f000 f958 	bl	8004850 <__malloc_lock>
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <_free_r+0x98>)
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	4610      	mov	r0, r2
 80045a6:	b933      	cbnz	r3, 80045b6 <_free_r+0x2e>
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	6014      	str	r4, [r2, #0]
 80045ac:	4628      	mov	r0, r5
 80045ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045b2:	f000 b94e 	b.w	8004852 <__malloc_unlock>
 80045b6:	42a3      	cmp	r3, r4
 80045b8:	d90c      	bls.n	80045d4 <_free_r+0x4c>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	1862      	adds	r2, r4, r1
 80045be:	4293      	cmp	r3, r2
 80045c0:	bf04      	itt	eq
 80045c2:	681a      	ldreq	r2, [r3, #0]
 80045c4:	685b      	ldreq	r3, [r3, #4]
 80045c6:	6063      	str	r3, [r4, #4]
 80045c8:	bf04      	itt	eq
 80045ca:	1852      	addeq	r2, r2, r1
 80045cc:	6022      	streq	r2, [r4, #0]
 80045ce:	6004      	str	r4, [r0, #0]
 80045d0:	e7ec      	b.n	80045ac <_free_r+0x24>
 80045d2:	4613      	mov	r3, r2
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	b10a      	cbz	r2, 80045dc <_free_r+0x54>
 80045d8:	42a2      	cmp	r2, r4
 80045da:	d9fa      	bls.n	80045d2 <_free_r+0x4a>
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	1858      	adds	r0, r3, r1
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d10b      	bne.n	80045fc <_free_r+0x74>
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	4401      	add	r1, r0
 80045e8:	1858      	adds	r0, r3, r1
 80045ea:	4282      	cmp	r2, r0
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	d1dd      	bne.n	80045ac <_free_r+0x24>
 80045f0:	6810      	ldr	r0, [r2, #0]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	4401      	add	r1, r0
 80045f8:	6019      	str	r1, [r3, #0]
 80045fa:	e7d7      	b.n	80045ac <_free_r+0x24>
 80045fc:	d902      	bls.n	8004604 <_free_r+0x7c>
 80045fe:	230c      	movs	r3, #12
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	e7d3      	b.n	80045ac <_free_r+0x24>
 8004604:	6820      	ldr	r0, [r4, #0]
 8004606:	1821      	adds	r1, r4, r0
 8004608:	428a      	cmp	r2, r1
 800460a:	bf04      	itt	eq
 800460c:	6811      	ldreq	r1, [r2, #0]
 800460e:	6852      	ldreq	r2, [r2, #4]
 8004610:	6062      	str	r2, [r4, #4]
 8004612:	bf04      	itt	eq
 8004614:	1809      	addeq	r1, r1, r0
 8004616:	6021      	streq	r1, [r4, #0]
 8004618:	605c      	str	r4, [r3, #4]
 800461a:	e7c7      	b.n	80045ac <_free_r+0x24>
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	20000234 	.word	0x20000234

08004624 <_malloc_r>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	1ccd      	adds	r5, r1, #3
 8004628:	f025 0503 	bic.w	r5, r5, #3
 800462c:	3508      	adds	r5, #8
 800462e:	2d0c      	cmp	r5, #12
 8004630:	bf38      	it	cc
 8004632:	250c      	movcc	r5, #12
 8004634:	2d00      	cmp	r5, #0
 8004636:	4606      	mov	r6, r0
 8004638:	db01      	blt.n	800463e <_malloc_r+0x1a>
 800463a:	42a9      	cmp	r1, r5
 800463c:	d903      	bls.n	8004646 <_malloc_r+0x22>
 800463e:	230c      	movs	r3, #12
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	2000      	movs	r0, #0
 8004644:	bd70      	pop	{r4, r5, r6, pc}
 8004646:	f000 f903 	bl	8004850 <__malloc_lock>
 800464a:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <_malloc_r+0xac>)
 800464c:	6814      	ldr	r4, [r2, #0]
 800464e:	4621      	mov	r1, r4
 8004650:	b991      	cbnz	r1, 8004678 <_malloc_r+0x54>
 8004652:	4c20      	ldr	r4, [pc, #128]	; (80046d4 <_malloc_r+0xb0>)
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	b91b      	cbnz	r3, 8004660 <_malloc_r+0x3c>
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f83d 	bl	80046d8 <_sbrk_r>
 800465e:	6020      	str	r0, [r4, #0]
 8004660:	4629      	mov	r1, r5
 8004662:	4630      	mov	r0, r6
 8004664:	f000 f838 	bl	80046d8 <_sbrk_r>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d124      	bne.n	80046b6 <_malloc_r+0x92>
 800466c:	230c      	movs	r3, #12
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	4630      	mov	r0, r6
 8004672:	f000 f8ee 	bl	8004852 <__malloc_unlock>
 8004676:	e7e4      	b.n	8004642 <_malloc_r+0x1e>
 8004678:	680b      	ldr	r3, [r1, #0]
 800467a:	1b5b      	subs	r3, r3, r5
 800467c:	d418      	bmi.n	80046b0 <_malloc_r+0x8c>
 800467e:	2b0b      	cmp	r3, #11
 8004680:	d90f      	bls.n	80046a2 <_malloc_r+0x7e>
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	50cd      	str	r5, [r1, r3]
 8004686:	18cc      	adds	r4, r1, r3
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f8e2 	bl	8004852 <__malloc_unlock>
 800468e:	f104 000b 	add.w	r0, r4, #11
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	f020 0007 	bic.w	r0, r0, #7
 8004698:	1ac3      	subs	r3, r0, r3
 800469a:	d0d3      	beq.n	8004644 <_malloc_r+0x20>
 800469c:	425a      	negs	r2, r3
 800469e:	50e2      	str	r2, [r4, r3]
 80046a0:	e7d0      	b.n	8004644 <_malloc_r+0x20>
 80046a2:	428c      	cmp	r4, r1
 80046a4:	684b      	ldr	r3, [r1, #4]
 80046a6:	bf16      	itet	ne
 80046a8:	6063      	strne	r3, [r4, #4]
 80046aa:	6013      	streq	r3, [r2, #0]
 80046ac:	460c      	movne	r4, r1
 80046ae:	e7eb      	b.n	8004688 <_malloc_r+0x64>
 80046b0:	460c      	mov	r4, r1
 80046b2:	6849      	ldr	r1, [r1, #4]
 80046b4:	e7cc      	b.n	8004650 <_malloc_r+0x2c>
 80046b6:	1cc4      	adds	r4, r0, #3
 80046b8:	f024 0403 	bic.w	r4, r4, #3
 80046bc:	42a0      	cmp	r0, r4
 80046be:	d005      	beq.n	80046cc <_malloc_r+0xa8>
 80046c0:	1a21      	subs	r1, r4, r0
 80046c2:	4630      	mov	r0, r6
 80046c4:	f000 f808 	bl	80046d8 <_sbrk_r>
 80046c8:	3001      	adds	r0, #1
 80046ca:	d0cf      	beq.n	800466c <_malloc_r+0x48>
 80046cc:	6025      	str	r5, [r4, #0]
 80046ce:	e7db      	b.n	8004688 <_malloc_r+0x64>
 80046d0:	20000234 	.word	0x20000234
 80046d4:	20000238 	.word	0x20000238

080046d8 <_sbrk_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4c06      	ldr	r4, [pc, #24]	; (80046f4 <_sbrk_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4605      	mov	r5, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	f7fd fe28 	bl	8002338 <_sbrk>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_sbrk_r+0x1a>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_sbrk_r+0x1a>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	2000030c 	.word	0x2000030c

080046f8 <__sread>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	f000 f8a8 	bl	8004854 <_read_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	bfab      	itete	ge
 8004708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800470a:	89a3      	ldrhlt	r3, [r4, #12]
 800470c:	181b      	addge	r3, r3, r0
 800470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004712:	bfac      	ite	ge
 8004714:	6563      	strge	r3, [r4, #84]	; 0x54
 8004716:	81a3      	strhlt	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__swrite>:
 800471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471e:	461f      	mov	r7, r3
 8004720:	898b      	ldrh	r3, [r1, #12]
 8004722:	05db      	lsls	r3, r3, #23
 8004724:	4605      	mov	r5, r0
 8004726:	460c      	mov	r4, r1
 8004728:	4616      	mov	r6, r2
 800472a:	d505      	bpl.n	8004738 <__swrite+0x1e>
 800472c:	2302      	movs	r3, #2
 800472e:	2200      	movs	r2, #0
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	f000 f868 	bl	8004808 <_lseek_r>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	4632      	mov	r2, r6
 8004746:	463b      	mov	r3, r7
 8004748:	4628      	mov	r0, r5
 800474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	f000 b817 	b.w	8004780 <_write_r>

08004752 <__sseek>:
 8004752:	b510      	push	{r4, lr}
 8004754:	460c      	mov	r4, r1
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 f855 	bl	8004808 <_lseek_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	bf15      	itete	ne
 8004764:	6560      	strne	r0, [r4, #84]	; 0x54
 8004766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800476e:	81a3      	strheq	r3, [r4, #12]
 8004770:	bf18      	it	ne
 8004772:	81a3      	strhne	r3, [r4, #12]
 8004774:	bd10      	pop	{r4, pc}

08004776 <__sclose>:
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 b813 	b.w	80047a4 <_close_r>
	...

08004780 <_write_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4c07      	ldr	r4, [pc, #28]	; (80047a0 <_write_r+0x20>)
 8004784:	4605      	mov	r5, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	6022      	str	r2, [r4, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fd fdc4 	bl	800231c <_write>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_write_r+0x1e>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	b103      	cbz	r3, 800479e <_write_r+0x1e>
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	2000030c 	.word	0x2000030c

080047a4 <_close_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4c06      	ldr	r4, [pc, #24]	; (80047c0 <_close_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4605      	mov	r5, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	f7fd fddc 	bl	800236c <_close>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_close_r+0x1a>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	b103      	cbz	r3, 80047be <_close_r+0x1a>
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	2000030c 	.word	0x2000030c

080047c4 <_fstat_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4c07      	ldr	r4, [pc, #28]	; (80047e4 <_fstat_r+0x20>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4605      	mov	r5, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	f7fd fdce 	bl	8002372 <_fstat>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d102      	bne.n	80047e0 <_fstat_r+0x1c>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	b103      	cbz	r3, 80047e0 <_fstat_r+0x1c>
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	bf00      	nop
 80047e4:	2000030c 	.word	0x2000030c

080047e8 <_isatty_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4c06      	ldr	r4, [pc, #24]	; (8004804 <_isatty_r+0x1c>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4605      	mov	r5, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	f7fd fdc2 	bl	800237c <_isatty>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_isatty_r+0x1a>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_isatty_r+0x1a>
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	2000030c 	.word	0x2000030c

08004808 <_lseek_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4c07      	ldr	r4, [pc, #28]	; (8004828 <_lseek_r+0x20>)
 800480c:	4605      	mov	r5, r0
 800480e:	4608      	mov	r0, r1
 8004810:	4611      	mov	r1, r2
 8004812:	2200      	movs	r2, #0
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	f7fd fdb2 	bl	8002380 <_lseek>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_lseek_r+0x1e>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b103      	cbz	r3, 8004826 <_lseek_r+0x1e>
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	2000030c 	.word	0x2000030c

0800482c <__ascii_mbtowc>:
 800482c:	b082      	sub	sp, #8
 800482e:	b901      	cbnz	r1, 8004832 <__ascii_mbtowc+0x6>
 8004830:	a901      	add	r1, sp, #4
 8004832:	b142      	cbz	r2, 8004846 <__ascii_mbtowc+0x1a>
 8004834:	b14b      	cbz	r3, 800484a <__ascii_mbtowc+0x1e>
 8004836:	7813      	ldrb	r3, [r2, #0]
 8004838:	600b      	str	r3, [r1, #0]
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	1c10      	adds	r0, r2, #0
 800483e:	bf18      	it	ne
 8004840:	2001      	movne	r0, #1
 8004842:	b002      	add	sp, #8
 8004844:	4770      	bx	lr
 8004846:	4610      	mov	r0, r2
 8004848:	e7fb      	b.n	8004842 <__ascii_mbtowc+0x16>
 800484a:	f06f 0001 	mvn.w	r0, #1
 800484e:	e7f8      	b.n	8004842 <__ascii_mbtowc+0x16>

08004850 <__malloc_lock>:
 8004850:	4770      	bx	lr

08004852 <__malloc_unlock>:
 8004852:	4770      	bx	lr

08004854 <_read_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4c07      	ldr	r4, [pc, #28]	; (8004874 <_read_r+0x20>)
 8004858:	4605      	mov	r5, r0
 800485a:	4608      	mov	r0, r1
 800485c:	4611      	mov	r1, r2
 800485e:	2200      	movs	r2, #0
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f7fd fd53 	bl	800230e <_read>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_read_r+0x1e>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	b103      	cbz	r3, 8004872 <_read_r+0x1e>
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	2000030c 	.word	0x2000030c

08004878 <__ascii_wctomb>:
 8004878:	b149      	cbz	r1, 800488e <__ascii_wctomb+0x16>
 800487a:	2aff      	cmp	r2, #255	; 0xff
 800487c:	bf85      	ittet	hi
 800487e:	238a      	movhi	r3, #138	; 0x8a
 8004880:	6003      	strhi	r3, [r0, #0]
 8004882:	700a      	strbls	r2, [r1, #0]
 8004884:	f04f 30ff 	movhi.w	r0, #4294967295
 8004888:	bf98      	it	ls
 800488a:	2001      	movls	r0, #1
 800488c:	4770      	bx	lr
 800488e:	4608      	mov	r0, r1
 8004890:	4770      	bx	lr
	...

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
 80048ac:	0000      	movs	r0, r0
	...
